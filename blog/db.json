{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/post.js","path":"js/post.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/anchor/anchor.min.js","path":"lib/anchor/anchor.min.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/github-markdown/github-markdown.min.css","path":"lib/github-markdown/github-markdown.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/fancybox/jquery.fancybox.min.css","path":"lib/fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/prettify/github-v2.min.css","path":"lib/prettify/github-v2.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/katex/katex.min.css","path":"lib/katex/katex.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/popper/popper.min.js","path":"lib/popper/popper.min.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/prettify/tomorrow-night.min.css","path":"lib/prettify/tomorrow-night.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/prettify/tomorrow-night-eighties.min.css","path":"lib/prettify/tomorrow-night-eighties.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/prettify/tomorrow.min.css","path":"lib/prettify/tomorrow.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/prettify/prettify.min.js","path":"lib/prettify/prettify.min.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/smoothscroll/SmoothScroll.min.js","path":"lib/smoothscroll/SmoothScroll.min.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/tocbot/tocbot.min.js","path":"lib/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/typed/typed.min.js","path":"lib/typed/typed.min.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wallhaven-4xjllo.jpg","path":"img/wallhaven-4xjllo.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/fancybox/jquery.fancybox.min.js","path":"lib/fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/jquery/jquery.min.js","path":"lib/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/bootstrap/js/bootstrap.min.js","path":"lib/bootstrap/js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-regular-400.eot","path":"lib/font-awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-regular-400.ttf","path":"lib/font-awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-regular-400.woff","path":"lib/font-awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wallhaven-j5l9gw.jpg","path":"img/wallhaven-j5l9gw.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-brands-400.woff","path":"lib/font-awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-solid-900.woff","path":"lib/font-awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-brands-400.ttf","path":"lib/font-awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-regular-400.svg","path":"lib/font-awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Bold.eot","path":"lib/mdbootstrap/font/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Bold.woff2","path":"lib/mdbootstrap/font/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Light.eot","path":"lib/mdbootstrap/font/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Bold.woff","path":"lib/mdbootstrap/font/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Light.woff","path":"lib/mdbootstrap/font/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Light.woff2","path":"lib/mdbootstrap/font/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Medium.eot","path":"lib/mdbootstrap/font/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Medium.woff","path":"lib/mdbootstrap/font/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Regular.eot","path":"lib/mdbootstrap/font/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Medium.woff2","path":"lib/mdbootstrap/font/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Regular.woff","path":"lib/mdbootstrap/font/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Regular.woff2","path":"lib/mdbootstrap/font/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Thin.eot","path":"lib/mdbootstrap/font/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-solid-900.ttf","path":"lib/font-awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/fluid/source/wallhaven-mdv8v1.jpg","path":"wallhaven-mdv8v1.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Thin.woff","path":"lib/mdbootstrap/font/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Thin.woff2","path":"lib/mdbootstrap/font/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/bootstrap/css/bootstrap.min.css","path":"lib/bootstrap/css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-brands-400.eot","path":"lib/font-awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-solid-900.eot","path":"lib/font-awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Light.ttf","path":"lib/mdbootstrap/font/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Medium.ttf","path":"lib/mdbootstrap/font/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Regular.ttf","path":"lib/mdbootstrap/font/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/js/mdb.min.js","path":"lib/mdbootstrap/js/mdb.min.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Thin.ttf","path":"lib/mdbootstrap/font/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Bold.ttf","path":"lib/mdbootstrap/font/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/mdbootstrap/css/mdb.min.css","path":"lib/mdbootstrap/css/mdb.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-brands-400.svg","path":"lib/font-awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-solid-900.svg","path":"lib/font-awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wallhaven-kw6x56.jpg","path":"img/wallhaven-kw6x56.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/wallhaven-39gogv.jpg","path":"wallhaven-39gogv.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wallhaven-2e5956.png","path":"img/wallhaven-2e5956.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wallhaven-g8lq5d.png","path":"img/wallhaven-g8lq5d.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wallhaven-p8xwle.jpg","path":"img/wallhaven-p8xwle.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wallhaven-zmrp3o.jpg","path":"img/wallhaven-zmrp3o.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wallhaven-ey193k.png","path":"img/wallhaven-ey193k.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/wallhaven-13mqwg.jpg","path":"wallhaven-13mqwg.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wallhaven-0pkd59.jpg","path":"img/wallhaven-0pkd59.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wallhaven-vgv7jm.png","path":"img/wallhaven-vgv7jm.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wallhaven-j5j5q5.jpg","path":"img/wallhaven-j5j5q5.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wallhaven-13mk9v.jpg","path":"img/wallhaven-13mk9v.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wallhaven-13ek89.jpg","path":"img/wallhaven-13ek89.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/wallhaven-eyq5gk.png","path":"img/wallhaven-eyq5gk.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/fluid/LICENSE","hash":"77259cff2096bcf2974d2091a28302511b9103f4","modified":1581745631000},{"_id":"themes/fluid/Changelog.md","hash":"1e0a956af419758336cce4a6661a834f59628b55","modified":1581745631000},{"_id":"themes/fluid/README.md","hash":"d7c757832446b344aa81c93099fc6a70ded2dede","modified":1581745631000},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1581745631000},{"_id":"themes/fluid/_static_prefix.yml","hash":"9c66446ad2e4d9f68549108adc1c8afd53f1a60b","modified":1581745631000},{"_id":"themes/fluid/_config.yml","hash":"bc4fda8adc6099e1de85de29b35c0e72663fd59d","modified":1584930563009},{"_id":"themes/fluid/README_en.md","hash":"dca08de1f6120164c03de47f6e69eba632fd20c0","modified":1581745631000},{"_id":"themes/fluid/layout/page.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1581745631000},{"_id":"themes/fluid/pages/about.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1581745631000},{"_id":"source/_posts/Chapter1-Review-Questions.md","hash":"dc2fa07b154afdaeab5856b036f36dbd85080c39","modified":1584156424976},{"_id":"source/_posts/.Green-Chemistry.md.swp","hash":"0d225c01efe3e65ef856f5af23953e1647e2ea84","modified":1583690342684},{"_id":"source/_posts/Green-Chemistry.md","hash":"96c8d80d5f74b79a8c0aab97e01a576145f6a750","modified":1583735977389},{"_id":"source/_posts/The-Network-Core.md","hash":"06502c2101bfc21ab7e1409815c90fe72add28e8","modified":1582963070187},{"_id":"source/_posts/The Network Edge.md","hash":"11cf9365ea7a19d2fe6c3b97deeb8f867ee80a1a","modified":1582878531437},{"_id":"source/_posts/process-switch-base-on-stack-switch.md","hash":"acdfe162b01a0a4dc16be57493ef925603b02456","modified":1582030698432},{"_id":"source/_posts/计算机网络自顶向下有意思的单词.md","hash":"839bc134923591510993bf7a05efcf83486037e1","modified":1584621083113},{"_id":"source/_posts/talk-about-the-Past-and-Habits-in-English-USED-TO-vs-WOULD.md","hash":"c440c618d4d418de176a8e6fb4fe9d233c898ca1","modified":1582030717652},{"_id":"source/_posts/英语词汇积累Blog.md","hash":"42f9f0113fd9459f7059313e2313a3a6b53d7b9e","modified":1582608620566},{"_id":"source/categories/index.md","hash":"ce91ab6969127c25d2575702bb2f37855978fea2","modified":1584683488397},{"_id":"themes/fluid/languages/ja.yml","hash":"5fb9d2233a62a737b455d18931c3cc5ea3264195","modified":1581745631000},{"_id":"themes/fluid/languages/en.yml","hash":"370b61742ea947934c72331ad29a2f1ec10db70f","modified":1581745631000},{"_id":"themes/fluid/layout/about.ejs","hash":"62167c99a1deeeef31e2c972039a238e8a69146e","modified":1581745631000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"ccc2ec0c56c5de49ca3b39da7f4d23edab59a942","modified":1581745631000},{"_id":"themes/fluid/layout/404.ejs","hash":"8207b0b7e14384a8ae3a954bbad1db14664bb918","modified":1581745631000},{"_id":"themes/fluid/layout/archive.ejs","hash":"ed39c0a0facd2e746276e061a27ae38867f7b71c","modified":1581745631000},{"_id":"themes/fluid/layout/category.ejs","hash":"9cc94d4044e1170ffff2f98d4842b0fc27bf168d","modified":1581745631000},{"_id":"themes/fluid/layout/categories.ejs","hash":"8a3347ec1ba39d5dd3984ba2b3c90eb8258e5977","modified":1581745631000},{"_id":"themes/fluid/layout/index.ejs","hash":"98151107470361ac059715cabf3f8dd96488d1a2","modified":1581745631000},{"_id":"themes/fluid/layout/layout.ejs","hash":"edf20a9e72f8a70de7f836cfd9324e506af6adff","modified":1581745631000},{"_id":"themes/fluid/layout/links.ejs","hash":"a77a6e192151f20d08f7f421b578ba2ea32332b4","modified":1581745631000},{"_id":"themes/fluid/layout/post.ejs","hash":"fbf6860fa6d89956d02bd28c9ae0d2fed59467a0","modified":1581745631000},{"_id":"themes/fluid/layout/tag.ejs","hash":"f47a126f3848bcdf482f2ed9c7f396e65a30ef7d","modified":1581745631000},{"_id":"themes/fluid/layout/tags.ejs","hash":"716769e91a69014cefffdddb137098bb2ed99297","modified":1581745631000},{"_id":"themes/fluid/pages/local-search.xml","hash":"6606c859dc91b1a216e1a2b9eb0d1ec98db5d98b","modified":1581745631000},{"_id":"themes/fluid/scripts/helpers.js","hash":"7bd7e12252981003448e3b867e25cc303b3465fe","modified":1581745631000},{"_id":"themes/fluid/scripts/lazyload.js","hash":"ab682108e69328fece371955b2eb271f51016596","modified":1581745631000},{"_id":"themes/fluid/scripts/local-search.js","hash":"6db2897057b51617edb19cf8f40ea30106d66f37","modified":1581745631000},{"_id":"themes/fluid/scripts/merge-configs.js","hash":"63727d66f6a0340538d17b52dde9c7f0fe70cf83","modified":1581745631000},{"_id":"themes/fluid/scripts/pages.js","hash":"b62aa2783da3dd81f54a826b1171447b45dba479","modified":1581745631000},{"_id":"themes/fluid/scripts/wordcount.js","hash":"154e838ba4f5b6e9510da7e618a63fe9b388bd3d","modified":1581745631000},{"_id":"source/_posts/The Network Edge/2020-02-27 23-49-06 的屏幕截图.png","hash":"5925781f6c8256f1973baa633e5c40d4dcf5f9e4","modified":1582818551244},{"_id":"source/_posts/The Network Edge/2020-02-27 21-43-25 的屏幕截图.png","hash":"9d38f1fb610151e1694998f44a2a7a1cb5471052","modified":1582811011010},{"_id":"source/_posts/The-Network-Core/2020-02-28 19-47-00 的屏幕截图.png","hash":"be331f4399fabfab5e075c0b868a289c3946c5b0","modified":1582890426982},{"_id":"source/_posts/The Network Edge/2020-02-28 00-21-20 的屏幕截图.png","hash":"7184f370210cd64c915cecb348ee9fb75d7a00d0","modified":1582820483530},{"_id":"source/_posts/process-switch-base-on-stack-switch/wm.png","hash":"638878e7a7e042fd3db6a42fdb4ce52c6ceb5b08","modified":1581839920819},{"_id":"themes/fluid/layout/_partial/busuanzi.ejs","hash":"c3dec7af6da974e783a45f83ee48a6d3281783cc","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"cd2d2358380638b3d11b89cf6cb99e5dd1da3875","modified":1581745631000},{"_id":"source/_posts/process-switch-base-on-stack-switch/wm1.png","hash":"98e8f274066bee2e2916f09aac57d2652aff34d9","modified":1581839940895},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"98f1bab1fc424cd52e1cc93f94e4d63569306996","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"39fab51cc8a66520b84991558d264c2d9282c908","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"1305a0817e540323dfcd3b4a558103b592a7d78d","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"c798fdce888c6f26790cd201e0962ce8d479a6fc","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"e59408274d8060d535be8ab923284df2f8aa8506","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"6187cddeb63d3031b50515c44eec207006c5a814","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"baf8c01fcdfcee79dddfd1f308e0b86aa3f70cfc","modified":1581745631000},{"_id":"source/_posts/process-switch-base-on-stack-switch/wm2.png","hash":"64fa8056049496709460781c80064e582b8bf197","modified":1581845475617},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"818aa1166f5aeb2fa3712e11481d3c65bc211524","modified":1581745631000},{"_id":"themes/fluid/source/css/main.styl","hash":"33a5dac12a89f0b6f343f4b7f639f8cb2c29e330","modified":1581745631000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1581745631000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1581745631000},{"_id":"themes/fluid/source/js/lazyload.js","hash":"bb11c0a419de1fc4ce1ef633574ce0f9b91e1441","modified":1581745631000},{"_id":"themes/fluid/source/js/local-search.js","hash":"66046f2ad85aa22fd64bbd0e968a498a2c5bfbaa","modified":1581745631000},{"_id":"themes/fluid/source/js/post.js","hash":"3c4894c77b4f28d61ab017dd61548054ed781dbe","modified":1581745631000},{"_id":"source/_posts/Chapter1-Review-Questions/2020-03-09_21:03_select.png","hash":"029a01fc4db75f25cb54b846855045b2bca9d8b1","modified":1583760453964},{"_id":"source/_posts/The Network Edge/2020-02-27 20-56-20 的屏幕截图.png","hash":"fe83d13f0afd360ab73b2b11393f4a157849b7d0","modified":1582808187148},{"_id":"themes/fluid/source/js/main.js","hash":"c1bee0e5ba4f4fe121549bd1122266446810d6b2","modified":1581745631000},{"_id":"themes/fluid/source/css/_functions/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1581745631000},{"_id":"themes/fluid/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1581745631000},{"_id":"themes/fluid/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1581745631000},{"_id":"source/_posts/The Network Edge/2020-02-27 14-34-38 的屏幕截图.png","hash":"727e5ec3f704610ebecf1fbba26dbb970b80d858","modified":1582785282802},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"5898fb0a5610c840ba20a6a84c2952e9331d89b9","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"b8d84205f2cd899ba490fc2335ea2e1353f1d03d","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"19fb3d0390a8e2334030b3f43b53f1019b682433","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"8ab72945ef82f80147e60604dbb8506f3dcdec4f","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"2cfd1e0cbf0b71d74de2760fd2303bb90afedc42","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"c4bbcf1507f19be6e077e73d0b38d00003f3161b","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"f1a4ced91653cd1c9ce1943d36488492bb5f152e","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/plugins/anchor.ejs","hash":"40032ca6af619716fa3479eeb9a5f47924d95126","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/plugins/daovoice.ejs","hash":"cfc684ba48608abd25afd155ee373d9936bbe84e","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/plugins/fancybox.ejs","hash":"784a8e656dbf535269bb901fc7b2469dc24e1899","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/plugins/local-search.ejs","hash":"421ad423f4a44a9468253e1f117145a500fdec78","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"2778826c66c442e33ac9f9c32bc6e9e1ec0ef8f5","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/plugins/mouse-click.ejs","hash":"eb19991199c201ceb103a6ef025e4dfd1e7dbfb7","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/plugins/prettify.ejs","hash":"d835646f43d27cfa63c1d84c851a16cd1c49f970","modified":1581745631000},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"2ee91a9782ffca316b12ab45a96a9bbafe57e5af","modified":1581745631000},{"_id":"themes/fluid/source/css/_custom/custom.styl","hash":"3626d8439c27c9bfde008de8a7ba5124bbc7c397","modified":1581745631000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"271abbfef0414cb6d854a0278f8348e3f6fc70b1","modified":1581745631000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"68caf7cc73fa6211f9802b69293a2a38d7322de7","modified":1581745631000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"56ee4f721b54c623286dd172085aaf34c0128837","modified":1581745631000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"03703ece80dac645607d4731dff3fdd923777d2a","modified":1581745631000},{"_id":"themes/fluid/source/lib/anchor/anchor.min.js","hash":"0996588202bd062dad6f592615cb4791e1f8be91","modified":1581745631000},{"_id":"themes/fluid/source/lib/github-markdown/github-markdown.min.css","hash":"23ec6f05c5b69aa8ffb12c59c9bf1325ee5a26d1","modified":1581745631000},{"_id":"themes/fluid/source/lib/fancybox/jquery.fancybox.min.css","hash":"bfa13de0fab7defa3a25c3197e90b600c4897c34","modified":1581745631000},{"_id":"themes/fluid/source/lib/prettify/github-v2.min.css","hash":"da1b8e6d4df1f044d12f461880e677d65dbbf2d3","modified":1581745631000},{"_id":"themes/fluid/source/lib/katex/katex.min.css","hash":"f29c27f5b804ec30acdebb8ec0488fc4a9e1538a","modified":1581745631000},{"_id":"themes/fluid/source/lib/popper/popper.min.js","hash":"27d61a7e89d12ce0744f34fa804230eeb13ff128","modified":1581745631000},{"_id":"themes/fluid/source/lib/prettify/tomorrow-night.min.css","hash":"535256d676d247d3282e9a8ae2777c6f7df4fdc6","modified":1581745631000},{"_id":"themes/fluid/source/lib/prettify/tomorrow-night-eighties.min.css","hash":"a5f2102fc148359a92435b170f3bfb25e1221837","modified":1581745631000},{"_id":"themes/fluid/source/lib/prettify/tomorrow.min.css","hash":"ea61879c64ca73a5ea233b1315faf7f2fdfebca9","modified":1581745631000},{"_id":"themes/fluid/source/lib/prettify/prettify.min.js","hash":"03044b62cdb1c300537c14dcf424333fcf4c9110","modified":1581745631000},{"_id":"themes/fluid/source/lib/smoothscroll/SmoothScroll.min.js","hash":"ee5dea9ea4c5edb110f30a277e5fca7993f948b5","modified":1581745631000},{"_id":"themes/fluid/source/lib/tocbot/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1581745631000},{"_id":"themes/fluid/source/lib/typed/typed.min.js","hash":"38b792348023d55caabd7f888ae477ee143e6abe","modified":1581745631000},{"_id":"source/_posts/The-Network-Core/2020-02-28 19-54-24 的屏幕截图.png","hash":"8a66dd9f6d28721e9b605bb2e40d139519881b94","modified":1582890871155},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1581745631000},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1581745631000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1581745631000},{"_id":"themes/fluid/source/img/wallhaven-4xjllo.jpg","hash":"ed6c468cafb3ca7641b2427a4a6d05e0a7370095","modified":1581841175176},{"_id":"themes/fluid/source/lib/fancybox/jquery.fancybox.min.js","hash":"211f4852cbb5662e11b9688bef8415ca328a88ef","modified":1581745631000},{"_id":"themes/fluid/source/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1581745631000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"c42222b737664023ee95db6c379e6e4a40f1cbcd","modified":1581745631000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"79475bf3e25a67f38a921d23dece86cd7584c528","modified":1581745631000},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"43f49545fe2581338d971ecdf848942cc519e378","modified":1581745631000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"9a17f8455f178f1f85d40df873fd76703e23fe68","modified":1581745631000},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"eee2e84a23f1bbccbe1c24395dce15814a291e8b","modified":1581745631000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"ed9268c7a4ba135437ec30adfe4724cf2719e1cc","modified":1581745631000},{"_id":"themes/fluid/source/lib/bootstrap/js/bootstrap.min.js","hash":"8260ff4bf54350c075bc10d18e349d158e1a4af1","modified":1581745631000},{"_id":"themes/fluid/source/lib/font-awesome/css/all.min.css","hash":"6f4095f66e56d39ef0adefbe85a1dcfc13bd133b","modified":1581745631000},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"2e97930b520222ec3c2e4188ce07cc1904beba48","modified":1581745631000},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"5eb58f4263f87c543388bf66dec7d1f0b7c5b32c","modified":1581745631000},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"8b356dc021032d9380af47f7608a6b62a9b6f363","modified":1581745631000},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"38e6bd17442bb34e0e13a2c9bcbc5299f68be173","modified":1581745631000},{"_id":"themes/fluid/source/img/wallhaven-j5l9gw.jpg","hash":"83e7131f2bd499a5643d2af76e1943157f214bfc","modified":1581842609127},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"2417fe03c7330a5160f070d6ab747a2bc4bbd41b","modified":1581745631000},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"9465c5894ca2f93655fa5767b820b762aff6b518","modified":1581745631000},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"5d5d1448b199c38f1b39a49b1e9b3f1381a26cad","modified":1581745631000},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"d378644ff0f7549fa6f217a08dfd2566a770638e","modified":1581745631000},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"3fbe9822118e91350912f51f3080ce4aa9b3ec38","modified":1581745631000},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"f9583bce6740a4125e14d0628ffbd946b7ddfdda","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1581745631000},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"7b280debee5800806092e35a6bc2c6fd9c51cf63","modified":1581745631000},{"_id":"themes/fluid/source/wallhaven-mdv8v1.jpg","hash":"ba47e4386c22140bfbb8a6a28e8def42f2761693","modified":1581841029146},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1581745631000},{"_id":"themes/fluid/source/lib/bootstrap/css/bootstrap.min.css","hash":"3665a5389b7a20dd3b2fe9cb0ed3d80bec1cf2a3","modified":1581745631000},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"453e71a65f2958480b74fdb75a53d41068699dbf","modified":1581745631000},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"2b0ebea58a0bc895400dffe8c5e434c8b12338e3","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/js/mdb.min.js","hash":"fef8d611bbc14ad31ca9ec9e2990bfde4d873bb1","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1581745631000},{"_id":"themes/fluid/source/lib/mdbootstrap/css/mdb.min.css","hash":"62818e7755b098a1c3b503425356570a2c7474d9","modified":1581745631000},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"fcac55c6f9e9993cea6e2ecc729fffc36c7009b2","modified":1581745631000},{"_id":"themes/fluid/source/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3d24b0004b9dac32a46622cefa72cb3173b13115","modified":1581745631000},{"_id":"themes/fluid/source/img/wallhaven-kw6x56.jpg","hash":"60d186603fc8e8fa4218f6e71379468b5dd4c5da","modified":1581842533663},{"_id":"themes/fluid/source/wallhaven-39gogv.jpg","hash":"d9d9fd2ea9be4bf615cc43ff8cc24a2df9d4dba8","modified":1581840880064},{"_id":"themes/fluid/source/img/wallhaven-2e5956.png","hash":"f7def05bfa96d26b40ace918cff4ea4ef9aad9b5","modified":1581842459191},{"_id":"themes/fluid/source/img/wallhaven-g8lq5d.png","hash":"1c81d817f32d67e120680fdcaf402fd2d36301bd","modified":1581842772186},{"_id":"themes/fluid/source/img/wallhaven-p8xwle.jpg","hash":"dcad7c56c05bd00999cb64c908ce50bba95a7077","modified":1581842734166},{"_id":"themes/fluid/source/img/wallhaven-zmrp3o.jpg","hash":"e8aff479e30fa3f8c4937586140f8fd6384e0b38","modified":1581841267570},{"_id":"themes/fluid/source/img/wallhaven-ey193k.png","hash":"8a11afb1ace89a663b3f43b0c97f1ab2fb04a986","modified":1581842752474},{"_id":"themes/fluid/source/wallhaven-13mqwg.jpg","hash":"31a5fb67db945f739668cbbf0042a4afe7799e7a","modified":1581842264217},{"_id":"public/atom.xml","hash":"49e91ad8393f544b6f8ece20817444044c75baff","modified":1584955711587},{"_id":"public/sitemap.xml","hash":"aae0e6b02f3e487425747ffc6ae8d47aaa519511","modified":1584955711587},{"_id":"public/local-search.xml","hash":"5f7115f41ba5b3b2ccbccf135a712201e6c3fcd5","modified":1584955711587},{"_id":"public/categories/index.html","hash":"9461f7112daeecd2a8a4e30378f5fda85c1a91f1","modified":1584930568653},{"_id":"public/2020/03/09/Chapter1-Review-Questions/index.html","hash":"c22782716a4f191c74faeeb483a896436c2f4401","modified":1584156439901},{"_id":"public/2020/03/03/计算机网络自顶向下有意思的单词/index.html","hash":"981ac0b4448050cbac72d1e8776cc9f19f119a7e","modified":1584683607869},{"_id":"public/2020/02/17/talk-about-the-Past-and-Habits-in-English-USED-TO-vs-WOULD/index.html","hash":"dd531aff4683da022ef73fdd3e33373189da01bd","modified":1583770327639},{"_id":"public/archives/index.html","hash":"792f3cfcd09508cb1c8b154df584e937c3a4e357","modified":1584930568653},{"_id":"public/archives/2020/index.html","hash":"6ca6488e669dd70ad10316aa70c3e6af47172630","modified":1584930568653},{"_id":"public/archives/2020/02/index.html","hash":"58543687ee3deabf6599dd76b19a7bb74b9c2d91","modified":1584930568653},{"_id":"public/archives/2020/03/index.html","hash":"2250e90f72b3df0f67430208f42fc179cecec658","modified":1584930568653},{"_id":"public/tags/Computer-Network-A-Top-Down-Approach/index.html","hash":"497d2456a3d1ed5d85e9679c712ec8d503f113ea","modified":1584930568653},{"_id":"public/tags/英语学习/index.html","hash":"136850dc8d64328c0a37cabf4aeb1897a11acffa","modified":1584930568653},{"_id":"public/tags/操作系统/index.html","hash":"f57ab3a33f154de65cfb8fd55ee51649efa22c70","modified":1584930568653},{"_id":"public/404.html","hash":"a49f031ed777bd92c09d7fbfc7c7527ef3b7a430","modified":1584897990339},{"_id":"public/tags/index.html","hash":"37c7801c47a8195316ab787f9cd0882f51138859","modified":1584930568653},{"_id":"public/links/index.html","hash":"06ba5ae21f55cb610618c8c6606a59317389dfa7","modified":1583770327639},{"_id":"public/about/index.html","hash":"043affefc8026341278384a78a11df7b9878dcc9","modified":1584930568653},{"_id":"public/2020/03/03/Green-Chemistry/index.html","hash":"89260abbbe5ff451adca78ece59f2fd284297c6b","modified":1583770327639},{"_id":"public/2020/02/28/The-Network-Core/index.html","hash":"be2237937450669b5a2731a854a3b587e74448f2","modified":1583770327639},{"_id":"public/2020/02/27/The Network Edge/index.html","hash":"deef01fbf2fbf595811af9ccb24072d12676eb2c","modified":1583770327639},{"_id":"public/2020/02/22/英语词汇积累Blog/index.html","hash":"abb9354752547529eea06936fe7bab7f8396b7c7","modified":1583770327639},{"_id":"public/2020/02/16/process-switch-base-on-stack-switch/index.html","hash":"6984512882ccfcb15eabbb6aeb94dcdfaf4935d1","modified":1583770327639},{"_id":"public/index.html","hash":"bc34b18383d7a37f36b4016f2eaef373f416fbbc","modified":1584896999041},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1583770327639},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1583770327639},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.eot","hash":"2e97930b520222ec3c2e4188ce07cc1904beba48","modified":1583770327639},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.ttf","hash":"5eb58f4263f87c543388bf66dec7d1f0b7c5b32c","modified":1583770327639},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"8b356dc021032d9380af47f7608a6b62a9b6f363","modified":1583770327639},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff","hash":"38e6bd17442bb34e0e13a2c9bcbc5299f68be173","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1583770327639},{"_id":"public/2020/02/28/The-Network-Core/2020-02-28 19-47-00 的屏幕截图.png","hash":"be331f4399fabfab5e075c0b868a289c3946c5b0","modified":1583770327639},{"_id":"public/2020/02/27/The Network Edge/2020-02-27 21-43-25 的屏幕截图.png","hash":"9d38f1fb610151e1694998f44a2a7a1cb5471052","modified":1583770327639},{"_id":"public/2020/02/27/The Network Edge/2020-02-27 23-49-06 的屏幕截图.png","hash":"5925781f6c8256f1973baa633e5c40d4dcf5f9e4","modified":1583770327639},{"_id":"public/2020/02/16/process-switch-base-on-stack-switch/wm.png","hash":"638878e7a7e042fd3db6a42fdb4ce52c6ceb5b08","modified":1583770327639},{"_id":"public/2020/02/27/The Network Edge/2020-02-28 00-21-20 的屏幕截图.png","hash":"7184f370210cd64c915cecb348ee9fb75d7a00d0","modified":1583770327639},{"_id":"public/2020/02/16/process-switch-base-on-stack-switch/wm1.png","hash":"98e8f274066bee2e2916f09aac57d2652aff34d9","modified":1583770327639},{"_id":"public/2020/02/16/process-switch-base-on-stack-switch/wm2.png","hash":"64fa8056049496709460781c80064e582b8bf197","modified":1583770327639},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff","hash":"2417fe03c7330a5160f070d6ab747a2bc4bbd41b","modified":1583770327639},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"9465c5894ca2f93655fa5767b820b762aff6b518","modified":1583770327639},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff","hash":"5d5d1448b199c38f1b39a49b1e9b3f1381a26cad","modified":1583770327639},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"d378644ff0f7549fa6f217a08dfd2566a770638e","modified":1583770327639},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.ttf","hash":"3fbe9822118e91350912f51f3080ce4aa9b3ec38","modified":1583770327639},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.eot","hash":"453e71a65f2958480b74fdb75a53d41068699dbf","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1583770327639},{"_id":"public/lib/mdbootstrap/font/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1583770327639},{"_id":"public/2020/03/09/Chapter1-Review-Questions/2020-03-09_21:03_select.png","hash":"029a01fc4db75f25cb54b846855045b2bca9d8b1","modified":1583770327639},{"_id":"public/2020/02/27/The Network Edge/2020-02-27 20-56-20 的屏幕截图.png","hash":"fe83d13f0afd360ab73b2b11393f4a157849b7d0","modified":1583770327639},{"_id":"public/css/main.css","hash":"82fb933080d9020d54cc399c4c16220a1e5d857c","modified":1583770327639},{"_id":"public/js/local-search.js","hash":"66046f2ad85aa22fd64bbd0e968a498a2c5bfbaa","modified":1583770327639},{"_id":"public/js/post.js","hash":"3c4894c77b4f28d61ab017dd61548054ed781dbe","modified":1583770327639},{"_id":"public/js/lazyload.js","hash":"bb11c0a419de1fc4ce1ef633574ce0f9b91e1441","modified":1583770327639},{"_id":"public/js/main.js","hash":"c1bee0e5ba4f4fe121549bd1122266446810d6b2","modified":1583770327639},{"_id":"public/lib/anchor/anchor.min.js","hash":"0996588202bd062dad6f592615cb4791e1f8be91","modified":1583770327639},{"_id":"public/lib/prettify/github-v2.min.css","hash":"da1b8e6d4df1f044d12f461880e677d65dbbf2d3","modified":1583770327639},{"_id":"public/lib/prettify/tomorrow-night.min.css","hash":"535256d676d247d3282e9a8ae2777c6f7df4fdc6","modified":1583770327639},{"_id":"public/lib/prettify/tomorrow-night-eighties.min.css","hash":"a5f2102fc148359a92435b170f3bfb25e1221837","modified":1583770327639},{"_id":"public/lib/prettify/tomorrow.min.css","hash":"ea61879c64ca73a5ea233b1315faf7f2fdfebca9","modified":1583770327639},{"_id":"public/lib/smoothscroll/SmoothScroll.min.js","hash":"ee5dea9ea4c5edb110f30a277e5fca7993f948b5","modified":1583770327639},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.svg","hash":"f9583bce6740a4125e14d0628ffbd946b7ddfdda","modified":1583770327639},{"_id":"public/2020/02/27/The Network Edge/2020-02-27 14-34-38 的屏幕截图.png","hash":"727e5ec3f704610ebecf1fbba26dbb970b80d858","modified":1583770327639},{"_id":"public/lib/github-markdown/github-markdown.min.css","hash":"23ec6f05c5b69aa8ffb12c59c9bf1325ee5a26d1","modified":1583770327639},{"_id":"public/lib/fancybox/jquery.fancybox.min.css","hash":"bfa13de0fab7defa3a25c3197e90b600c4897c34","modified":1583770327639},{"_id":"public/lib/prettify/prettify.min.js","hash":"03044b62cdb1c300537c14dcf424333fcf4c9110","modified":1583770327639},{"_id":"public/lib/tocbot/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1583770327639},{"_id":"public/lib/typed/typed.min.js","hash":"38b792348023d55caabd7f888ae477ee143e6abe","modified":1583770327639},{"_id":"public/img/wallhaven-4xjllo.jpg","hash":"ed6c468cafb3ca7641b2427a4a6d05e0a7370095","modified":1583770327639},{"_id":"public/lib/katex/katex.min.css","hash":"f29c27f5b804ec30acdebb8ec0488fc4a9e1538a","modified":1583770327639},{"_id":"public/lib/popper/popper.min.js","hash":"27d61a7e89d12ce0744f34fa804230eeb13ff128","modified":1583770327639},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.ttf","hash":"7b280debee5800806092e35a6bc2c6fd9c51cf63","modified":1583770327639},{"_id":"public/2020/02/28/The-Network-Core/2020-02-28 19-54-24 的屏幕截图.png","hash":"8a66dd9f6d28721e9b605bb2e40d139519881b94","modified":1583770327639},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.eot","hash":"2b0ebea58a0bc895400dffe8c5e434c8b12338e3","modified":1583770327639},{"_id":"public/img/wallhaven-j5l9gw.jpg","hash":"83e7131f2bd499a5643d2af76e1943157f214bfc","modified":1583770327639},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"6f4095f66e56d39ef0adefbe85a1dcfc13bd133b","modified":1583770327639},{"_id":"public/lib/bootstrap/js/bootstrap.min.js","hash":"8260ff4bf54350c075bc10d18e349d158e1a4af1","modified":1583770327639},{"_id":"public/lib/fancybox/jquery.fancybox.min.js","hash":"211f4852cbb5662e11b9688bef8415ca328a88ef","modified":1583770327639},{"_id":"public/lib/jquery/jquery.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1583770327639},{"_id":"public/wallhaven-mdv8v1.jpg","hash":"ba47e4386c22140bfbb8a6a28e8def42f2761693","modified":1583770327639},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.svg","hash":"fcac55c6f9e9993cea6e2ecc729fffc36c7009b2","modified":1583770327639},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.svg","hash":"3d24b0004b9dac32a46622cefa72cb3173b13115","modified":1583770327639},{"_id":"public/lib/bootstrap/css/bootstrap.min.css","hash":"3665a5389b7a20dd3b2fe9cb0ed3d80bec1cf2a3","modified":1583770327639},{"_id":"public/img/wallhaven-kw6x56.jpg","hash":"60d186603fc8e8fa4218f6e71379468b5dd4c5da","modified":1583770327639},{"_id":"public/lib/mdbootstrap/js/mdb.min.js","hash":"fef8d611bbc14ad31ca9ec9e2990bfde4d873bb1","modified":1583770327639},{"_id":"public/lib/mdbootstrap/css/mdb.min.css","hash":"62818e7755b098a1c3b503425356570a2c7474d9","modified":1583770327639},{"_id":"public/wallhaven-39gogv.jpg","hash":"d9d9fd2ea9be4bf615cc43ff8cc24a2df9d4dba8","modified":1583770327639},{"_id":"public/img/wallhaven-2e5956.png","hash":"f7def05bfa96d26b40ace918cff4ea4ef9aad9b5","modified":1583770327639},{"_id":"public/img/wallhaven-g8lq5d.png","hash":"1c81d817f32d67e120680fdcaf402fd2d36301bd","modified":1583770327639},{"_id":"public/img/wallhaven-p8xwle.jpg","hash":"dcad7c56c05bd00999cb64c908ce50bba95a7077","modified":1583770327639},{"_id":"public/img/wallhaven-zmrp3o.jpg","hash":"e8aff479e30fa3f8c4937586140f8fd6384e0b38","modified":1583770327639},{"_id":"public/img/wallhaven-ey193k.png","hash":"8a11afb1ace89a663b3f43b0c97f1ab2fb04a986","modified":1583770327639},{"_id":"public/wallhaven-13mqwg.jpg","hash":"31a5fb67db945f739668cbbf0042a4afe7799e7a","modified":1583770327639},{"_id":"source/_posts/.Chapter1-Review-Questions.md.swn","hash":"b535b0daa9403bc11846a9edb8abbd7fb82b2cc7","modified":1584800450777},{"_id":"source/_posts/.计算机网络自顶向下有意思的单词.md.swp","hash":"6bd324900e5be8148b24b57f0a07ad2f52c19115","modified":1583822354380},{"_id":"source/_posts/.Chapter1-Review-Questions.md.swp","hash":"2c66e71ab4e92f69d9db284a4d20fc7744166a8c","modified":1583911233205},{"_id":"source/_posts/.Chapter1-Review-Questions.md.swo","hash":"0005532b96df1549ea5fe3168412cba09d6d3396","modified":1583913192491},{"_id":"source/_posts/Chapter1-Review-Questions/2020-03-10_15:03_select.png","hash":"7d35955d8e2468af65b41f9a4b379f00768f9fbc","modified":1583824204165},{"_id":"source/_posts/Chapter1-Review-Questions/2020-03-11_14:03:1583906551_select.png","hash":"61a9ff664fccb4046058480994c83cac3916e6a6","modified":1583906551620},{"_id":"source/_posts/Chapter1-Review-Questions/2020-03-11_09:03_select.png","hash":"8eb71e4ec804ce499501a7444fc65300ba18a47a","modified":1583889452289},{"_id":"source/_posts/Chapter1-Review-Questions/2020-03-11_20:03:1583929611_select.png","hash":"98b54dc874094e9fa526b6b5906600e9e6b8640c","modified":1583929612046},{"_id":"public/2020/03/09/Chapter1-Review-Questions/2020-03-10_15:03_select.png","hash":"7d35955d8e2468af65b41f9a4b379f00768f9fbc","modified":1583936058206},{"_id":"public/2020/03/09/Chapter1-Review-Questions/2020-03-11_14:03:1583906551_select.png","hash":"61a9ff664fccb4046058480994c83cac3916e6a6","modified":1583936058206},{"_id":"public/2020/03/09/Chapter1-Review-Questions/2020-03-11_09:03_select.png","hash":"8eb71e4ec804ce499501a7444fc65300ba18a47a","modified":1583936058206},{"_id":"public/2020/03/09/Chapter1-Review-Questions/2020-03-11_20:03:1583929611_select.png","hash":"98b54dc874094e9fa526b6b5906600e9e6b8640c","modified":1583936058206},{"_id":"source/_posts/.Green-Chemistry.md.swo","hash":"20be2d931fb9baba2cabe7da0fd0e281218f7c7c","modified":1584325568289},{"_id":"source/_posts/.计算机网络自顶向下有意思的单词.md.swm","hash":"c1c5dfb3e11501deb288f55efb4994071d6dc403","modified":1584431000702},{"_id":"source/_posts/.计算机网络自顶向下有意思的单词.md.swn","hash":"23d8fd45f0586318c5aef4d525c284e676d47c69","modified":1584274024107},{"_id":"source/tags/index.md","hash":"643c8e4492cd30e78f35fe588fdd190d8efd2b49","modified":1584683587486},{"_id":"source/_posts/.计算机网络自顶向下有意思的单词.md.swo","hash":"d20175af051abb88885dc99cc1951426ea30ad33","modified":1584183012895},{"_id":"source/_posts/.Green-Chemistry.md.swn","hash":"e3ede1c1e7a28c7ab0bafc6341b5d164ed12124a","modified":1584331158935},{"_id":"source/_posts/.二元组和图形描述逻辑结构.md.swp","hash":"1e584db0cdd077bc30788aa8fdc9d4d92c4eab56","modified":1584684267467},{"_id":"source/_posts/.二元组和图形描述逻辑结构.md.swo","hash":"3ac52495cbf910ee34302dd423522ba5b116a410","modified":1584779694516},{"_id":"source/_posts/二元组和图形描述逻辑结构.md","hash":"6f88ddb8b0a609d980f8ea67600043c3057aa018","modified":1584859069285},{"_id":"public/2020/03/20/二元组和图形描述逻辑结构/index.html","hash":"e2f02d432b483600bf412ad91bcfb9105a3d121b","modified":1584859075450},{"_id":"public/categories/数据结构/index.html","hash":"296e757fb3b87a800ee519f5e8c8e6eace80f142","modified":1584930568653},{"_id":"public/tags/数据结构/index.html","hash":"cba294f7aba30caf81eb94361c1173767bd0df9b","modified":1584930568653},{"_id":"source/_posts/KMP算法.md","hash":"dae80ecf4fa147bb5d6844d5fd90866b88b746b5","modified":1584955694421},{"_id":"source/_posts/二元组和图形描述逻辑结构/870358-20160102224630526-1483051229.jpg","hash":"3ae5895250c4d823e1f534add6121f43cab45dd4","modified":1584858992058},{"_id":"public/2020/03/22/KMP算法/index.html","hash":"3dd01a7b7872a91736ad09d65f50f2bbc2ccf6cd","modified":1584955711587},{"_id":"public/2020/03/20/二元组和图形描述逻辑结构/870358-20160102224630526-1483051229.jpg","hash":"3ae5895250c4d823e1f534add6121f43cab45dd4","modified":1584859075450},{"_id":"source/_posts/.KMP算法.md.swp","hash":"751842a7b2f1edb38203afba568276b168163f16","modified":1584864937206},{"_id":"source/_posts/KMP算法/BL1.png","hash":"2b717e623b919cbb201eddb40b32840d6f901aca","modified":1584860440098},{"_id":"source/_posts/KMP算法/BL2.png","hash":"83a552022e33adfc9c1218b6d2fe0bc34d710685","modified":1584860471309},{"_id":"source/_posts/KMP算法/BL3.png","hash":"61af65ffa974557fcba929dfc9edb790f112db4e","modified":1584860476196},{"_id":"source/_posts/KMP算法/BL4.png","hash":"36d27adf1022d9b9260cd30fdbbcab6382cedfa0","modified":1584860481322},{"_id":"source/_posts/KMP算法/BL5.png","hash":"5c9fed7e60504c6b3af6cfaa69a7d73412760eee","modified":1584860486485},{"_id":"source/_posts/KMP算法/BL6.png","hash":"ef78b584d26d386c06d5dc2e442f8294c1ca2c83","modified":1584860491532},{"_id":"public/2020/03/22/KMP算法/BL1.png","hash":"2b717e623b919cbb201eddb40b32840d6f901aca","modified":1584866203316},{"_id":"public/2020/03/22/KMP算法/BL2.png","hash":"83a552022e33adfc9c1218b6d2fe0bc34d710685","modified":1584866203316},{"_id":"public/2020/03/22/KMP算法/BL3.png","hash":"61af65ffa974557fcba929dfc9edb790f112db4e","modified":1584866203316},{"_id":"public/2020/03/22/KMP算法/BL4.png","hash":"36d27adf1022d9b9260cd30fdbbcab6382cedfa0","modified":1584866203316},{"_id":"public/2020/03/22/KMP算法/BL5.png","hash":"5c9fed7e60504c6b3af6cfaa69a7d73412760eee","modified":1584866203316},{"_id":"public/2020/03/22/KMP算法/BL6.png","hash":"ef78b584d26d386c06d5dc2e442f8294c1ca2c83","modified":1584866203316},{"_id":"source/_posts/VIM指令学习.md","hash":"9cc2a50adaa5f9cfdb6df09943c40b22c6a83f3f","modified":1584867571596},{"_id":"public/2020/03/22/VIM指令学习/index.html","hash":"e67c627e28ff140dec9b3e7d671530ab52a71c2e","modified":1584868140594},{"_id":"public/archives/page/2/index.html","hash":"933304bdb0bb7aa46fea80d060b7a76f865484a3","modified":1584930568653},{"_id":"public/archives/2020/page/2/index.html","hash":"485671d4dcfb666b373f05605bb8cd8ee1bf70f0","modified":1584930568653},{"_id":"public/categories/vim/index.html","hash":"71ea20dd34d24c8d9cd21616ae9161cf22f95145","modified":1584930568653},{"_id":"public/page/2/index.html","hash":"bac528499ad2203efb180874868a70484089d141","modified":1584868140594},{"_id":"public/tags/vim/index.html","hash":"04d32efe7389530380a32002d113d5f342d888f8","modified":1584930568653},{"_id":"source/_posts/KMP算法/KMP举例1.png","hash":"5c9fed7e60504c6b3af6cfaa69a7d73412760eee","modified":1584870980942},{"_id":"source/_posts/KMP算法/KMP举例2.png","hash":"25629e5d00bf0c3c6cccba409e12b293e9f4fd5f","modified":1584871101765},{"_id":"public/2020/03/22/KMP算法/KMP举例1.png","hash":"5c9fed7e60504c6b3af6cfaa69a7d73412760eee","modified":1584873320046},{"_id":"public/2020/03/22/KMP算法/KMP举例2.png","hash":"25629e5d00bf0c3c6cccba409e12b293e9f4fd5f","modified":1584873320046},{"_id":"source/_posts/KMP算法/next1.png","hash":"8d971b1dfdfa57c25a8dff2132764736f0ffb4b9","modified":1584895049767},{"_id":"source/_posts/KMP算法/next2.png","hash":"aaebd238b3687ea1bb2e601735a9577ba3273cde","modified":1584895061629},{"_id":"source/_posts/KMP算法/next3.png","hash":"82c055640e2a6a172e0b411fcba0995d61688f4f","modified":1584895072398},{"_id":"source/_posts/KMP算法/next4.png","hash":"ca0c56c1475d908450db220a2544c7b8e7616193","modified":1584895082125},{"_id":"source/_posts/KMP算法/next5.png","hash":"7f238da8d349be91bdf73dc4e7be0ecc4761a929","modified":1584895089093},{"_id":"source/_posts/KMP算法/next6.png","hash":"ba318af8eb51e8ce79efe32f0b330015d42784ae","modified":1584895096947},{"_id":"source/_posts/KMP算法/证明1.png","hash":"2c6b062b9be55192d2dd27c5163c671c690c74db","modified":1584887699761},{"_id":"source/_posts/KMP算法/证明2.png","hash":"d985c91f822ecd15385304a93ce1071d1cbfb6dc","modified":1584887667917},{"_id":"source/_posts/KMP算法/证明3.png","hash":"524b5a24822aca584eeaef32bf489b8ea3168abd","modified":1584887682589},{"_id":"source/_posts/KMP算法/证明１.png","hash":"2c6b062b9be55192d2dd27c5163c671c690c74db","modified":1584887643924},{"_id":"public/2020/03/22/KMP算法/next1.png","hash":"8d971b1dfdfa57c25a8dff2132764736f0ffb4b9","modified":1584896999041},{"_id":"public/2020/03/22/KMP算法/next2.png","hash":"aaebd238b3687ea1bb2e601735a9577ba3273cde","modified":1584896999041},{"_id":"public/2020/03/22/KMP算法/next3.png","hash":"82c055640e2a6a172e0b411fcba0995d61688f4f","modified":1584896999041},{"_id":"public/2020/03/22/KMP算法/next4.png","hash":"ca0c56c1475d908450db220a2544c7b8e7616193","modified":1584896999041},{"_id":"public/2020/03/22/KMP算法/next5.png","hash":"7f238da8d349be91bdf73dc4e7be0ecc4761a929","modified":1584896999041},{"_id":"public/2020/03/22/KMP算法/next6.png","hash":"ba318af8eb51e8ce79efe32f0b330015d42784ae","modified":1584896999041},{"_id":"public/2020/03/22/KMP算法/证明1.png","hash":"2c6b062b9be55192d2dd27c5163c671c690c74db","modified":1584896999041},{"_id":"public/2020/03/22/KMP算法/证明2.png","hash":"d985c91f822ecd15385304a93ce1071d1cbfb6dc","modified":1584896999041},{"_id":"public/2020/03/22/KMP算法/证明3.png","hash":"524b5a24822aca584eeaef32bf489b8ea3168abd","modified":1584896999041},{"_id":"public/2020/03/22/KMP算法/证明１.png","hash":"2c6b062b9be55192d2dd27c5163c671c690c74db","modified":1584896999041},{"_id":"themes/fluid/source/img/wallhaven-0pkd59.jpg","hash":"b8af9e0a89098ff8fbe37cc3960a8c7a6af83f10","modified":1584897715567},{"_id":"public/img/wallhaven-0pkd59.jpg","hash":"b8af9e0a89098ff8fbe37cc3960a8c7a6af83f10","modified":1584897990339},{"_id":"themes/fluid/source/img/wallhaven-vgv7jm.png","hash":"772c962c18a2da69d55c337a750db97682a89be9","modified":1584930202946},{"_id":"themes/fluid/source/img/wallhaven-j5j5q5.jpg","hash":"40eb67369caf127b2d88a25b80d915828b8c696a","modified":1584929156246},{"_id":"themes/fluid/source/img/wallhaven-13mk9v.jpg","hash":"3d711c925fb0419a8265502f5146f33c29f58060","modified":1584929449067},{"_id":"themes/fluid/source/img/wallhaven-13ek89.jpg","hash":"1b8d3f4f0b9c6b64199438735ebcde0c13253e1c","modified":1584929582676},{"_id":"themes/fluid/source/img/wallhaven-eyq5gk.png","hash":"7c28ab0d2d28e46be00b8821eff51dbc94a896b0","modified":1584930053772},{"_id":"public/img/wallhaven-vgv7jm.png","hash":"772c962c18a2da69d55c337a750db97682a89be9","modified":1584930568653},{"_id":"public/img/wallhaven-j5j5q5.jpg","hash":"40eb67369caf127b2d88a25b80d915828b8c696a","modified":1584930568653},{"_id":"public/img/wallhaven-13mk9v.jpg","hash":"3d711c925fb0419a8265502f5146f33c29f58060","modified":1584930568653},{"_id":"public/img/wallhaven-13ek89.jpg","hash":"1b8d3f4f0b9c6b64199438735ebcde0c13253e1c","modified":1584930568653},{"_id":"public/img/wallhaven-eyq5gk.png","hash":"7c28ab0d2d28e46be00b8821eff51dbc94a896b0","modified":1584930568653},{"_id":"source/_posts/.KMP算法.md.swo","hash":"d62e1f7a843d90f848a03df3ad5f73ef8f0b0178","modified":1584948788176}],"Category":[{"name":"数据结构","_id":"ck81r6o340001tyfw85yda67n"},{"name":"vim","_id":"ck82tkk99000196fw5zxzc7fb"}],"Data":[],"Page":[{"title":"categories","date":"2020-03-20T05:50:39.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-03-20 13:50:39\ntype: \"categories\"\n---\n","updated":"2020-03-20T05:51:28.397Z","path":"categories/index.html","_id":"ck7knymkx000etlfwa2jqd5tm","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-03-20T05:52:24.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-03-20 13:52:24\ntype: \"tags\"\n---\n","updated":"2020-03-20T05:53:07.486Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ck7zrpdyd0000nzfw6lamcqon","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Green Chemistry","date":"2020-03-03T02:47:38.000Z","_content":"\n# 《1》名词解释： \n\n- 原子利用率：\n  原子利用率 =（被利用原子质量/反应中所使用全部反应物分子的质量）× 100%\n- 环境因子：\n  构成环境组成的下一个层次的基本单元.如属于气候要素的气温、降水、湿度、风等. 生态因子：对生物生长、发育、生殖、行为和分布等生命活动有直接或间接影响的环境因子.\n- 环境商：\n  环境商（EQ）：环境商EQ定义为EQ=E*Q，式中E为环境因子，Q为根据废物在环境中的行为给出的废物对环境的不友好程度，用于评价一种合成方法、一个过程对环境的好坏。\n- 离子液体：\n  指液态时的离子化合物，也可指熔点低于一定温度（如100℃）的离子化合物。所有可熔融而不分解或气化的盐类都可作离子液体\n- 超临界流体:\n  是一种物质状态，当物质在超过临界温度及临界压力以上，气体与液体的性质会趋近于类似，最后会达成一个均匀相之流体现象。\n- 一次性原料：\n  只能使用一次的原料。\n- 可重复使用原料：\n  可以重复使用的原料。\n\n# 《2》简要论述绿色化学12条原则及其重要意义\n\n- 12条原则分别是：\n  \t1.预防：防止废弃物产生比处理或清理废弃物更好<br>\n    \t2.原子经济性：在设计合成方法时，应最大限度地将工艺中用到的所有材料都并入最终产品之中 <br>\n3.减少化学品合成危险性：只要有可能，在设计合成方法时，应使用和生成对人体健康和环境几乎没有毒性的物质 <br>\n4.设计更安全的化学品:在设计化学产品时，一方面要实现期望功能，一方面尽可能使其毒性最小化<br>\n    \t5.更安全的溶剂和助剂:只要有可能，应尽量不使用辅助物质（如溶剂、分离试剂等），必须使用时应选择无害物质。<br>\n\n    6.能效设计:应认识到化学过程的能源需求会对环境和经济造成影响，尽量减少该影响。如果可能的话，合成方法应该在常温常压下进行<br>\n\n    \t7.使用可再生的原料:只要技术上和经济上可行，应使用可再生的原料，而非消耗型原料.<br>\n\n    \t8.减少衍生物:如果可能的话，应尽量减少或避免不必要的衍生物（使用阻断基、保护/脱保护、物理/化学过程临时改性），因为这些步骤会需要额外试剂，可能产生废弃物。<br>\n\n    \t9.催化:尽可能使用催化剂（选择性越高越好），而非当量试剂.<br>\n\n    \t10.降解设计:在设计化学产品时，应使其在功能结束时会分解成无害的降解产物，使其不会在环境中发生累积。<br>\n\n    \t11.针对污染预防进行实时分析:需要进一步开发分析方法，以便在形成有害物质之前进行实时过程监测和控制。<br>\n\n    \t12.针对事故预防提高固有化学安全性:在选择化学过程中所用的物质和物质形式时，应尽量减少化学事故发生的可能性，包括泄露、爆炸和火灾。<br>\n\n- 重要意义：“降低风险”和“最小化环境足迹“\n\n# 《3》末端治理与污染预防的根本区别是什么？为什么说“防止污染优于污染治理”\n\n“末端治理”是指企业事先并未采取任何预防措施,当其所造成的环境影响已严重危害到员工、社区居民、城市以及更大范围的安全、健康时,并迫于法律、法规的压力,不得不采取治理<br>\n\n污染预防定义为:“在可能的最大限度内减少生产厂地所产生的废物量.”它包括通过源削减,提高能源效率,在生产中重复使用投入的原料以及降低水消耗量来合理利用资源<br>\n\n根本区别在于治理污染的时间点不同。<br>\n\n防止污染优于污染治理：因为防止污染发生在产生污染之前，而污染治理发生在污染之后。<br>\n\n\n# 《4》什么是原子经济？ 提高化学反应的原子经济有什么意义。\n\n原子经济是指有多少反应物原子转化为目标产物的概念，某一化学反应原子经济性的高低可由原子经济百分数来衡量。<br>\n\n原子经济性也越高意味着反应的绿色程度越高，对环境的污染越少，原子经济性为100%的反应往往是不产生副产物，或副产物可用作原料进行下一轮的反应，因此不会对环境造成损害。<br>\n\n\n# 《5》提高化学反应原子经济性的途径有哪些\n\n-  开发新催化材料\n- 寻找新反应加工途径\n- 采用新合成原料\n\n# 《6》自选一条目前使用的有机化学合成路线，用绿色化学原理对其进行评价并设计一条更佳的新路线\n\n","source":"_posts/Green-Chemistry.md","raw":"---\ntitle: Green Chemistry\ndate: 2020-03-03 10:47:38\ntags:\n\n---\n\n# 《1》名词解释： \n\n- 原子利用率：\n  原子利用率 =（被利用原子质量/反应中所使用全部反应物分子的质量）× 100%\n- 环境因子：\n  构成环境组成的下一个层次的基本单元.如属于气候要素的气温、降水、湿度、风等. 生态因子：对生物生长、发育、生殖、行为和分布等生命活动有直接或间接影响的环境因子.\n- 环境商：\n  环境商（EQ）：环境商EQ定义为EQ=E*Q，式中E为环境因子，Q为根据废物在环境中的行为给出的废物对环境的不友好程度，用于评价一种合成方法、一个过程对环境的好坏。\n- 离子液体：\n  指液态时的离子化合物，也可指熔点低于一定温度（如100℃）的离子化合物。所有可熔融而不分解或气化的盐类都可作离子液体\n- 超临界流体:\n  是一种物质状态，当物质在超过临界温度及临界压力以上，气体与液体的性质会趋近于类似，最后会达成一个均匀相之流体现象。\n- 一次性原料：\n  只能使用一次的原料。\n- 可重复使用原料：\n  可以重复使用的原料。\n\n# 《2》简要论述绿色化学12条原则及其重要意义\n\n- 12条原则分别是：\n  \t1.预防：防止废弃物产生比处理或清理废弃物更好<br>\n    \t2.原子经济性：在设计合成方法时，应最大限度地将工艺中用到的所有材料都并入最终产品之中 <br>\n3.减少化学品合成危险性：只要有可能，在设计合成方法时，应使用和生成对人体健康和环境几乎没有毒性的物质 <br>\n4.设计更安全的化学品:在设计化学产品时，一方面要实现期望功能，一方面尽可能使其毒性最小化<br>\n    \t5.更安全的溶剂和助剂:只要有可能，应尽量不使用辅助物质（如溶剂、分离试剂等），必须使用时应选择无害物质。<br>\n\n    6.能效设计:应认识到化学过程的能源需求会对环境和经济造成影响，尽量减少该影响。如果可能的话，合成方法应该在常温常压下进行<br>\n\n    \t7.使用可再生的原料:只要技术上和经济上可行，应使用可再生的原料，而非消耗型原料.<br>\n\n    \t8.减少衍生物:如果可能的话，应尽量减少或避免不必要的衍生物（使用阻断基、保护/脱保护、物理/化学过程临时改性），因为这些步骤会需要额外试剂，可能产生废弃物。<br>\n\n    \t9.催化:尽可能使用催化剂（选择性越高越好），而非当量试剂.<br>\n\n    \t10.降解设计:在设计化学产品时，应使其在功能结束时会分解成无害的降解产物，使其不会在环境中发生累积。<br>\n\n    \t11.针对污染预防进行实时分析:需要进一步开发分析方法，以便在形成有害物质之前进行实时过程监测和控制。<br>\n\n    \t12.针对事故预防提高固有化学安全性:在选择化学过程中所用的物质和物质形式时，应尽量减少化学事故发生的可能性，包括泄露、爆炸和火灾。<br>\n\n- 重要意义：“降低风险”和“最小化环境足迹“\n\n# 《3》末端治理与污染预防的根本区别是什么？为什么说“防止污染优于污染治理”\n\n“末端治理”是指企业事先并未采取任何预防措施,当其所造成的环境影响已严重危害到员工、社区居民、城市以及更大范围的安全、健康时,并迫于法律、法规的压力,不得不采取治理<br>\n\n污染预防定义为:“在可能的最大限度内减少生产厂地所产生的废物量.”它包括通过源削减,提高能源效率,在生产中重复使用投入的原料以及降低水消耗量来合理利用资源<br>\n\n根本区别在于治理污染的时间点不同。<br>\n\n防止污染优于污染治理：因为防止污染发生在产生污染之前，而污染治理发生在污染之后。<br>\n\n\n# 《4》什么是原子经济？ 提高化学反应的原子经济有什么意义。\n\n原子经济是指有多少反应物原子转化为目标产物的概念，某一化学反应原子经济性的高低可由原子经济百分数来衡量。<br>\n\n原子经济性也越高意味着反应的绿色程度越高，对环境的污染越少，原子经济性为100%的反应往往是不产生副产物，或副产物可用作原料进行下一轮的反应，因此不会对环境造成损害。<br>\n\n\n# 《5》提高化学反应原子经济性的途径有哪些\n\n-  开发新催化材料\n- 寻找新反应加工途径\n- 采用新合成原料\n\n# 《6》自选一条目前使用的有机化学合成路线，用绿色化学原理对其进行评价并设计一条更佳的新路线\n\n","slug":"Green-Chemistry","published":1,"updated":"2020-03-09T06:39:37.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7knymim0000tlfw27m09501","content":"<h1 id=\"《1》名词解释：\"><a href=\"#《1》名词解释：\" class=\"headerlink\" title=\"《1》名词解释：\"></a>《1》名词解释：</h1><ul>\n<li>原子利用率：<br>原子利用率 =（被利用原子质量/反应中所使用全部反应物分子的质量）× 100%</li>\n<li>环境因子：<br>构成环境组成的下一个层次的基本单元.如属于气候要素的气温、降水、湿度、风等. 生态因子：对生物生长、发育、生殖、行为和分布等生命活动有直接或间接影响的环境因子.</li>\n<li>环境商：<br>环境商（EQ）：环境商EQ定义为EQ=E*Q，式中E为环境因子，Q为根据废物在环境中的行为给出的废物对环境的不友好程度，用于评价一种合成方法、一个过程对环境的好坏。</li>\n<li>离子液体：<br>指液态时的离子化合物，也可指熔点低于一定温度（如100℃）的离子化合物。所有可熔融而不分解或气化的盐类都可作离子液体</li>\n<li>超临界流体:<br>是一种物质状态，当物质在超过临界温度及临界压力以上，气体与液体的性质会趋近于类似，最后会达成一个均匀相之流体现象。</li>\n<li>一次性原料：<br>只能使用一次的原料。</li>\n<li>可重复使用原料：<br>可以重复使用的原料。</li>\n</ul>\n<h1 id=\"《2》简要论述绿色化学12条原则及其重要意义\"><a href=\"#《2》简要论述绿色化学12条原则及其重要意义\" class=\"headerlink\" title=\"《2》简要论述绿色化学12条原则及其重要意义\"></a>《2》简要论述绿色化学12条原则及其重要意义</h1><ul>\n<li><p>12条原则分别是：</p>\n<pre><code>1.预防：防止废弃物产生比处理或清理废弃物更好&lt;br&gt;\n  2.原子经济性：在设计合成方法时，应最大限度地将工艺中用到的所有材料都并入最终产品之中 &lt;br&gt;\n</code></pre><p>3.减少化学品合成危险性：只要有可能，在设计合成方法时，应使用和生成对人体健康和环境几乎没有毒性的物质 <br><br>4.设计更安全的化学品:在设计化学产品时，一方面要实现期望功能，一方面尽可能使其毒性最小化<br></p>\n<pre><code>  5.更安全的溶剂和助剂:只要有可能，应尽量不使用辅助物质（如溶剂、分离试剂等），必须使用时应选择无害物质。&lt;br&gt;\n</code></pre><p>  6.能效设计:应认识到化学过程的能源需求会对环境和经济造成影响，尽量减少该影响。如果可能的话，合成方法应该在常温常压下进行<br></p>\n<pre><code>  7.使用可再生的原料:只要技术上和经济上可行，应使用可再生的原料，而非消耗型原料.&lt;br&gt;\n\n  8.减少衍生物:如果可能的话，应尽量减少或避免不必要的衍生物（使用阻断基、保护/脱保护、物理/化学过程临时改性），因为这些步骤会需要额外试剂，可能产生废弃物。&lt;br&gt;\n\n  9.催化:尽可能使用催化剂（选择性越高越好），而非当量试剂.&lt;br&gt;\n\n  10.降解设计:在设计化学产品时，应使其在功能结束时会分解成无害的降解产物，使其不会在环境中发生累积。&lt;br&gt;\n\n  11.针对污染预防进行实时分析:需要进一步开发分析方法，以便在形成有害物质之前进行实时过程监测和控制。&lt;br&gt;\n\n  12.针对事故预防提高固有化学安全性:在选择化学过程中所用的物质和物质形式时，应尽量减少化学事故发生的可能性，包括泄露、爆炸和火灾。&lt;br&gt;\n</code></pre></li>\n<li><p>重要意义：“降低风险”和“最小化环境足迹“</p>\n</li>\n</ul>\n<h1 id=\"《3》末端治理与污染预防的根本区别是什么？为什么说“防止污染优于污染治理”\"><a href=\"#《3》末端治理与污染预防的根本区别是什么？为什么说“防止污染优于污染治理”\" class=\"headerlink\" title=\"《3》末端治理与污染预防的根本区别是什么？为什么说“防止污染优于污染治理”\"></a>《3》末端治理与污染预防的根本区别是什么？为什么说“防止污染优于污染治理”</h1><p>“末端治理”是指企业事先并未采取任何预防措施,当其所造成的环境影响已严重危害到员工、社区居民、城市以及更大范围的安全、健康时,并迫于法律、法规的压力,不得不采取治理<br></p>\n<p>污染预防定义为:“在可能的最大限度内减少生产厂地所产生的废物量.”它包括通过源削减,提高能源效率,在生产中重复使用投入的原料以及降低水消耗量来合理利用资源<br></p>\n<p>根本区别在于治理污染的时间点不同。<br></p>\n<p>防止污染优于污染治理：因为防止污染发生在产生污染之前，而污染治理发生在污染之后。<br></p>\n<h1 id=\"《4》什么是原子经济？-提高化学反应的原子经济有什么意义。\"><a href=\"#《4》什么是原子经济？-提高化学反应的原子经济有什么意义。\" class=\"headerlink\" title=\"《4》什么是原子经济？ 提高化学反应的原子经济有什么意义。\"></a>《4》什么是原子经济？ 提高化学反应的原子经济有什么意义。</h1><p>原子经济是指有多少反应物原子转化为目标产物的概念，某一化学反应原子经济性的高低可由原子经济百分数来衡量。<br></p>\n<p>原子经济性也越高意味着反应的绿色程度越高，对环境的污染越少，原子经济性为100%的反应往往是不产生副产物，或副产物可用作原料进行下一轮的反应，因此不会对环境造成损害。<br></p>\n<h1 id=\"《5》提高化学反应原子经济性的途径有哪些\"><a href=\"#《5》提高化学反应原子经济性的途径有哪些\" class=\"headerlink\" title=\"《5》提高化学反应原子经济性的途径有哪些\"></a>《5》提高化学反应原子经济性的途径有哪些</h1><ul>\n<li>开发新催化材料</li>\n<li>寻找新反应加工途径</li>\n<li>采用新合成原料</li>\n</ul>\n<h1 id=\"《6》自选一条目前使用的有机化学合成路线，用绿色化学原理对其进行评价并设计一条更佳的新路线\"><a href=\"#《6》自选一条目前使用的有机化学合成路线，用绿色化学原理对其进行评价并设计一条更佳的新路线\" class=\"headerlink\" title=\"《6》自选一条目前使用的有机化学合成路线，用绿色化学原理对其进行评价并设计一条更佳的新路线\"></a>《6》自选一条目前使用的有机化学合成路线，用绿色化学原理对其进行评价并设计一条更佳的新路线</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"《1》名词解释：\"><a href=\"#《1》名词解释：\" class=\"headerlink\" title=\"《1》名词解释：\"></a>《1》名词解释：</h1><ul>\n<li>原子利用率：<br>原子利用率 =（被利用原子质量/反应中所使用全部反应物分子的质量）× 100%</li>\n<li>环境因子：<br>构成环境组成的下一个层次的基本单元.如属于气候要素的气温、降水、湿度、风等. 生态因子：对生物生长、发育、生殖、行为和分布等生命活动有直接或间接影响的环境因子.</li>\n<li>环境商：<br>环境商（EQ）：环境商EQ定义为EQ=E*Q，式中E为环境因子，Q为根据废物在环境中的行为给出的废物对环境的不友好程度，用于评价一种合成方法、一个过程对环境的好坏。</li>\n<li>离子液体：<br>指液态时的离子化合物，也可指熔点低于一定温度（如100℃）的离子化合物。所有可熔融而不分解或气化的盐类都可作离子液体</li>\n<li>超临界流体:<br>是一种物质状态，当物质在超过临界温度及临界压力以上，气体与液体的性质会趋近于类似，最后会达成一个均匀相之流体现象。</li>\n<li>一次性原料：<br>只能使用一次的原料。</li>\n<li>可重复使用原料：<br>可以重复使用的原料。</li>\n</ul>\n<h1 id=\"《2》简要论述绿色化学12条原则及其重要意义\"><a href=\"#《2》简要论述绿色化学12条原则及其重要意义\" class=\"headerlink\" title=\"《2》简要论述绿色化学12条原则及其重要意义\"></a>《2》简要论述绿色化学12条原则及其重要意义</h1><ul>\n<li><p>12条原则分别是：</p>\n<pre><code>1.预防：防止废弃物产生比处理或清理废弃物更好&lt;br&gt;\n  2.原子经济性：在设计合成方法时，应最大限度地将工艺中用到的所有材料都并入最终产品之中 &lt;br&gt;\n</code></pre><p>3.减少化学品合成危险性：只要有可能，在设计合成方法时，应使用和生成对人体健康和环境几乎没有毒性的物质 <br><br>4.设计更安全的化学品:在设计化学产品时，一方面要实现期望功能，一方面尽可能使其毒性最小化<br></p>\n<pre><code>  5.更安全的溶剂和助剂:只要有可能，应尽量不使用辅助物质（如溶剂、分离试剂等），必须使用时应选择无害物质。&lt;br&gt;\n</code></pre><p>  6.能效设计:应认识到化学过程的能源需求会对环境和经济造成影响，尽量减少该影响。如果可能的话，合成方法应该在常温常压下进行<br></p>\n<pre><code>  7.使用可再生的原料:只要技术上和经济上可行，应使用可再生的原料，而非消耗型原料.&lt;br&gt;\n\n  8.减少衍生物:如果可能的话，应尽量减少或避免不必要的衍生物（使用阻断基、保护/脱保护、物理/化学过程临时改性），因为这些步骤会需要额外试剂，可能产生废弃物。&lt;br&gt;\n\n  9.催化:尽可能使用催化剂（选择性越高越好），而非当量试剂.&lt;br&gt;\n\n  10.降解设计:在设计化学产品时，应使其在功能结束时会分解成无害的降解产物，使其不会在环境中发生累积。&lt;br&gt;\n\n  11.针对污染预防进行实时分析:需要进一步开发分析方法，以便在形成有害物质之前进行实时过程监测和控制。&lt;br&gt;\n\n  12.针对事故预防提高固有化学安全性:在选择化学过程中所用的物质和物质形式时，应尽量减少化学事故发生的可能性，包括泄露、爆炸和火灾。&lt;br&gt;\n</code></pre></li>\n<li><p>重要意义：“降低风险”和“最小化环境足迹“</p>\n</li>\n</ul>\n<h1 id=\"《3》末端治理与污染预防的根本区别是什么？为什么说“防止污染优于污染治理”\"><a href=\"#《3》末端治理与污染预防的根本区别是什么？为什么说“防止污染优于污染治理”\" class=\"headerlink\" title=\"《3》末端治理与污染预防的根本区别是什么？为什么说“防止污染优于污染治理”\"></a>《3》末端治理与污染预防的根本区别是什么？为什么说“防止污染优于污染治理”</h1><p>“末端治理”是指企业事先并未采取任何预防措施,当其所造成的环境影响已严重危害到员工、社区居民、城市以及更大范围的安全、健康时,并迫于法律、法规的压力,不得不采取治理<br></p>\n<p>污染预防定义为:“在可能的最大限度内减少生产厂地所产生的废物量.”它包括通过源削减,提高能源效率,在生产中重复使用投入的原料以及降低水消耗量来合理利用资源<br></p>\n<p>根本区别在于治理污染的时间点不同。<br></p>\n<p>防止污染优于污染治理：因为防止污染发生在产生污染之前，而污染治理发生在污染之后。<br></p>\n<h1 id=\"《4》什么是原子经济？-提高化学反应的原子经济有什么意义。\"><a href=\"#《4》什么是原子经济？-提高化学反应的原子经济有什么意义。\" class=\"headerlink\" title=\"《4》什么是原子经济？ 提高化学反应的原子经济有什么意义。\"></a>《4》什么是原子经济？ 提高化学反应的原子经济有什么意义。</h1><p>原子经济是指有多少反应物原子转化为目标产物的概念，某一化学反应原子经济性的高低可由原子经济百分数来衡量。<br></p>\n<p>原子经济性也越高意味着反应的绿色程度越高，对环境的污染越少，原子经济性为100%的反应往往是不产生副产物，或副产物可用作原料进行下一轮的反应，因此不会对环境造成损害。<br></p>\n<h1 id=\"《5》提高化学反应原子经济性的途径有哪些\"><a href=\"#《5》提高化学反应原子经济性的途径有哪些\" class=\"headerlink\" title=\"《5》提高化学反应原子经济性的途径有哪些\"></a>《5》提高化学反应原子经济性的途径有哪些</h1><ul>\n<li>开发新催化材料</li>\n<li>寻找新反应加工途径</li>\n<li>采用新合成原料</li>\n</ul>\n<h1 id=\"《6》自选一条目前使用的有机化学合成路线，用绿色化学原理对其进行评价并设计一条更佳的新路线\"><a href=\"#《6》自选一条目前使用的有机化学合成路线，用绿色化学原理对其进行评价并设计一条更佳的新路线\" class=\"headerlink\" title=\"《6》自选一条目前使用的有机化学合成路线，用绿色化学原理对其进行评价并设计一条更佳的新路线\"></a>《6》自选一条目前使用的有机化学合成路线，用绿色化学原理对其进行评价并设计一条更佳的新路线</h1>"},{"title":"Chapter1 Review Questions","date":"2020-03-09T08:46:14.000Z","_content":" 关于计算机网络自顶向下的第一章的问题回答\n-------\n**R1:主机和终端系统有什么不同？<br>**\n终端系统（end system）和主机(host)系统其实没有很大的区别都就具有连接网络和交换信息的能力，本质上没有很大的区别．但是在现实生活中主机常常指提供服务的一方，而终端指手机，手提电脑，台式电脑之类的．<br>\n**R2:protocol在维基百科上的定义<br>**\nprotocol（协议）在维基百科上的定义是：给数据/信息在电子通信和网络上的传输制定的规则<br>\n**R3:为什么协议（protocol）如此重要？<br>**\nprotocol由Internet engineering task force(IETF)制定，为了提供更好的更加有质量，更加安全的协议来给消费者使用，标准协议为了每个用户之间能够更有效的互相交流．例如：书上说的人打招呼的例子，如果没有协议就会乱套．<br>\n**R4:列出６个访问技术，以及将其分类家庭访问，企业访问和广域无线访问<br>**\n*家庭访问：<br>*\n1.DSL(digtal subscriber line):数字订阅通路<br>\n2.cable internet access: 有线上网，也可以叫做HFC(hybird fiber coax)：混合光纤同轴电缆<br>\n3.fiber to the home: 光纤到家（光纤）<br>\n4.Dial_up :数字拨号（用电话线<br>\n5.satellite:卫星<br>\n*企业访问（家庭其实也可以）:<br>*\n6.WIFI<br>\n7.Enternet<br>\n广域无线访问：\n8.third/(fouth)-generation(3G)<br>\n9.LTE(long-term-Evolution)<br>\n**R5:HFC的传输速度是用户独享还是分享？是否可能在HFC的下游发生数据碰撞？<br>**\nHFC(hybird fiber coax)混合光纤同轴电缆也就是cable internet access有线连接，用的是电视公司提供的有线电视的电视线连接，因为这个互联网访问方式中用到了两种电缆线分别是光纤和同轴电缆，所以就叫HFC．![cable internet access](2020-03-09_21:03_select.png)\n如图所示HFC是用户分享类型的，如图HFC的下载源只有一个所以downstream不冲突，但是上传（upstream）就有可能冲突，需要用协议来解决．<br>\n**R6:列出你所在城市的住宅访问技术（access technologies）,以及它们各种的下载，上传速度和价钱.**\n目前中国电信能够提供基于ADSL、LAN以及FTTH光纤接入三种技术的宽带实现方式。速率从1Mbps到20Mbps不等，价格也从119到559不等。(抄的．．)<br>\n**R7:以太局域网（Enthernet LANs）的传输速度是多少？**<br>\n对于用户：通常有100Mbps,对于服务器：通常有１Gbps~10Gbps .<br>\n\n**R8:Enthernet（以太网）运行的物理介质是什么，有那些？**<br>\n有同轴电缆（coaxial cable）光纤（fiber optic）,双绞铜线（twisted-pair-copper Wire).<br>\n**R9:提供Dial-up modems,DSL,HFC,FTTH的速度范围和判断其是用户独占还是用户共享**<br>\n- DSL:上传速度：2.5Mbps，下载速度：24Mbps.[2003]\n- HFC:上传速度：30.7Mbps,下载速度：42.8Mbps.[DOCSIS.2.0]\n- FTTH:理论上可以达到１Gbps实际平均下载速度可以达到20Mbps[2011]\n- Dial-up modems: 56kbps [巨慢]<br>\n\n**R10:描述现在最流行的无线连接技术，并且比较它们的差异**<br>\n最流行的无线连接技术:现在是WIFI和4G<br>\n差异：<br>\nWIFI是用户无线或有线连接到自己附近的路由器，通过路由器这个接入点连接网络如图：\n![WIFI](2020-03-10_15:03_select.png)<br>\n一般WIFI的范围是10米之内．WIFI提供的理论接入速度可以达到600Mbps(来自知乎，书上是54Mbps).<br>\n4G:4G用的是蜂窝技术（cellular telephony),4G提供的理论接入速度是100 Mbps,而且蜂窝技术的范围可以达到10千米内（范围更大）.<br>\n**R11:假设有只有一个分组交换机(parket switch)在发送端和接收端之间，传输速度发送端到分组交换机为R1,分组交换机到接收端之间为R2,假设使用的是存储转发交换机制(store-and-forward packet switch),计算端到端的总延迟[忽略处理延迟(processing delay),队列延迟(queuing delay),传播延迟（propagation delay）]**<br>\n那总延迟就等于这段路上的传输延迟（transmission delay）=R1+R2.<br>\n\n**R12:电路交换网络(circuit-switched network)相比分组交换网络(packet-switch network)有什么优势，在电路交换网络中，TDM对比FDM有什么优势**<br>\n我觉得电路交换网络系统的缺点也可以算是它的优点，因为其在传输信息时需要建立连接状态（circuit）这个时候用户可以用这条链路上的所有的速度，但是此时其他的用户无法使用，此时如果建立链路没有在传输信息而是待工，这个时候链路资源就没办法有效利用，这就是circut-switch network的缺点，但是如果其的应用场景使用链路的密度很大，这个时候就很OK,因为其传输速度是满的．<br>\nTDM(Time-Division Multiplexing)时分复用对比FDM(Frequency-Division Multiplexing)频分复用的优势：<br>\n```\n TDM is relatively a newer technique used for digital signals.\n TDM advantage over FDM is that it offers bandwidth saving with\n ATDM (allocate time slots on demand dynamically) and \n there is low interference between the signals that are being\n multiplexed(from google)\n``` \n**R13:假设用户分享2Mbps的带宽，同时假设每个用户在传输数据是持续以1Mbps的带宽，链接网络时传输的占的时间与总时间的比值为20%**　<br>\n**a.如果使用电路交换网络(circuit-switched network),可以支持多少用户使用.** <br>\n**b.假设使用分组分配，两个或者更少用户同时传输数据的时候为什么实际上没有队列（排队）延迟，三个用户同时使用为什么会有队列延迟**<br>\n**c.计算用户正在传输的概率**<br>\n**d.假定现在有三个用户计算这个三个用户同时使用链路的概率，找到队列增长的概率**(c.d应该是承接b)<br>\n\n1.两个用户可以同时使用<br>\n2.因为两个或者更少用户用的时候没有超过链路的最大带宽，而三个以上用户就会超过，所以用分组分配就会有队列延迟．<br>\n3.用户真正传输的概率是20%<br>\n4.三个用户同时使用的概率是$1\\over5$ $\\times$ $1\\over5$ $\\times$ $1\\over5$ $=$ $1\\over125$,队列增长的概率也是 $1\\over125$<br>\n**R14:为什么处于同一个层级的ISPs互相对等，IXP是怎么赚钱的？**<br>\n一个城市与临近的另一个城市需要的用户需要数据传输如果这两个城市的ISPs没有进行对等(peer),则还需要通过更上一层的ISPs来达到互相连接，而更高一层的ISPs就会向低级的ISPs收费（收费的多少体现在流量上），对等（peer）了之后就不用通过更上一层ISPs,以达到节省开支的目的，而IXP(Internet Exchange Point)，IXP通常由电信公司以外的第三方公司来建立，主要作为ISPs的对接点，提供ISPs的对等服务．IXP赚钱通过想ISPs们收取少量的端口费盈利．<br>\n![网络提供者的层级结构](2020-03-11_09:03_select.png)\n**R15:一些内容的提供者也建立了它们自己的网络，描述一下Google,是什么促进它们建立自己的网络？**<br>\ngoogle通过自己提供的TCP/IP网络把它分布在全球的大的小的数据中心连接起来（大的数据中心可能连接上百万个用户，小的可能几百个用户），\n这些数据中心大多都是连接比较底层的用户或者ISPs提供，可以让谷歌绕过更高层级的ISPs．<br>\n促进他们建立自己网络的理由是：内容提供商（例如谷歌）建立自己的网络服务可以减少向上层ISPs支付费用，（因为谷歌可以直接和用户相连，或者连接更下层的ISPs和IXP,所以减少了中间ISPs的数量），同时也可以达到对用户更好的控制．<br>\n**R16:考虑在固定线路上从源主机发送一个包（packet）到目标主机，列出端到端的延迟，以及表示出那个延迟是常数，那个延迟是变量．**<br>\n分别有传输延迟（transmission delay），传播延迟(propagation delay)，队列延迟(queueing delay)，处理延迟(processing delay).<br>\n队列延迟是可变的，其他延迟是常数．<br>\n**R17:去这个小程序网站：Transmission Versus Propagation Delay，通过调整rates,propagation delay和packet sizes的大小，找到两个组合，使packet在源主机传输完成之前，第一个被发送的bit到达目标主机，和pakect在源主机完成传输之后，第一个被发送的bit才到达目标主机．**<br>第一个组合是：1000KM,1Mbps,100bytes.\n第二个组合是：100KM,1Mbps,100bytes.<br>\n**R18:发送长度为1000bytes的packet,距离为2500Km,传播速度是$2.5$x$10^8$m/s,传输速度是2Mbps需要多长时间,更加抽象一点，发送长度为L的packet,距离为d,传播速度是s,传输速度是Rbps需要多长时间,在传递信息中的延迟是由打包的数据长度决定？还是传输的速度决定？**\n假设忽略了处理延迟和队列延迟，那么需要的时间为<br>\n$1000\\div(2000000\\div8)+2500\\times 1000 \\div(2.5\\times10^8)=0.01+0.004=0.014s=14msec$<br>\n抽象一点：\n$time=L\\times8/R+d/s$ <br>\n打包的数据长度和传输速度都不能呢个决定延迟大小．<br>\n**R19:假设源主机Ａ想传递一个很大的文件给目标主机Ｂ，在两者直接有三条链路，速度分别为R1=500kbps,R2=2Mbps,R3=1Mbps.**<br>\n- 假设没有其他的流量在网络中，这个文件传输的吞吐量是多少？\n- 假设文件大小为4Mbytes,大致需要多长时间传输这个文件．\n- 重算1,2题现在R2降低到100kbps.<br>\n1.这个文件的吞吐量由最小的通路决定，文件吞吐量为500Kbps.<br>\n2.$T=4000000\\div(500\\times1000\\div 8)=64s$<br>\n3.如果R2降为100kbps,文件传输的吞吐量为100kbps,则4Mbytes的文件传输大致时间为$4000000\\div(100\\times1000\\div8)=320s$<br>\n\n\n**R20:假设一个很大的文件从主机A传输到主机B,从一个比较高的角度描述一下主机A如何把一个文件变成一个个的packet，当一个packet到达交换机（switch）,哪些信息被用来指引（确定）packet前进路线，以及为什么互联网中分组交换需要模拟汽车从一个城市到另外一个城市并沿着路线不断问路的过程．**<br>\n![packet的运行路线](2020-03-11_14:03:1583906551_select.png)<br>\n主机Ａ的文件本来是一个整体在层级结构中被称作消息(message),传递给下面的传输层（Transport layer),传输层中的TCP协议可以把message分割成一块一块加上一些信息放在每一块上组成段(segment),同时TCP协议拥有流控制（flow control）功能[匹配发生者和接受者的速度]，和拥堵控制机制（congestion-control mechanism),然后传递给网络层（Network layer),然后把段传到网络层(Network layer),网络层执行的是IP协议，以及一些路由协议（routing protocol）,同样是在每个段的头部加上一些信息组成数据报(Datagram),然后在传递给链路层（Link layer）,链路层用的协议不同链路上用的协议就不同，有：WIFI,Ethernet and cable network的DORSIS protocol,操作也是在数据报头部加入一些信息形成的桢（Frame）最后就是送到物理层（physical layer),物理层就把每一个桢中的数据一个bit一个bit的传播出去，物理层同样有协议，根据使用的物理介质的不同而不同．<br>\n一个packet到达交换机后根据每个packet中的IP地址找到前进路线．<br>\n第三问着实不懂．<br>\n\n**R21:去执行Queuing and Loss这个小程序,然后找到最大发送速率和最小的传输速率是多少？对于这些速率，流量强度是多少？用这些速率运行该小程序并确定出现丢包要花费多长时间？然后第多次重复该实验，再次确定出现丢包花费多长时间。这些值有什么不同？为什么会有这种现象？**<br>\n最大的发射速度是500packet/s,最小的传输速度是350packet/s,对于这些流量强度是$500\\div350=1.428$用这些速度去运行，出现丢包的时间大约在31~34秒左右，并不能确定具体哪个时间会发生丢包，为什么？因为用户发生数据包有随机性，我们并不能控制每一个用户．\n\n\n**R22:列出一层都可以执行5个任务,并且是否有可能这些任务中有可以执行在两个或者多个层？**<br>\n任务: 封装本层的报文段, 设置各种参数, 对接受到的报文段进行差错检查, 还可能进行流量设置, 分组重组等等.多个层是可能执行相同的一个(或两个)任务的, 比如差错检验<br>\n**R23:互联网协议栈的五层是什么，每一层的的主要职责是什么？**\n互联网协议栈的五层从上到下分别是，应用层，传输层，网络层，链路层，物理层．关于他们的主要职责：在R20有讲到.\n\n**R24:什么是应用层报文（message）,传输层报文（segment),网络层数据报（Datagram）,链路层帧(Frame).**\n```mermaid\ngraph TD\nA[message]-->B[message+Headt=segment]-->C[segment+Headn=Datagram]-->D[Datagram+Headl=Frame];\n```\n<br>\n\n**R25:在互联网协议栈中路由器处理哪几层，链路交换机处理哪几层，主机处理哪几层？**<br>\n路由器处理１到３层(现代路由器里还有防火墙和缓存组件，也可以处理传输层)，链路交换机处理１－２两层，主机处理全５层．<br>\n\n**R26:病毒（virus）和虫（worms）有什么不同?**<br>\n病毒需要用户与其互动，有交互，需要人进行操作，例如ＱＱ发个网站点进网站被盗号等，虫就是不需要与用户进行互动，例如用户运行一个很脆弱的软件，恶意软件进来不需要用户统一直接运行，并且会自我复制自动寻找下一个脆弱的软件进行攻击．<Br>\n\n**R27:描述一下僵尸网络(botnet)是怎么形成的,以及怎么利用僵尸网络来进行DDoS攻击？**\n僵尸网络就是这个bad guy通过找到别人的应用或者是系统的漏洞，利用虫（worms)来侵入别人的主机，而这个虫又可以通过漏洞来复制和接着进行传播，僵尸网络的属性就是attacker可以远程通过命令来操控僵尸网络中的主机运作．而DDos（distributed denail-of-service attack）攻击就是通过成败上千台僵尸主机同时想目标主机发送信息，导致目标主机的带宽被占满从而使正确的信息无法传到目标主机．<br>\n![botnet](2020-03-11_20:03:1583929611_select.png)<br>\n**R28:假设Alice和Bob真正互相发送信息，同时假设Trudy定位自己在网络中，Trudy可以捕获所有Alice发生的消息，也可以发送任何消息给Bob,同理相对与Bob也一样，列举出Trudy处在这个位置上可以做的恶意的事情**<br>\n借钱打这个账户1008668001.\n","source":"_posts/Chapter1-Review-Questions.md","raw":"---\ntitle: Chapter1 Review Questions\ndate: 2020-03-09 16:46:14\ntags: -Computer Network A Top-Down Approach\n---\n 关于计算机网络自顶向下的第一章的问题回答\n-------\n**R1:主机和终端系统有什么不同？<br>**\n终端系统（end system）和主机(host)系统其实没有很大的区别都就具有连接网络和交换信息的能力，本质上没有很大的区别．但是在现实生活中主机常常指提供服务的一方，而终端指手机，手提电脑，台式电脑之类的．<br>\n**R2:protocol在维基百科上的定义<br>**\nprotocol（协议）在维基百科上的定义是：给数据/信息在电子通信和网络上的传输制定的规则<br>\n**R3:为什么协议（protocol）如此重要？<br>**\nprotocol由Internet engineering task force(IETF)制定，为了提供更好的更加有质量，更加安全的协议来给消费者使用，标准协议为了每个用户之间能够更有效的互相交流．例如：书上说的人打招呼的例子，如果没有协议就会乱套．<br>\n**R4:列出６个访问技术，以及将其分类家庭访问，企业访问和广域无线访问<br>**\n*家庭访问：<br>*\n1.DSL(digtal subscriber line):数字订阅通路<br>\n2.cable internet access: 有线上网，也可以叫做HFC(hybird fiber coax)：混合光纤同轴电缆<br>\n3.fiber to the home: 光纤到家（光纤）<br>\n4.Dial_up :数字拨号（用电话线<br>\n5.satellite:卫星<br>\n*企业访问（家庭其实也可以）:<br>*\n6.WIFI<br>\n7.Enternet<br>\n广域无线访问：\n8.third/(fouth)-generation(3G)<br>\n9.LTE(long-term-Evolution)<br>\n**R5:HFC的传输速度是用户独享还是分享？是否可能在HFC的下游发生数据碰撞？<br>**\nHFC(hybird fiber coax)混合光纤同轴电缆也就是cable internet access有线连接，用的是电视公司提供的有线电视的电视线连接，因为这个互联网访问方式中用到了两种电缆线分别是光纤和同轴电缆，所以就叫HFC．![cable internet access](2020-03-09_21:03_select.png)\n如图所示HFC是用户分享类型的，如图HFC的下载源只有一个所以downstream不冲突，但是上传（upstream）就有可能冲突，需要用协议来解决．<br>\n**R6:列出你所在城市的住宅访问技术（access technologies）,以及它们各种的下载，上传速度和价钱.**\n目前中国电信能够提供基于ADSL、LAN以及FTTH光纤接入三种技术的宽带实现方式。速率从1Mbps到20Mbps不等，价格也从119到559不等。(抄的．．)<br>\n**R7:以太局域网（Enthernet LANs）的传输速度是多少？**<br>\n对于用户：通常有100Mbps,对于服务器：通常有１Gbps~10Gbps .<br>\n\n**R8:Enthernet（以太网）运行的物理介质是什么，有那些？**<br>\n有同轴电缆（coaxial cable）光纤（fiber optic）,双绞铜线（twisted-pair-copper Wire).<br>\n**R9:提供Dial-up modems,DSL,HFC,FTTH的速度范围和判断其是用户独占还是用户共享**<br>\n- DSL:上传速度：2.5Mbps，下载速度：24Mbps.[2003]\n- HFC:上传速度：30.7Mbps,下载速度：42.8Mbps.[DOCSIS.2.0]\n- FTTH:理论上可以达到１Gbps实际平均下载速度可以达到20Mbps[2011]\n- Dial-up modems: 56kbps [巨慢]<br>\n\n**R10:描述现在最流行的无线连接技术，并且比较它们的差异**<br>\n最流行的无线连接技术:现在是WIFI和4G<br>\n差异：<br>\nWIFI是用户无线或有线连接到自己附近的路由器，通过路由器这个接入点连接网络如图：\n![WIFI](2020-03-10_15:03_select.png)<br>\n一般WIFI的范围是10米之内．WIFI提供的理论接入速度可以达到600Mbps(来自知乎，书上是54Mbps).<br>\n4G:4G用的是蜂窝技术（cellular telephony),4G提供的理论接入速度是100 Mbps,而且蜂窝技术的范围可以达到10千米内（范围更大）.<br>\n**R11:假设有只有一个分组交换机(parket switch)在发送端和接收端之间，传输速度发送端到分组交换机为R1,分组交换机到接收端之间为R2,假设使用的是存储转发交换机制(store-and-forward packet switch),计算端到端的总延迟[忽略处理延迟(processing delay),队列延迟(queuing delay),传播延迟（propagation delay）]**<br>\n那总延迟就等于这段路上的传输延迟（transmission delay）=R1+R2.<br>\n\n**R12:电路交换网络(circuit-switched network)相比分组交换网络(packet-switch network)有什么优势，在电路交换网络中，TDM对比FDM有什么优势**<br>\n我觉得电路交换网络系统的缺点也可以算是它的优点，因为其在传输信息时需要建立连接状态（circuit）这个时候用户可以用这条链路上的所有的速度，但是此时其他的用户无法使用，此时如果建立链路没有在传输信息而是待工，这个时候链路资源就没办法有效利用，这就是circut-switch network的缺点，但是如果其的应用场景使用链路的密度很大，这个时候就很OK,因为其传输速度是满的．<br>\nTDM(Time-Division Multiplexing)时分复用对比FDM(Frequency-Division Multiplexing)频分复用的优势：<br>\n```\n TDM is relatively a newer technique used for digital signals.\n TDM advantage over FDM is that it offers bandwidth saving with\n ATDM (allocate time slots on demand dynamically) and \n there is low interference between the signals that are being\n multiplexed(from google)\n``` \n**R13:假设用户分享2Mbps的带宽，同时假设每个用户在传输数据是持续以1Mbps的带宽，链接网络时传输的占的时间与总时间的比值为20%**　<br>\n**a.如果使用电路交换网络(circuit-switched network),可以支持多少用户使用.** <br>\n**b.假设使用分组分配，两个或者更少用户同时传输数据的时候为什么实际上没有队列（排队）延迟，三个用户同时使用为什么会有队列延迟**<br>\n**c.计算用户正在传输的概率**<br>\n**d.假定现在有三个用户计算这个三个用户同时使用链路的概率，找到队列增长的概率**(c.d应该是承接b)<br>\n\n1.两个用户可以同时使用<br>\n2.因为两个或者更少用户用的时候没有超过链路的最大带宽，而三个以上用户就会超过，所以用分组分配就会有队列延迟．<br>\n3.用户真正传输的概率是20%<br>\n4.三个用户同时使用的概率是$1\\over5$ $\\times$ $1\\over5$ $\\times$ $1\\over5$ $=$ $1\\over125$,队列增长的概率也是 $1\\over125$<br>\n**R14:为什么处于同一个层级的ISPs互相对等，IXP是怎么赚钱的？**<br>\n一个城市与临近的另一个城市需要的用户需要数据传输如果这两个城市的ISPs没有进行对等(peer),则还需要通过更上一层的ISPs来达到互相连接，而更高一层的ISPs就会向低级的ISPs收费（收费的多少体现在流量上），对等（peer）了之后就不用通过更上一层ISPs,以达到节省开支的目的，而IXP(Internet Exchange Point)，IXP通常由电信公司以外的第三方公司来建立，主要作为ISPs的对接点，提供ISPs的对等服务．IXP赚钱通过想ISPs们收取少量的端口费盈利．<br>\n![网络提供者的层级结构](2020-03-11_09:03_select.png)\n**R15:一些内容的提供者也建立了它们自己的网络，描述一下Google,是什么促进它们建立自己的网络？**<br>\ngoogle通过自己提供的TCP/IP网络把它分布在全球的大的小的数据中心连接起来（大的数据中心可能连接上百万个用户，小的可能几百个用户），\n这些数据中心大多都是连接比较底层的用户或者ISPs提供，可以让谷歌绕过更高层级的ISPs．<br>\n促进他们建立自己网络的理由是：内容提供商（例如谷歌）建立自己的网络服务可以减少向上层ISPs支付费用，（因为谷歌可以直接和用户相连，或者连接更下层的ISPs和IXP,所以减少了中间ISPs的数量），同时也可以达到对用户更好的控制．<br>\n**R16:考虑在固定线路上从源主机发送一个包（packet）到目标主机，列出端到端的延迟，以及表示出那个延迟是常数，那个延迟是变量．**<br>\n分别有传输延迟（transmission delay），传播延迟(propagation delay)，队列延迟(queueing delay)，处理延迟(processing delay).<br>\n队列延迟是可变的，其他延迟是常数．<br>\n**R17:去这个小程序网站：Transmission Versus Propagation Delay，通过调整rates,propagation delay和packet sizes的大小，找到两个组合，使packet在源主机传输完成之前，第一个被发送的bit到达目标主机，和pakect在源主机完成传输之后，第一个被发送的bit才到达目标主机．**<br>第一个组合是：1000KM,1Mbps,100bytes.\n第二个组合是：100KM,1Mbps,100bytes.<br>\n**R18:发送长度为1000bytes的packet,距离为2500Km,传播速度是$2.5$x$10^8$m/s,传输速度是2Mbps需要多长时间,更加抽象一点，发送长度为L的packet,距离为d,传播速度是s,传输速度是Rbps需要多长时间,在传递信息中的延迟是由打包的数据长度决定？还是传输的速度决定？**\n假设忽略了处理延迟和队列延迟，那么需要的时间为<br>\n$1000\\div(2000000\\div8)+2500\\times 1000 \\div(2.5\\times10^8)=0.01+0.004=0.014s=14msec$<br>\n抽象一点：\n$time=L\\times8/R+d/s$ <br>\n打包的数据长度和传输速度都不能呢个决定延迟大小．<br>\n**R19:假设源主机Ａ想传递一个很大的文件给目标主机Ｂ，在两者直接有三条链路，速度分别为R1=500kbps,R2=2Mbps,R3=1Mbps.**<br>\n- 假设没有其他的流量在网络中，这个文件传输的吞吐量是多少？\n- 假设文件大小为4Mbytes,大致需要多长时间传输这个文件．\n- 重算1,2题现在R2降低到100kbps.<br>\n1.这个文件的吞吐量由最小的通路决定，文件吞吐量为500Kbps.<br>\n2.$T=4000000\\div(500\\times1000\\div 8)=64s$<br>\n3.如果R2降为100kbps,文件传输的吞吐量为100kbps,则4Mbytes的文件传输大致时间为$4000000\\div(100\\times1000\\div8)=320s$<br>\n\n\n**R20:假设一个很大的文件从主机A传输到主机B,从一个比较高的角度描述一下主机A如何把一个文件变成一个个的packet，当一个packet到达交换机（switch）,哪些信息被用来指引（确定）packet前进路线，以及为什么互联网中分组交换需要模拟汽车从一个城市到另外一个城市并沿着路线不断问路的过程．**<br>\n![packet的运行路线](2020-03-11_14:03:1583906551_select.png)<br>\n主机Ａ的文件本来是一个整体在层级结构中被称作消息(message),传递给下面的传输层（Transport layer),传输层中的TCP协议可以把message分割成一块一块加上一些信息放在每一块上组成段(segment),同时TCP协议拥有流控制（flow control）功能[匹配发生者和接受者的速度]，和拥堵控制机制（congestion-control mechanism),然后传递给网络层（Network layer),然后把段传到网络层(Network layer),网络层执行的是IP协议，以及一些路由协议（routing protocol）,同样是在每个段的头部加上一些信息组成数据报(Datagram),然后在传递给链路层（Link layer）,链路层用的协议不同链路上用的协议就不同，有：WIFI,Ethernet and cable network的DORSIS protocol,操作也是在数据报头部加入一些信息形成的桢（Frame）最后就是送到物理层（physical layer),物理层就把每一个桢中的数据一个bit一个bit的传播出去，物理层同样有协议，根据使用的物理介质的不同而不同．<br>\n一个packet到达交换机后根据每个packet中的IP地址找到前进路线．<br>\n第三问着实不懂．<br>\n\n**R21:去执行Queuing and Loss这个小程序,然后找到最大发送速率和最小的传输速率是多少？对于这些速率，流量强度是多少？用这些速率运行该小程序并确定出现丢包要花费多长时间？然后第多次重复该实验，再次确定出现丢包花费多长时间。这些值有什么不同？为什么会有这种现象？**<br>\n最大的发射速度是500packet/s,最小的传输速度是350packet/s,对于这些流量强度是$500\\div350=1.428$用这些速度去运行，出现丢包的时间大约在31~34秒左右，并不能确定具体哪个时间会发生丢包，为什么？因为用户发生数据包有随机性，我们并不能控制每一个用户．\n\n\n**R22:列出一层都可以执行5个任务,并且是否有可能这些任务中有可以执行在两个或者多个层？**<br>\n任务: 封装本层的报文段, 设置各种参数, 对接受到的报文段进行差错检查, 还可能进行流量设置, 分组重组等等.多个层是可能执行相同的一个(或两个)任务的, 比如差错检验<br>\n**R23:互联网协议栈的五层是什么，每一层的的主要职责是什么？**\n互联网协议栈的五层从上到下分别是，应用层，传输层，网络层，链路层，物理层．关于他们的主要职责：在R20有讲到.\n\n**R24:什么是应用层报文（message）,传输层报文（segment),网络层数据报（Datagram）,链路层帧(Frame).**\n```mermaid\ngraph TD\nA[message]-->B[message+Headt=segment]-->C[segment+Headn=Datagram]-->D[Datagram+Headl=Frame];\n```\n<br>\n\n**R25:在互联网协议栈中路由器处理哪几层，链路交换机处理哪几层，主机处理哪几层？**<br>\n路由器处理１到３层(现代路由器里还有防火墙和缓存组件，也可以处理传输层)，链路交换机处理１－２两层，主机处理全５层．<br>\n\n**R26:病毒（virus）和虫（worms）有什么不同?**<br>\n病毒需要用户与其互动，有交互，需要人进行操作，例如ＱＱ发个网站点进网站被盗号等，虫就是不需要与用户进行互动，例如用户运行一个很脆弱的软件，恶意软件进来不需要用户统一直接运行，并且会自我复制自动寻找下一个脆弱的软件进行攻击．<Br>\n\n**R27:描述一下僵尸网络(botnet)是怎么形成的,以及怎么利用僵尸网络来进行DDoS攻击？**\n僵尸网络就是这个bad guy通过找到别人的应用或者是系统的漏洞，利用虫（worms)来侵入别人的主机，而这个虫又可以通过漏洞来复制和接着进行传播，僵尸网络的属性就是attacker可以远程通过命令来操控僵尸网络中的主机运作．而DDos（distributed denail-of-service attack）攻击就是通过成败上千台僵尸主机同时想目标主机发送信息，导致目标主机的带宽被占满从而使正确的信息无法传到目标主机．<br>\n![botnet](2020-03-11_20:03:1583929611_select.png)<br>\n**R28:假设Alice和Bob真正互相发送信息，同时假设Trudy定位自己在网络中，Trudy可以捕获所有Alice发生的消息，也可以发送任何消息给Bob,同理相对与Bob也一样，列举出Trudy处在这个位置上可以做的恶意的事情**<br>\n借钱打这个账户1008668001.\n","slug":"Chapter1-Review-Questions","published":1,"updated":"2020-03-14T03:27:04.976Z","_id":"ck7knymj00001tlfwbvbngk9t","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"关于计算机网络自顶向下的第一章的问题回答\"><a href=\"#关于计算机网络自顶向下的第一章的问题回答\" class=\"headerlink\" title=\" 关于计算机网络自顶向下的第一章的问题回答\"></a> 关于计算机网络自顶向下的第一章的问题回答</h2><p><strong>R1:主机和终端系统有什么不同？<br></strong><br>终端系统（end system）和主机(host)系统其实没有很大的区别都就具有连接网络和交换信息的能力，本质上没有很大的区别．但是在现实生活中主机常常指提供服务的一方，而终端指手机，手提电脑，台式电脑之类的．<br><br><strong>R2:protocol在维基百科上的定义<br></strong><br>protocol（协议）在维基百科上的定义是：给数据/信息在电子通信和网络上的传输制定的规则<br><br><strong>R3:为什么协议（protocol）如此重要？<br></strong><br>protocol由Internet engineering task force(IETF)制定，为了提供更好的更加有质量，更加安全的协议来给消费者使用，标准协议为了每个用户之间能够更有效的互相交流．例如：书上说的人打招呼的例子，如果没有协议就会乱套．<br><br><strong>R4:列出６个访问技术，以及将其分类家庭访问，企业访问和广域无线访问<br></strong><br><em>家庭访问：<br></em><br>1.DSL(digtal subscriber line):数字订阅通路<br><br>2.cable internet access: 有线上网，也可以叫做HFC(hybird fiber coax)：混合光纤同轴电缆<br><br>3.fiber to the home: 光纤到家（光纤）<br><br>4.Dial_up :数字拨号（用电话线<br><br>5.satellite:卫星<br><br><em>企业访问（家庭其实也可以）:<br></em><br>6.WIFI<br><br>7.Enternet<br><br>广域无线访问：<br>8.third/(fouth)-generation(3G)<br><br>9.LTE(long-term-Evolution)<br><br><strong>R5:HFC的传输速度是用户独享还是分享？是否可能在HFC的下游发生数据碰撞？<br></strong><br>HFC(hybird fiber coax)混合光纤同轴电缆也就是cable internet access有线连接，用的是电视公司提供的有线电视的电视线连接，因为这个互联网访问方式中用到了两种电缆线分别是光纤和同轴电缆，所以就叫HFC．<img src=\"/2020/03/09/Chapter1-Review-Questions/2020-03-09_21:03_select.png\" srcset=\"/img/loading.gif\" alt=\"cable internet access\"><br>如图所示HFC是用户分享类型的，如图HFC的下载源只有一个所以downstream不冲突，但是上传（upstream）就有可能冲突，需要用协议来解决．<br><br><strong>R6:列出你所在城市的住宅访问技术（access technologies）,以及它们各种的下载，上传速度和价钱.</strong><br>目前中国电信能够提供基于ADSL、LAN以及FTTH光纤接入三种技术的宽带实现方式。速率从1Mbps到20Mbps不等，价格也从119到559不等。(抄的．．)<br><br><strong>R7:以太局域网（Enthernet LANs）的传输速度是多少？</strong><br><br>对于用户：通常有100Mbps,对于服务器：通常有１Gbps~10Gbps .<br></p>\n<p><strong>R8:Enthernet（以太网）运行的物理介质是什么，有那些？</strong><br><br>有同轴电缆（coaxial cable）光纤（fiber optic）,双绞铜线（twisted-pair-copper Wire).<br><br><strong>R9:提供Dial-up modems,DSL,HFC,FTTH的速度范围和判断其是用户独占还是用户共享</strong><br></p>\n<ul>\n<li>DSL:上传速度：2.5Mbps，下载速度：24Mbps.[2003]</li>\n<li>HFC:上传速度：30.7Mbps,下载速度：42.8Mbps.[DOCSIS.2.0]</li>\n<li>FTTH:理论上可以达到１Gbps实际平均下载速度可以达到20Mbps[2011]</li>\n<li>Dial-up modems: 56kbps [巨慢]<br></li>\n</ul>\n<p><strong>R10:描述现在最流行的无线连接技术，并且比较它们的差异</strong><br><br>最流行的无线连接技术:现在是WIFI和4G<br><br>差异：<br><br>WIFI是用户无线或有线连接到自己附近的路由器，通过路由器这个接入点连接网络如图：<br><img src=\"/2020/03/09/Chapter1-Review-Questions/2020-03-10_15:03_select.png\" srcset=\"/img/loading.gif\" alt=\"WIFI\"><br><br>一般WIFI的范围是10米之内．WIFI提供的理论接入速度可以达到600Mbps(来自知乎，书上是54Mbps).<br><br>4G:4G用的是蜂窝技术（cellular telephony),4G提供的理论接入速度是100 Mbps,而且蜂窝技术的范围可以达到10千米内（范围更大）.<br><br><strong>R11:假设有只有一个分组交换机(parket switch)在发送端和接收端之间，传输速度发送端到分组交换机为R1,分组交换机到接收端之间为R2,假设使用的是存储转发交换机制(store-and-forward packet switch),计算端到端的总延迟[忽略处理延迟(processing delay),队列延迟(queuing delay),传播延迟（propagation delay）]</strong><br><br>那总延迟就等于这段路上的传输延迟（transmission delay）=R1+R2.<br></p>\n<p><strong>R12:电路交换网络(circuit-switched network)相比分组交换网络(packet-switch network)有什么优势，在电路交换网络中，TDM对比FDM有什么优势</strong><br><br>我觉得电路交换网络系统的缺点也可以算是它的优点，因为其在传输信息时需要建立连接状态（circuit）这个时候用户可以用这条链路上的所有的速度，但是此时其他的用户无法使用，此时如果建立链路没有在传输信息而是待工，这个时候链路资源就没办法有效利用，这就是circut-switch network的缺点，但是如果其的应用场景使用链路的密度很大，这个时候就很OK,因为其传输速度是满的．<br><br>TDM(Time-Division Multiplexing)时分复用对比FDM(Frequency-Division Multiplexing)频分复用的优势：<br></p>\n<pre><code> TDM is relatively a newer technique used for digital signals.\n TDM advantage over FDM is that it offers bandwidth saving with\n ATDM (allocate time slots on demand dynamically) and \n there is low interference between the signals that are being\n multiplexed(from google)\n</code></pre><p><strong>R13:假设用户分享2Mbps的带宽，同时假设每个用户在传输数据是持续以1Mbps的带宽，链接网络时传输的占的时间与总时间的比值为20%</strong>　<br><br><strong>a.如果使用电路交换网络(circuit-switched network),可以支持多少用户使用.</strong> <br><br><strong>b.假设使用分组分配，两个或者更少用户同时传输数据的时候为什么实际上没有队列（排队）延迟，三个用户同时使用为什么会有队列延迟</strong><br><br><strong>c.计算用户正在传输的概率</strong><br><br><strong>d.假定现在有三个用户计算这个三个用户同时使用链路的概率，找到队列增长的概率</strong>(c.d应该是承接b)<br></p>\n<p>1.两个用户可以同时使用<br><br>2.因为两个或者更少用户用的时候没有超过链路的最大带宽，而三个以上用户就会超过，所以用分组分配就会有队列延迟．<br><br>3.用户真正传输的概率是20%<br><br>4.三个用户同时使用的概率是$1\\over5$ $\\times$ $1\\over5$ $\\times$ $1\\over5$ $=$ $1\\over125$,队列增长的概率也是 $1\\over125$<br><br><strong>R14:为什么处于同一个层级的ISPs互相对等，IXP是怎么赚钱的？</strong><br><br>一个城市与临近的另一个城市需要的用户需要数据传输如果这两个城市的ISPs没有进行对等(peer),则还需要通过更上一层的ISPs来达到互相连接，而更高一层的ISPs就会向低级的ISPs收费（收费的多少体现在流量上），对等（peer）了之后就不用通过更上一层ISPs,以达到节省开支的目的，而IXP(Internet Exchange Point)，IXP通常由电信公司以外的第三方公司来建立，主要作为ISPs的对接点，提供ISPs的对等服务．IXP赚钱通过想ISPs们收取少量的端口费盈利．<br><br><img src=\"/2020/03/09/Chapter1-Review-Questions/2020-03-11_09:03_select.png\" srcset=\"/img/loading.gif\" alt=\"网络提供者的层级结构\"><br><strong>R15:一些内容的提供者也建立了它们自己的网络，描述一下Google,是什么促进它们建立自己的网络？</strong><br><br>google通过自己提供的TCP/IP网络把它分布在全球的大的小的数据中心连接起来（大的数据中心可能连接上百万个用户，小的可能几百个用户），<br>这些数据中心大多都是连接比较底层的用户或者ISPs提供，可以让谷歌绕过更高层级的ISPs．<br><br>促进他们建立自己网络的理由是：内容提供商（例如谷歌）建立自己的网络服务可以减少向上层ISPs支付费用，（因为谷歌可以直接和用户相连，或者连接更下层的ISPs和IXP,所以减少了中间ISPs的数量），同时也可以达到对用户更好的控制．<br><br><strong>R16:考虑在固定线路上从源主机发送一个包（packet）到目标主机，列出端到端的延迟，以及表示出那个延迟是常数，那个延迟是变量．</strong><br><br>分别有传输延迟（transmission delay），传播延迟(propagation delay)，队列延迟(queueing delay)，处理延迟(processing delay).<br><br>队列延迟是可变的，其他延迟是常数．<br><br><strong>R17:去这个小程序网站：Transmission Versus Propagation Delay，通过调整rates,propagation delay和packet sizes的大小，找到两个组合，使packet在源主机传输完成之前，第一个被发送的bit到达目标主机，和pakect在源主机完成传输之后，第一个被发送的bit才到达目标主机．</strong><br>第一个组合是：1000KM,1Mbps,100bytes.<br>第二个组合是：100KM,1Mbps,100bytes.<br><br><strong>R18:发送长度为1000bytes的packet,距离为2500Km,传播速度是$2.5$x$10^8$m/s,传输速度是2Mbps需要多长时间,更加抽象一点，发送长度为L的packet,距离为d,传播速度是s,传输速度是Rbps需要多长时间,在传递信息中的延迟是由打包的数据长度决定？还是传输的速度决定？</strong><br>假设忽略了处理延迟和队列延迟，那么需要的时间为<br><br>$1000\\div(2000000\\div8)+2500\\times 1000 \\div(2.5\\times10^8)=0.01+0.004=0.014s=14msec$<br><br>抽象一点：<br>$time=L\\times8/R+d/s$ <br><br>打包的数据长度和传输速度都不能呢个决定延迟大小．<br><br><strong>R19:假设源主机Ａ想传递一个很大的文件给目标主机Ｂ，在两者直接有三条链路，速度分别为R1=500kbps,R2=2Mbps,R3=1Mbps.</strong><br></p>\n<ul>\n<li>假设没有其他的流量在网络中，这个文件传输的吞吐量是多少？</li>\n<li>假设文件大小为4Mbytes,大致需要多长时间传输这个文件．</li>\n<li>重算1,2题现在R2降低到100kbps.<br><br>1.这个文件的吞吐量由最小的通路决定，文件吞吐量为500Kbps.<br><br>2.$T=4000000\\div(500\\times1000\\div 8)=64s$<br><br>3.如果R2降为100kbps,文件传输的吞吐量为100kbps,则4Mbytes的文件传输大致时间为$4000000\\div(100\\times1000\\div8)=320s$<br></li>\n</ul>\n<p><strong>R20:假设一个很大的文件从主机A传输到主机B,从一个比较高的角度描述一下主机A如何把一个文件变成一个个的packet，当一个packet到达交换机（switch）,哪些信息被用来指引（确定）packet前进路线，以及为什么互联网中分组交换需要模拟汽车从一个城市到另外一个城市并沿着路线不断问路的过程．</strong><br><br><img src=\"/2020/03/09/Chapter1-Review-Questions/2020-03-11_14:03:1583906551_select.png\" srcset=\"/img/loading.gif\" alt=\"packet的运行路线\"><br><br>主机Ａ的文件本来是一个整体在层级结构中被称作消息(message),传递给下面的传输层（Transport layer),传输层中的TCP协议可以把message分割成一块一块加上一些信息放在每一块上组成段(segment),同时TCP协议拥有流控制（flow control）功能[匹配发生者和接受者的速度]，和拥堵控制机制（congestion-control mechanism),然后传递给网络层（Network layer),然后把段传到网络层(Network layer),网络层执行的是IP协议，以及一些路由协议（routing protocol）,同样是在每个段的头部加上一些信息组成数据报(Datagram),然后在传递给链路层（Link layer）,链路层用的协议不同链路上用的协议就不同，有：WIFI,Ethernet and cable network的DORSIS protocol,操作也是在数据报头部加入一些信息形成的桢（Frame）最后就是送到物理层（physical layer),物理层就把每一个桢中的数据一个bit一个bit的传播出去，物理层同样有协议，根据使用的物理介质的不同而不同．<br><br>一个packet到达交换机后根据每个packet中的IP地址找到前进路线．<br><br>第三问着实不懂．<br></p>\n<p><strong>R21:去执行Queuing and Loss这个小程序,然后找到最大发送速率和最小的传输速率是多少？对于这些速率，流量强度是多少？用这些速率运行该小程序并确定出现丢包要花费多长时间？然后第多次重复该实验，再次确定出现丢包花费多长时间。这些值有什么不同？为什么会有这种现象？</strong><br><br>最大的发射速度是500packet/s,最小的传输速度是350packet/s,对于这些流量强度是$500\\div350=1.428$用这些速度去运行，出现丢包的时间大约在31~34秒左右，并不能确定具体哪个时间会发生丢包，为什么？因为用户发生数据包有随机性，我们并不能控制每一个用户．</p>\n<p><strong>R22:列出一层都可以执行5个任务,并且是否有可能这些任务中有可以执行在两个或者多个层？</strong><br><br>任务: 封装本层的报文段, 设置各种参数, 对接受到的报文段进行差错检查, 还可能进行流量设置, 分组重组等等.多个层是可能执行相同的一个(或两个)任务的, 比如差错检验<br><br><strong>R23:互联网协议栈的五层是什么，每一层的的主要职责是什么？</strong><br>互联网协议栈的五层从上到下分别是，应用层，传输层，网络层，链路层，物理层．关于他们的主要职责：在R20有讲到.</p>\n<p><strong>R24:什么是应用层报文（message）,传输层报文（segment),网络层数据报（Datagram）,链路层帧(Frame).</strong></p>\n<pre><code class=\"lang-mermaid\">graph TD\nA[message]--&gt;B[message+Headt=segment]--&gt;C[segment+Headn=Datagram]--&gt;D[Datagram+Headl=Frame];\n</code></pre>\n<p><br></p>\n<p><strong>R25:在互联网协议栈中路由器处理哪几层，链路交换机处理哪几层，主机处理哪几层？</strong><br><br>路由器处理１到３层(现代路由器里还有防火墙和缓存组件，也可以处理传输层)，链路交换机处理１－２两层，主机处理全５层．<br></p>\n<p><strong>R26:病毒（virus）和虫（worms）有什么不同?</strong><br><br>病毒需要用户与其互动，有交互，需要人进行操作，例如ＱＱ发个网站点进网站被盗号等，虫就是不需要与用户进行互动，例如用户运行一个很脆弱的软件，恶意软件进来不需要用户统一直接运行，并且会自我复制自动寻找下一个脆弱的软件进行攻击．<Br></Br></p>\n<p><strong>R27:描述一下僵尸网络(botnet)是怎么形成的,以及怎么利用僵尸网络来进行DDoS攻击？</strong><br>僵尸网络就是这个bad guy通过找到别人的应用或者是系统的漏洞，利用虫（worms)来侵入别人的主机，而这个虫又可以通过漏洞来复制和接着进行传播，僵尸网络的属性就是attacker可以远程通过命令来操控僵尸网络中的主机运作．而DDos（distributed denail-of-service attack）攻击就是通过成败上千台僵尸主机同时想目标主机发送信息，导致目标主机的带宽被占满从而使正确的信息无法传到目标主机．<br><br><img src=\"/2020/03/09/Chapter1-Review-Questions/2020-03-11_20:03:1583929611_select.png\" srcset=\"/img/loading.gif\" alt=\"botnet\"><br><br><strong>R28:假设Alice和Bob真正互相发送信息，同时假设Trudy定位自己在网络中，Trudy可以捕获所有Alice发生的消息，也可以发送任何消息给Bob,同理相对与Bob也一样，列举出Trudy处在这个位置上可以做的恶意的事情</strong><br><br>借钱打这个账户1008668001.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于计算机网络自顶向下的第一章的问题回答\"><a href=\"#关于计算机网络自顶向下的第一章的问题回答\" class=\"headerlink\" title=\" 关于计算机网络自顶向下的第一章的问题回答\"></a> 关于计算机网络自顶向下的第一章的问题回答</h2><p><strong>R1:主机和终端系统有什么不同？<br></strong><br>终端系统（end system）和主机(host)系统其实没有很大的区别都就具有连接网络和交换信息的能力，本质上没有很大的区别．但是在现实生活中主机常常指提供服务的一方，而终端指手机，手提电脑，台式电脑之类的．<br><br><strong>R2:protocol在维基百科上的定义<br></strong><br>protocol（协议）在维基百科上的定义是：给数据/信息在电子通信和网络上的传输制定的规则<br><br><strong>R3:为什么协议（protocol）如此重要？<br></strong><br>protocol由Internet engineering task force(IETF)制定，为了提供更好的更加有质量，更加安全的协议来给消费者使用，标准协议为了每个用户之间能够更有效的互相交流．例如：书上说的人打招呼的例子，如果没有协议就会乱套．<br><br><strong>R4:列出６个访问技术，以及将其分类家庭访问，企业访问和广域无线访问<br></strong><br><em>家庭访问：<br></em><br>1.DSL(digtal subscriber line):数字订阅通路<br><br>2.cable internet access: 有线上网，也可以叫做HFC(hybird fiber coax)：混合光纤同轴电缆<br><br>3.fiber to the home: 光纤到家（光纤）<br><br>4.Dial_up :数字拨号（用电话线<br><br>5.satellite:卫星<br><br><em>企业访问（家庭其实也可以）:<br></em><br>6.WIFI<br><br>7.Enternet<br><br>广域无线访问：<br>8.third/(fouth)-generation(3G)<br><br>9.LTE(long-term-Evolution)<br><br><strong>R5:HFC的传输速度是用户独享还是分享？是否可能在HFC的下游发生数据碰撞？<br></strong><br>HFC(hybird fiber coax)混合光纤同轴电缆也就是cable internet access有线连接，用的是电视公司提供的有线电视的电视线连接，因为这个互联网访问方式中用到了两种电缆线分别是光纤和同轴电缆，所以就叫HFC．<img src=\"/2020/03/09/Chapter1-Review-Questions/2020-03-09_21:03_select.png\" srcset=\"/img/loading.gif\" alt=\"cable internet access\"><br>如图所示HFC是用户分享类型的，如图HFC的下载源只有一个所以downstream不冲突，但是上传（upstream）就有可能冲突，需要用协议来解决．<br><br><strong>R6:列出你所在城市的住宅访问技术（access technologies）,以及它们各种的下载，上传速度和价钱.</strong><br>目前中国电信能够提供基于ADSL、LAN以及FTTH光纤接入三种技术的宽带实现方式。速率从1Mbps到20Mbps不等，价格也从119到559不等。(抄的．．)<br><br><strong>R7:以太局域网（Enthernet LANs）的传输速度是多少？</strong><br><br>对于用户：通常有100Mbps,对于服务器：通常有１Gbps~10Gbps .<br></p>\n<p><strong>R8:Enthernet（以太网）运行的物理介质是什么，有那些？</strong><br><br>有同轴电缆（coaxial cable）光纤（fiber optic）,双绞铜线（twisted-pair-copper Wire).<br><br><strong>R9:提供Dial-up modems,DSL,HFC,FTTH的速度范围和判断其是用户独占还是用户共享</strong><br></p>\n<ul>\n<li>DSL:上传速度：2.5Mbps，下载速度：24Mbps.[2003]</li>\n<li>HFC:上传速度：30.7Mbps,下载速度：42.8Mbps.[DOCSIS.2.0]</li>\n<li>FTTH:理论上可以达到１Gbps实际平均下载速度可以达到20Mbps[2011]</li>\n<li>Dial-up modems: 56kbps [巨慢]<br></li>\n</ul>\n<p><strong>R10:描述现在最流行的无线连接技术，并且比较它们的差异</strong><br><br>最流行的无线连接技术:现在是WIFI和4G<br><br>差异：<br><br>WIFI是用户无线或有线连接到自己附近的路由器，通过路由器这个接入点连接网络如图：<br><img src=\"/2020/03/09/Chapter1-Review-Questions/2020-03-10_15:03_select.png\" srcset=\"/img/loading.gif\" alt=\"WIFI\"><br><br>一般WIFI的范围是10米之内．WIFI提供的理论接入速度可以达到600Mbps(来自知乎，书上是54Mbps).<br><br>4G:4G用的是蜂窝技术（cellular telephony),4G提供的理论接入速度是100 Mbps,而且蜂窝技术的范围可以达到10千米内（范围更大）.<br><br><strong>R11:假设有只有一个分组交换机(parket switch)在发送端和接收端之间，传输速度发送端到分组交换机为R1,分组交换机到接收端之间为R2,假设使用的是存储转发交换机制(store-and-forward packet switch),计算端到端的总延迟[忽略处理延迟(processing delay),队列延迟(queuing delay),传播延迟（propagation delay）]</strong><br><br>那总延迟就等于这段路上的传输延迟（transmission delay）=R1+R2.<br></p>\n<p><strong>R12:电路交换网络(circuit-switched network)相比分组交换网络(packet-switch network)有什么优势，在电路交换网络中，TDM对比FDM有什么优势</strong><br><br>我觉得电路交换网络系统的缺点也可以算是它的优点，因为其在传输信息时需要建立连接状态（circuit）这个时候用户可以用这条链路上的所有的速度，但是此时其他的用户无法使用，此时如果建立链路没有在传输信息而是待工，这个时候链路资源就没办法有效利用，这就是circut-switch network的缺点，但是如果其的应用场景使用链路的密度很大，这个时候就很OK,因为其传输速度是满的．<br><br>TDM(Time-Division Multiplexing)时分复用对比FDM(Frequency-Division Multiplexing)频分复用的优势：<br></p>\n<pre><code> TDM is relatively a newer technique used for digital signals.\n TDM advantage over FDM is that it offers bandwidth saving with\n ATDM (allocate time slots on demand dynamically) and \n there is low interference between the signals that are being\n multiplexed(from google)\n</code></pre><p><strong>R13:假设用户分享2Mbps的带宽，同时假设每个用户在传输数据是持续以1Mbps的带宽，链接网络时传输的占的时间与总时间的比值为20%</strong>　<br><br><strong>a.如果使用电路交换网络(circuit-switched network),可以支持多少用户使用.</strong> <br><br><strong>b.假设使用分组分配，两个或者更少用户同时传输数据的时候为什么实际上没有队列（排队）延迟，三个用户同时使用为什么会有队列延迟</strong><br><br><strong>c.计算用户正在传输的概率</strong><br><br><strong>d.假定现在有三个用户计算这个三个用户同时使用链路的概率，找到队列增长的概率</strong>(c.d应该是承接b)<br></p>\n<p>1.两个用户可以同时使用<br><br>2.因为两个或者更少用户用的时候没有超过链路的最大带宽，而三个以上用户就会超过，所以用分组分配就会有队列延迟．<br><br>3.用户真正传输的概率是20%<br><br>4.三个用户同时使用的概率是$1\\over5$ $\\times$ $1\\over5$ $\\times$ $1\\over5$ $=$ $1\\over125$,队列增长的概率也是 $1\\over125$<br><br><strong>R14:为什么处于同一个层级的ISPs互相对等，IXP是怎么赚钱的？</strong><br><br>一个城市与临近的另一个城市需要的用户需要数据传输如果这两个城市的ISPs没有进行对等(peer),则还需要通过更上一层的ISPs来达到互相连接，而更高一层的ISPs就会向低级的ISPs收费（收费的多少体现在流量上），对等（peer）了之后就不用通过更上一层ISPs,以达到节省开支的目的，而IXP(Internet Exchange Point)，IXP通常由电信公司以外的第三方公司来建立，主要作为ISPs的对接点，提供ISPs的对等服务．IXP赚钱通过想ISPs们收取少量的端口费盈利．<br><br><img src=\"/2020/03/09/Chapter1-Review-Questions/2020-03-11_09:03_select.png\" srcset=\"/img/loading.gif\" alt=\"网络提供者的层级结构\"><br><strong>R15:一些内容的提供者也建立了它们自己的网络，描述一下Google,是什么促进它们建立自己的网络？</strong><br><br>google通过自己提供的TCP/IP网络把它分布在全球的大的小的数据中心连接起来（大的数据中心可能连接上百万个用户，小的可能几百个用户），<br>这些数据中心大多都是连接比较底层的用户或者ISPs提供，可以让谷歌绕过更高层级的ISPs．<br><br>促进他们建立自己网络的理由是：内容提供商（例如谷歌）建立自己的网络服务可以减少向上层ISPs支付费用，（因为谷歌可以直接和用户相连，或者连接更下层的ISPs和IXP,所以减少了中间ISPs的数量），同时也可以达到对用户更好的控制．<br><br><strong>R16:考虑在固定线路上从源主机发送一个包（packet）到目标主机，列出端到端的延迟，以及表示出那个延迟是常数，那个延迟是变量．</strong><br><br>分别有传输延迟（transmission delay），传播延迟(propagation delay)，队列延迟(queueing delay)，处理延迟(processing delay).<br><br>队列延迟是可变的，其他延迟是常数．<br><br><strong>R17:去这个小程序网站：Transmission Versus Propagation Delay，通过调整rates,propagation delay和packet sizes的大小，找到两个组合，使packet在源主机传输完成之前，第一个被发送的bit到达目标主机，和pakect在源主机完成传输之后，第一个被发送的bit才到达目标主机．</strong><br>第一个组合是：1000KM,1Mbps,100bytes.<br>第二个组合是：100KM,1Mbps,100bytes.<br><br><strong>R18:发送长度为1000bytes的packet,距离为2500Km,传播速度是$2.5$x$10^8$m/s,传输速度是2Mbps需要多长时间,更加抽象一点，发送长度为L的packet,距离为d,传播速度是s,传输速度是Rbps需要多长时间,在传递信息中的延迟是由打包的数据长度决定？还是传输的速度决定？</strong><br>假设忽略了处理延迟和队列延迟，那么需要的时间为<br><br>$1000\\div(2000000\\div8)+2500\\times 1000 \\div(2.5\\times10^8)=0.01+0.004=0.014s=14msec$<br><br>抽象一点：<br>$time=L\\times8/R+d/s$ <br><br>打包的数据长度和传输速度都不能呢个决定延迟大小．<br><br><strong>R19:假设源主机Ａ想传递一个很大的文件给目标主机Ｂ，在两者直接有三条链路，速度分别为R1=500kbps,R2=2Mbps,R3=1Mbps.</strong><br></p>\n<ul>\n<li>假设没有其他的流量在网络中，这个文件传输的吞吐量是多少？</li>\n<li>假设文件大小为4Mbytes,大致需要多长时间传输这个文件．</li>\n<li>重算1,2题现在R2降低到100kbps.<br><br>1.这个文件的吞吐量由最小的通路决定，文件吞吐量为500Kbps.<br><br>2.$T=4000000\\div(500\\times1000\\div 8)=64s$<br><br>3.如果R2降为100kbps,文件传输的吞吐量为100kbps,则4Mbytes的文件传输大致时间为$4000000\\div(100\\times1000\\div8)=320s$<br></li>\n</ul>\n<p><strong>R20:假设一个很大的文件从主机A传输到主机B,从一个比较高的角度描述一下主机A如何把一个文件变成一个个的packet，当一个packet到达交换机（switch）,哪些信息被用来指引（确定）packet前进路线，以及为什么互联网中分组交换需要模拟汽车从一个城市到另外一个城市并沿着路线不断问路的过程．</strong><br><br><img src=\"/2020/03/09/Chapter1-Review-Questions/2020-03-11_14:03:1583906551_select.png\" srcset=\"/img/loading.gif\" alt=\"packet的运行路线\"><br><br>主机Ａ的文件本来是一个整体在层级结构中被称作消息(message),传递给下面的传输层（Transport layer),传输层中的TCP协议可以把message分割成一块一块加上一些信息放在每一块上组成段(segment),同时TCP协议拥有流控制（flow control）功能[匹配发生者和接受者的速度]，和拥堵控制机制（congestion-control mechanism),然后传递给网络层（Network layer),然后把段传到网络层(Network layer),网络层执行的是IP协议，以及一些路由协议（routing protocol）,同样是在每个段的头部加上一些信息组成数据报(Datagram),然后在传递给链路层（Link layer）,链路层用的协议不同链路上用的协议就不同，有：WIFI,Ethernet and cable network的DORSIS protocol,操作也是在数据报头部加入一些信息形成的桢（Frame）最后就是送到物理层（physical layer),物理层就把每一个桢中的数据一个bit一个bit的传播出去，物理层同样有协议，根据使用的物理介质的不同而不同．<br><br>一个packet到达交换机后根据每个packet中的IP地址找到前进路线．<br><br>第三问着实不懂．<br></p>\n<p><strong>R21:去执行Queuing and Loss这个小程序,然后找到最大发送速率和最小的传输速率是多少？对于这些速率，流量强度是多少？用这些速率运行该小程序并确定出现丢包要花费多长时间？然后第多次重复该实验，再次确定出现丢包花费多长时间。这些值有什么不同？为什么会有这种现象？</strong><br><br>最大的发射速度是500packet/s,最小的传输速度是350packet/s,对于这些流量强度是$500\\div350=1.428$用这些速度去运行，出现丢包的时间大约在31~34秒左右，并不能确定具体哪个时间会发生丢包，为什么？因为用户发生数据包有随机性，我们并不能控制每一个用户．</p>\n<p><strong>R22:列出一层都可以执行5个任务,并且是否有可能这些任务中有可以执行在两个或者多个层？</strong><br><br>任务: 封装本层的报文段, 设置各种参数, 对接受到的报文段进行差错检查, 还可能进行流量设置, 分组重组等等.多个层是可能执行相同的一个(或两个)任务的, 比如差错检验<br><br><strong>R23:互联网协议栈的五层是什么，每一层的的主要职责是什么？</strong><br>互联网协议栈的五层从上到下分别是，应用层，传输层，网络层，链路层，物理层．关于他们的主要职责：在R20有讲到.</p>\n<p><strong>R24:什么是应用层报文（message）,传输层报文（segment),网络层数据报（Datagram）,链路层帧(Frame).</strong></p>\n<pre><code class=\"lang-mermaid\">graph TD\nA[message]--&gt;B[message+Headt=segment]--&gt;C[segment+Headn=Datagram]--&gt;D[Datagram+Headl=Frame];\n</code></pre>\n<p><br></p>\n<p><strong>R25:在互联网协议栈中路由器处理哪几层，链路交换机处理哪几层，主机处理哪几层？</strong><br><br>路由器处理１到３层(现代路由器里还有防火墙和缓存组件，也可以处理传输层)，链路交换机处理１－２两层，主机处理全５层．<br></p>\n<p><strong>R26:病毒（virus）和虫（worms）有什么不同?</strong><br><br>病毒需要用户与其互动，有交互，需要人进行操作，例如ＱＱ发个网站点进网站被盗号等，虫就是不需要与用户进行互动，例如用户运行一个很脆弱的软件，恶意软件进来不需要用户统一直接运行，并且会自我复制自动寻找下一个脆弱的软件进行攻击．<Br></Br></p>\n<p><strong>R27:描述一下僵尸网络(botnet)是怎么形成的,以及怎么利用僵尸网络来进行DDoS攻击？</strong><br>僵尸网络就是这个bad guy通过找到别人的应用或者是系统的漏洞，利用虫（worms)来侵入别人的主机，而这个虫又可以通过漏洞来复制和接着进行传播，僵尸网络的属性就是attacker可以远程通过命令来操控僵尸网络中的主机运作．而DDos（distributed denail-of-service attack）攻击就是通过成败上千台僵尸主机同时想目标主机发送信息，导致目标主机的带宽被占满从而使正确的信息无法传到目标主机．<br><br><img src=\"/2020/03/09/Chapter1-Review-Questions/2020-03-11_20:03:1583929611_select.png\" srcset=\"/img/loading.gif\" alt=\"botnet\"><br><br><strong>R28:假设Alice和Bob真正互相发送信息，同时假设Trudy定位自己在网络中，Trudy可以捕获所有Alice发生的消息，也可以发送任何消息给Bob,同理相对与Bob也一样，列举出Trudy处在这个位置上可以做的恶意的事情</strong><br><br>借钱打这个账户1008668001.</p>\n"},{"title":"The Network Core","date":"2020-02-28T11:36:11.000Z","_content":"\n# The Network Core\n\nThe figure highlights the Network Core with thick, shaded lines.\n\n![](The-Network-Core/2020-02-28 19-54-24 的屏幕截图.png)\n\n## Packet Switching\n\nTo send a message from a source end system to a destination end system, the source breaks long message into smaller chunks of data known as **Packets**. Between source and destination, each packet travel through **communication links and packet switches**(for which there are two predominant types, routers and link-layer switches) .\n\n### Store-and-Forward Transmission\n\nStore-and-forward transmission means that the packet switch must receive the entire packet before it can begin to transmit the first bit of the packet onto the outbound link. \n\nTo explore store-and-forward transmission in more detail. Consider a simple network consisting of two end systems connected by a single router as shown as figure below.\n\nA router will typically have many incident link, since its job is to switch an incoming packet onto an outgoing link;  In this example the router has the rather simple task of transferring a packet from one(input) link to the only other attached link. In this example the source has three packets, each consisting of L bits to send to the destination. Because the router employ store-and-forwarding, at this instant of time, the router cannot transmit the bits it has received; only after the router has received all of the packet's bits can it begin to transmit the packet onto the outbound link.\n\n![s](The-Network-Core/2020-02-28 19-47-00 的屏幕截图.png)\n\nTo gain some insight into store-and-forward transmission, let's now calculate the amount of time that elapses from when the source begins to send the packet until the destination has received the entire packet.(Here we will ignore propagation delay - the time it take for the bits to travel across the wire at near the speed of light). The source begins to transmit at time 0; at time L/R seconds, the sources has transmitted the entire packet and the entire packet has been received and store at the router(since there is no propagation delay). At time L/R seconds, since the router  has just received the entire packet, it can begin to transmit the packet onto the outbound link towards the destination; at time 2L/R, the router have transmitted the entire packet, and the entire packet has been received by the desination. Thus the total delay is 2L/R. If the switch instead forwarded bits as soon as they arrive.(without first receving store and process the entire packet before forwarding) then the total delay would be L/R since bits are not help up at the router. But as we will discuss in Section1.4 routers need to receive, store,and process the entrie packet before forwarding.\n\nlet's now consider the general case of sending one packet from source to destination over a path consisting of N link each of rate R(thus, there are N-1 routers between source and destination). Applying the same logic as above, we see that the end-to-end delay is :\n$$\nd_ {end-to-end}= N*L/R\n$$\n\n### Queuing Delays and Packet Loss\n\nEach packet switch has multiple link attached to it . For each attached link, the packet switch has an **output buffer**(also called an **output queue**),which stores packets that the router is about to send into that link. The output buffers play a key role in packet switching. If an arriving packet needs to be transmitted onto a link,but finds the link busy with the transmission of another packet, the arriving packets must wait in the output buffer. **Thus, in addition to the store-and-forward delays,packets suffer output buffer queuing delay.** These delay are variable and depend on the level of congestion in the network. since the amount of buffer space is finite. an arriving packet may find that the buffer is completely full with other packets waiting for transmission. In this case, **Packet Loss will occur** - either the arriving packet or one of the already-queued packets will be dropped.\n\n### Forwarding Tables and Routing Protocols\n\nEarlier, we said that a router takes a packet arriving on one of its attached communication links and forwards that packet onto another one of attached communication links. But how does the router determine which link it should forward the packet onto? Packet forwarding is actually done in different ways in different types of computer networks. Here, we briefly describe how it is done in the Internet.\n\n​\tIn the Internet,every end system has an address called an **IP address.** when a source end system wants to send a packet to a destination end system, the source include the destination's IP address in the packet's header. As with postal addresses. each router has a **forwarding table** that maps destination addresses(or portions of the destination addresses) to that router's outbound links. When a packet arrives at a router, the router examines the address and searches its forwarding table, using this destination address, to find the appropriate outbound link. The router then directs the packet to this outbound link.\n\n​\tWe just learned that a router uses a packet's destination address to index a forwarding table and determine the appropriate outbound link. But this statement begs yet another question: \"How do forwarding tables get set ?\", Are they configured by hand in each and every router, or does the Internet use a more automated procedure? The issue will be studied in depth in after. but we'll note now that the Internet has a number of special routing protocols that are used to automatically set the forwarding tables.\n\n## Circuit Switching\n\nIn circuit-switching networds, the resource needed along a path(buffer link transmission rate) to provide for communication between the end systems are  reserved for the duration of the communication session between the end systems. In the packet-switched networks, these resources are not reserved; a session's messages use the resources on demand and as a consequence ,may have to wait for access to a  communication link.\n\n​\tTraditional telephone networks are examples of circuit-switched network. Consider what happens when one person want to send information(voice or facsimile) to another over a telephone network. Before the sender can send the information, the network must establish a connection between the sender and the receiver, for which the switches on the path between the sender and receiver maintain connection state for that connection.  In the jargon of telephony, this connection is called a **circuit**. when the network establishes the circuit , it also ","source":"_posts/The-Network-Core.md","raw":"---\ntitle: The Network Core\ndate: 2020-02-28 19:36:11\ntags: -Computer Network A Top-Down Approach\n\n---\n\n# The Network Core\n\nThe figure highlights the Network Core with thick, shaded lines.\n\n![](The-Network-Core/2020-02-28 19-54-24 的屏幕截图.png)\n\n## Packet Switching\n\nTo send a message from a source end system to a destination end system, the source breaks long message into smaller chunks of data known as **Packets**. Between source and destination, each packet travel through **communication links and packet switches**(for which there are two predominant types, routers and link-layer switches) .\n\n### Store-and-Forward Transmission\n\nStore-and-forward transmission means that the packet switch must receive the entire packet before it can begin to transmit the first bit of the packet onto the outbound link. \n\nTo explore store-and-forward transmission in more detail. Consider a simple network consisting of two end systems connected by a single router as shown as figure below.\n\nA router will typically have many incident link, since its job is to switch an incoming packet onto an outgoing link;  In this example the router has the rather simple task of transferring a packet from one(input) link to the only other attached link. In this example the source has three packets, each consisting of L bits to send to the destination. Because the router employ store-and-forwarding, at this instant of time, the router cannot transmit the bits it has received; only after the router has received all of the packet's bits can it begin to transmit the packet onto the outbound link.\n\n![s](The-Network-Core/2020-02-28 19-47-00 的屏幕截图.png)\n\nTo gain some insight into store-and-forward transmission, let's now calculate the amount of time that elapses from when the source begins to send the packet until the destination has received the entire packet.(Here we will ignore propagation delay - the time it take for the bits to travel across the wire at near the speed of light). The source begins to transmit at time 0; at time L/R seconds, the sources has transmitted the entire packet and the entire packet has been received and store at the router(since there is no propagation delay). At time L/R seconds, since the router  has just received the entire packet, it can begin to transmit the packet onto the outbound link towards the destination; at time 2L/R, the router have transmitted the entire packet, and the entire packet has been received by the desination. Thus the total delay is 2L/R. If the switch instead forwarded bits as soon as they arrive.(without first receving store and process the entire packet before forwarding) then the total delay would be L/R since bits are not help up at the router. But as we will discuss in Section1.4 routers need to receive, store,and process the entrie packet before forwarding.\n\nlet's now consider the general case of sending one packet from source to destination over a path consisting of N link each of rate R(thus, there are N-1 routers between source and destination). Applying the same logic as above, we see that the end-to-end delay is :\n$$\nd_ {end-to-end}= N*L/R\n$$\n\n### Queuing Delays and Packet Loss\n\nEach packet switch has multiple link attached to it . For each attached link, the packet switch has an **output buffer**(also called an **output queue**),which stores packets that the router is about to send into that link. The output buffers play a key role in packet switching. If an arriving packet needs to be transmitted onto a link,but finds the link busy with the transmission of another packet, the arriving packets must wait in the output buffer. **Thus, in addition to the store-and-forward delays,packets suffer output buffer queuing delay.** These delay are variable and depend on the level of congestion in the network. since the amount of buffer space is finite. an arriving packet may find that the buffer is completely full with other packets waiting for transmission. In this case, **Packet Loss will occur** - either the arriving packet or one of the already-queued packets will be dropped.\n\n### Forwarding Tables and Routing Protocols\n\nEarlier, we said that a router takes a packet arriving on one of its attached communication links and forwards that packet onto another one of attached communication links. But how does the router determine which link it should forward the packet onto? Packet forwarding is actually done in different ways in different types of computer networks. Here, we briefly describe how it is done in the Internet.\n\n​\tIn the Internet,every end system has an address called an **IP address.** when a source end system wants to send a packet to a destination end system, the source include the destination's IP address in the packet's header. As with postal addresses. each router has a **forwarding table** that maps destination addresses(or portions of the destination addresses) to that router's outbound links. When a packet arrives at a router, the router examines the address and searches its forwarding table, using this destination address, to find the appropriate outbound link. The router then directs the packet to this outbound link.\n\n​\tWe just learned that a router uses a packet's destination address to index a forwarding table and determine the appropriate outbound link. But this statement begs yet another question: \"How do forwarding tables get set ?\", Are they configured by hand in each and every router, or does the Internet use a more automated procedure? The issue will be studied in depth in after. but we'll note now that the Internet has a number of special routing protocols that are used to automatically set the forwarding tables.\n\n## Circuit Switching\n\nIn circuit-switching networds, the resource needed along a path(buffer link transmission rate) to provide for communication between the end systems are  reserved for the duration of the communication session between the end systems. In the packet-switched networks, these resources are not reserved; a session's messages use the resources on demand and as a consequence ,may have to wait for access to a  communication link.\n\n​\tTraditional telephone networks are examples of circuit-switched network. Consider what happens when one person want to send information(voice or facsimile) to another over a telephone network. Before the sender can send the information, the network must establish a connection between the sender and the receiver, for which the switches on the path between the sender and receiver maintain connection state for that connection.  In the jargon of telephony, this connection is called a **circuit**. when the network establishes the circuit , it also ","slug":"The-Network-Core","published":1,"updated":"2020-02-29T07:57:50.187Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7knymj50002tlfw2qkshr1j","content":"<h1 id=\"The-Network-Core\"><a href=\"#The-Network-Core\" class=\"headerlink\" title=\"The Network Core\"></a>The Network Core</h1><p>The figure highlights the Network Core with thick, shaded lines.</p>\n<p><img src=\"/2020/02/28/The-Network-Core/2020-02-28 19-54-24 的屏幕截图.png\" srcset=\"/img/loading.gif\" alt></p>\n<h2 id=\"Packet-Switching\"><a href=\"#Packet-Switching\" class=\"headerlink\" title=\"Packet Switching\"></a>Packet Switching</h2><p>To send a message from a source end system to a destination end system, the source breaks long message into smaller chunks of data known as <strong>Packets</strong>. Between source and destination, each packet travel through <strong>communication links and packet switches</strong>(for which there are two predominant types, routers and link-layer switches) .</p>\n<h3 id=\"Store-and-Forward-Transmission\"><a href=\"#Store-and-Forward-Transmission\" class=\"headerlink\" title=\"Store-and-Forward Transmission\"></a>Store-and-Forward Transmission</h3><p>Store-and-forward transmission means that the packet switch must receive the entire packet before it can begin to transmit the first bit of the packet onto the outbound link. </p>\n<p>To explore store-and-forward transmission in more detail. Consider a simple network consisting of two end systems connected by a single router as shown as figure below.</p>\n<p>A router will typically have many incident link, since its job is to switch an incoming packet onto an outgoing link;  In this example the router has the rather simple task of transferring a packet from one(input) link to the only other attached link. In this example the source has three packets, each consisting of L bits to send to the destination. Because the router employ store-and-forwarding, at this instant of time, the router cannot transmit the bits it has received; only after the router has received all of the packet’s bits can it begin to transmit the packet onto the outbound link.</p>\n<p><img src=\"/2020/02/28/The-Network-Core/2020-02-28 19-47-00 的屏幕截图.png\" srcset=\"/img/loading.gif\" alt=\"s\"></p>\n<p>To gain some insight into store-and-forward transmission, let’s now calculate the amount of time that elapses from when the source begins to send the packet until the destination has received the entire packet.(Here we will ignore propagation delay - the time it take for the bits to travel across the wire at near the speed of light). The source begins to transmit at time 0; at time L/R seconds, the sources has transmitted the entire packet and the entire packet has been received and store at the router(since there is no propagation delay). At time L/R seconds, since the router  has just received the entire packet, it can begin to transmit the packet onto the outbound link towards the destination; at time 2L/R, the router have transmitted the entire packet, and the entire packet has been received by the desination. Thus the total delay is 2L/R. If the switch instead forwarded bits as soon as they arrive.(without first receving store and process the entire packet before forwarding) then the total delay would be L/R since bits are not help up at the router. But as we will discuss in Section1.4 routers need to receive, store,and process the entrie packet before forwarding.</p>\n<p>let’s now consider the general case of sending one packet from source to destination over a path consisting of N link each of rate R(thus, there are N-1 routers between source and destination). Applying the same logic as above, we see that the end-to-end delay is :</p>\n<script type=\"math/tex; mode=display\">\nd_ {end-to-end}= N*L/R</script><h3 id=\"Queuing-Delays-and-Packet-Loss\"><a href=\"#Queuing-Delays-and-Packet-Loss\" class=\"headerlink\" title=\"Queuing Delays and Packet Loss\"></a>Queuing Delays and Packet Loss</h3><p>Each packet switch has multiple link attached to it . For each attached link, the packet switch has an <strong>output buffer</strong>(also called an <strong>output queue</strong>),which stores packets that the router is about to send into that link. The output buffers play a key role in packet switching. If an arriving packet needs to be transmitted onto a link,but finds the link busy with the transmission of another packet, the arriving packets must wait in the output buffer. <strong>Thus, in addition to the store-and-forward delays,packets suffer output buffer queuing delay.</strong> These delay are variable and depend on the level of congestion in the network. since the amount of buffer space is finite. an arriving packet may find that the buffer is completely full with other packets waiting for transmission. In this case, <strong>Packet Loss will occur</strong> - either the arriving packet or one of the already-queued packets will be dropped.</p>\n<h3 id=\"Forwarding-Tables-and-Routing-Protocols\"><a href=\"#Forwarding-Tables-and-Routing-Protocols\" class=\"headerlink\" title=\"Forwarding Tables and Routing Protocols\"></a>Forwarding Tables and Routing Protocols</h3><p>Earlier, we said that a router takes a packet arriving on one of its attached communication links and forwards that packet onto another one of attached communication links. But how does the router determine which link it should forward the packet onto? Packet forwarding is actually done in different ways in different types of computer networks. Here, we briefly describe how it is done in the Internet.</p>\n<p>​    In the Internet,every end system has an address called an <strong>IP address.</strong> when a source end system wants to send a packet to a destination end system, the source include the destination’s IP address in the packet’s header. As with postal addresses. each router has a <strong>forwarding table</strong> that maps destination addresses(or portions of the destination addresses) to that router’s outbound links. When a packet arrives at a router, the router examines the address and searches its forwarding table, using this destination address, to find the appropriate outbound link. The router then directs the packet to this outbound link.</p>\n<p>​    We just learned that a router uses a packet’s destination address to index a forwarding table and determine the appropriate outbound link. But this statement begs yet another question: “How do forwarding tables get set ?”, Are they configured by hand in each and every router, or does the Internet use a more automated procedure? The issue will be studied in depth in after. but we’ll note now that the Internet has a number of special routing protocols that are used to automatically set the forwarding tables.</p>\n<h2 id=\"Circuit-Switching\"><a href=\"#Circuit-Switching\" class=\"headerlink\" title=\"Circuit Switching\"></a>Circuit Switching</h2><p>In circuit-switching networds, the resource needed along a path(buffer link transmission rate) to provide for communication between the end systems are  reserved for the duration of the communication session between the end systems. In the packet-switched networks, these resources are not reserved; a session’s messages use the resources on demand and as a consequence ,may have to wait for access to a  communication link.</p>\n<p>​    Traditional telephone networks are examples of circuit-switched network. Consider what happens when one person want to send information(voice or facsimile) to another over a telephone network. Before the sender can send the information, the network must establish a connection between the sender and the receiver, for which the switches on the path between the sender and receiver maintain connection state for that connection.  In the jargon of telephony, this connection is called a <strong>circuit</strong>. when the network establishes the circuit , it also </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"The-Network-Core\"><a href=\"#The-Network-Core\" class=\"headerlink\" title=\"The Network Core\"></a>The Network Core</h1><p>The figure highlights the Network Core with thick, shaded lines.</p>\n<p><img src=\"/2020/02/28/The-Network-Core/2020-02-28 19-54-24 的屏幕截图.png\" srcset=\"/img/loading.gif\" alt></p>\n<h2 id=\"Packet-Switching\"><a href=\"#Packet-Switching\" class=\"headerlink\" title=\"Packet Switching\"></a>Packet Switching</h2><p>To send a message from a source end system to a destination end system, the source breaks long message into smaller chunks of data known as <strong>Packets</strong>. Between source and destination, each packet travel through <strong>communication links and packet switches</strong>(for which there are two predominant types, routers and link-layer switches) .</p>\n<h3 id=\"Store-and-Forward-Transmission\"><a href=\"#Store-and-Forward-Transmission\" class=\"headerlink\" title=\"Store-and-Forward Transmission\"></a>Store-and-Forward Transmission</h3><p>Store-and-forward transmission means that the packet switch must receive the entire packet before it can begin to transmit the first bit of the packet onto the outbound link. </p>\n<p>To explore store-and-forward transmission in more detail. Consider a simple network consisting of two end systems connected by a single router as shown as figure below.</p>\n<p>A router will typically have many incident link, since its job is to switch an incoming packet onto an outgoing link;  In this example the router has the rather simple task of transferring a packet from one(input) link to the only other attached link. In this example the source has three packets, each consisting of L bits to send to the destination. Because the router employ store-and-forwarding, at this instant of time, the router cannot transmit the bits it has received; only after the router has received all of the packet’s bits can it begin to transmit the packet onto the outbound link.</p>\n<p><img src=\"/2020/02/28/The-Network-Core/2020-02-28 19-47-00 的屏幕截图.png\" srcset=\"/img/loading.gif\" alt=\"s\"></p>\n<p>To gain some insight into store-and-forward transmission, let’s now calculate the amount of time that elapses from when the source begins to send the packet until the destination has received the entire packet.(Here we will ignore propagation delay - the time it take for the bits to travel across the wire at near the speed of light). The source begins to transmit at time 0; at time L/R seconds, the sources has transmitted the entire packet and the entire packet has been received and store at the router(since there is no propagation delay). At time L/R seconds, since the router  has just received the entire packet, it can begin to transmit the packet onto the outbound link towards the destination; at time 2L/R, the router have transmitted the entire packet, and the entire packet has been received by the desination. Thus the total delay is 2L/R. If the switch instead forwarded bits as soon as they arrive.(without first receving store and process the entire packet before forwarding) then the total delay would be L/R since bits are not help up at the router. But as we will discuss in Section1.4 routers need to receive, store,and process the entrie packet before forwarding.</p>\n<p>let’s now consider the general case of sending one packet from source to destination over a path consisting of N link each of rate R(thus, there are N-1 routers between source and destination). Applying the same logic as above, we see that the end-to-end delay is :</p>\n<script type=\"math/tex; mode=display\">\nd_ {end-to-end}= N*L/R</script><h3 id=\"Queuing-Delays-and-Packet-Loss\"><a href=\"#Queuing-Delays-and-Packet-Loss\" class=\"headerlink\" title=\"Queuing Delays and Packet Loss\"></a>Queuing Delays and Packet Loss</h3><p>Each packet switch has multiple link attached to it . For each attached link, the packet switch has an <strong>output buffer</strong>(also called an <strong>output queue</strong>),which stores packets that the router is about to send into that link. The output buffers play a key role in packet switching. If an arriving packet needs to be transmitted onto a link,but finds the link busy with the transmission of another packet, the arriving packets must wait in the output buffer. <strong>Thus, in addition to the store-and-forward delays,packets suffer output buffer queuing delay.</strong> These delay are variable and depend on the level of congestion in the network. since the amount of buffer space is finite. an arriving packet may find that the buffer is completely full with other packets waiting for transmission. In this case, <strong>Packet Loss will occur</strong> - either the arriving packet or one of the already-queued packets will be dropped.</p>\n<h3 id=\"Forwarding-Tables-and-Routing-Protocols\"><a href=\"#Forwarding-Tables-and-Routing-Protocols\" class=\"headerlink\" title=\"Forwarding Tables and Routing Protocols\"></a>Forwarding Tables and Routing Protocols</h3><p>Earlier, we said that a router takes a packet arriving on one of its attached communication links and forwards that packet onto another one of attached communication links. But how does the router determine which link it should forward the packet onto? Packet forwarding is actually done in different ways in different types of computer networks. Here, we briefly describe how it is done in the Internet.</p>\n<p>​    In the Internet,every end system has an address called an <strong>IP address.</strong> when a source end system wants to send a packet to a destination end system, the source include the destination’s IP address in the packet’s header. As with postal addresses. each router has a <strong>forwarding table</strong> that maps destination addresses(or portions of the destination addresses) to that router’s outbound links. When a packet arrives at a router, the router examines the address and searches its forwarding table, using this destination address, to find the appropriate outbound link. The router then directs the packet to this outbound link.</p>\n<p>​    We just learned that a router uses a packet’s destination address to index a forwarding table and determine the appropriate outbound link. But this statement begs yet another question: “How do forwarding tables get set ?”, Are they configured by hand in each and every router, or does the Internet use a more automated procedure? The issue will be studied in depth in after. but we’ll note now that the Internet has a number of special routing protocols that are used to automatically set the forwarding tables.</p>\n<h2 id=\"Circuit-Switching\"><a href=\"#Circuit-Switching\" class=\"headerlink\" title=\"Circuit Switching\"></a>Circuit Switching</h2><p>In circuit-switching networds, the resource needed along a path(buffer link transmission rate) to provide for communication between the end systems are  reserved for the duration of the communication session between the end systems. In the packet-switched networks, these resources are not reserved; a session’s messages use the resources on demand and as a consequence ,may have to wait for access to a  communication link.</p>\n<p>​    Traditional telephone networks are examples of circuit-switched network. Consider what happens when one person want to send information(voice or facsimile) to another over a telephone network. Before the sender can send the information, the network must establish a connection between the sender and the receiver, for which the switches on the path between the sender and receiver maintain connection state for that connection.  In the jargon of telephony, this connection is called a <strong>circuit</strong>. when the network establishes the circuit , it also </p>\n"},{"title":"计算机网络自顶向下有意思的单词","date":"2020-03-03T09:47:04.000Z","_content":"\n\n# Computer Networking A Top-Down Approach\n\n- desirable to : 希望\n- To gain further insight into ... :获得进一步深入的....\n- In this ideal scenario : (idea n:点子，ideal adj: 理想的）\n- Clearly : 明显的\n- among ：在...中 （among  + 时间）\n- no longer ： 不再\n- nonetheless : 尽管如此，然而\n- In particular ： 尤其是，特别是\n- It is a apparent that ....: 这是清晰可见的 .....\n- deplane: 下飞机\n- turn out attention to: ...\n- responsible for : 负责....\n- referred to as : 被称为是....\n- impact .... : 影响...\n- additional: 额外的\n- so-called ： 所谓的，被叫做...的\n- via ： 通过...\n- wreak havoc : 肆虐，造成严重破坏；\n- upcoming： 即将来临，即将发生的\n- In essence: 在本质上\n- the strengths and weaknesses : 长处和短处\n- throughout : 遍及，从始至终， 贯彻\n- namely ： 即 ，也就是说\n- hence: 因此\n- diving into: 跳进，潜进\n- draw on : 利用，借鉴\n- is analogous to : 类似于...\n- It is also referrd to as : 这个也被称为．．．\n- we can think of as : 我们可以认为是....\n- This imformation is needed : 这个消息是必需的....\n- in general : 一般来说，通常...\n- acceptable : 可以接受的\n- lead to : 导致了．．．．\n- result in : 造成，导致．．．\n- albeit : 尽管\n- straightforward : 直接了当的\n- essentially : 实际上，本质上．．\n- on the scene : 在当时．\n- caught(catch的过去式)general public's eye :抓住了公众的眼睛，引起公众的注意．\n- perhap :也许\n- general idea :总体思路，总体大意．．．\n- somewhat : 有些，稍微有点\n- in which case : 在这种情况下　．．\n- elapses: V:（随着时间的）流逝．\n- shortcoming : 缺点．．\n- moreover : 而且，加之，此外，再者．\n- back-to-back :背靠背，连续，一个接着一个．．\n- taking a close look :仔细看看．．\n- first of all : 首先\n- otherwise : 除此之外，否则．\n- leave out : 省略，忽略．．\n- indicate : 表明，表示，显示\n- associated : 有关联的，相关的．．\n- highly recommended : 强烈建议．．\n- thereby : 从而．．\n- substantially : 实质上．．\n- the rest of : 其余的．．\n- neglect : 忽略｀\n- clearly something must be done : 显然．．一定要去做一些事情．．\n- up to date : 现代的，最新的\n- significantly : 显著的．\n- coordinate with sb/sth : 与．．．配合，配合．．．\n- launch : 启动．．发射．．\n- authenticate : 认证\n- principal : 最重要的\n- restriction :限制\n","source":"_posts/计算机网络自顶向下有意思的单词.md","raw":"---\ntitle: 计算机网络自顶向下有意思的单词\ndate: 2020-03-03 17:47:04\ntags: -英语学习 \n\n---\n\n\n# Computer Networking A Top-Down Approach\n\n- desirable to : 希望\n- To gain further insight into ... :获得进一步深入的....\n- In this ideal scenario : (idea n:点子，ideal adj: 理想的）\n- Clearly : 明显的\n- among ：在...中 （among  + 时间）\n- no longer ： 不再\n- nonetheless : 尽管如此，然而\n- In particular ： 尤其是，特别是\n- It is a apparent that ....: 这是清晰可见的 .....\n- deplane: 下飞机\n- turn out attention to: ...\n- responsible for : 负责....\n- referred to as : 被称为是....\n- impact .... : 影响...\n- additional: 额外的\n- so-called ： 所谓的，被叫做...的\n- via ： 通过...\n- wreak havoc : 肆虐，造成严重破坏；\n- upcoming： 即将来临，即将发生的\n- In essence: 在本质上\n- the strengths and weaknesses : 长处和短处\n- throughout : 遍及，从始至终， 贯彻\n- namely ： 即 ，也就是说\n- hence: 因此\n- diving into: 跳进，潜进\n- draw on : 利用，借鉴\n- is analogous to : 类似于...\n- It is also referrd to as : 这个也被称为．．．\n- we can think of as : 我们可以认为是....\n- This imformation is needed : 这个消息是必需的....\n- in general : 一般来说，通常...\n- acceptable : 可以接受的\n- lead to : 导致了．．．．\n- result in : 造成，导致．．．\n- albeit : 尽管\n- straightforward : 直接了当的\n- essentially : 实际上，本质上．．\n- on the scene : 在当时．\n- caught(catch的过去式)general public's eye :抓住了公众的眼睛，引起公众的注意．\n- perhap :也许\n- general idea :总体思路，总体大意．．．\n- somewhat : 有些，稍微有点\n- in which case : 在这种情况下　．．\n- elapses: V:（随着时间的）流逝．\n- shortcoming : 缺点．．\n- moreover : 而且，加之，此外，再者．\n- back-to-back :背靠背，连续，一个接着一个．．\n- taking a close look :仔细看看．．\n- first of all : 首先\n- otherwise : 除此之外，否则．\n- leave out : 省略，忽略．．\n- indicate : 表明，表示，显示\n- associated : 有关联的，相关的．．\n- highly recommended : 强烈建议．．\n- thereby : 从而．．\n- substantially : 实质上．．\n- the rest of : 其余的．．\n- neglect : 忽略｀\n- clearly something must be done : 显然．．一定要去做一些事情．．\n- up to date : 现代的，最新的\n- significantly : 显著的．\n- coordinate with sb/sth : 与．．．配合，配合．．．\n- launch : 启动．．发射．．\n- authenticate : 认证\n- principal : 最重要的\n- restriction :限制\n","slug":"计算机网络自顶向下有意思的单词","published":1,"updated":"2020-03-19T12:31:23.113Z","_id":"ck7knymjc0004tlfw1lwr04yu","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"Computer-Networking-A-Top-Down-Approach\"><a href=\"#Computer-Networking-A-Top-Down-Approach\" class=\"headerlink\" title=\"Computer Networking A Top-Down Approach\"></a>Computer Networking A Top-Down Approach</h1><ul>\n<li>desirable to : 希望</li>\n<li>To gain further insight into … :获得进一步深入的….</li>\n<li>In this ideal scenario : (idea n:点子，ideal adj: 理想的）</li>\n<li>Clearly : 明显的</li>\n<li>among ：在…中 （among  + 时间）</li>\n<li>no longer ： 不再</li>\n<li>nonetheless : 尽管如此，然而</li>\n<li>In particular ： 尤其是，特别是</li>\n<li>It is a apparent that ….: 这是清晰可见的 …..</li>\n<li>deplane: 下飞机</li>\n<li>turn out attention to: …</li>\n<li>responsible for : 负责….</li>\n<li>referred to as : 被称为是….</li>\n<li>impact …. : 影响…</li>\n<li>additional: 额外的</li>\n<li>so-called ： 所谓的，被叫做…的</li>\n<li>via ： 通过…</li>\n<li>wreak havoc : 肆虐，造成严重破坏；</li>\n<li>upcoming： 即将来临，即将发生的</li>\n<li>In essence: 在本质上</li>\n<li>the strengths and weaknesses : 长处和短处</li>\n<li>throughout : 遍及，从始至终， 贯彻</li>\n<li>namely ： 即 ，也就是说</li>\n<li>hence: 因此</li>\n<li>diving into: 跳进，潜进</li>\n<li>draw on : 利用，借鉴</li>\n<li>is analogous to : 类似于…</li>\n<li>It is also referrd to as : 这个也被称为．．．</li>\n<li>we can think of as : 我们可以认为是….</li>\n<li>This imformation is needed : 这个消息是必需的….</li>\n<li>in general : 一般来说，通常…</li>\n<li>acceptable : 可以接受的</li>\n<li>lead to : 导致了．．．．</li>\n<li>result in : 造成，导致．．．</li>\n<li>albeit : 尽管</li>\n<li>straightforward : 直接了当的</li>\n<li>essentially : 实际上，本质上．．</li>\n<li>on the scene : 在当时．</li>\n<li>caught(catch的过去式)general public’s eye :抓住了公众的眼睛，引起公众的注意．</li>\n<li>perhap :也许</li>\n<li>general idea :总体思路，总体大意．．．</li>\n<li>somewhat : 有些，稍微有点</li>\n<li>in which case : 在这种情况下　．．</li>\n<li>elapses: V:（随着时间的）流逝．</li>\n<li>shortcoming : 缺点．．</li>\n<li>moreover : 而且，加之，此外，再者．</li>\n<li>back-to-back :背靠背，连续，一个接着一个．．</li>\n<li>taking a close look :仔细看看．．</li>\n<li>first of all : 首先</li>\n<li>otherwise : 除此之外，否则．</li>\n<li>leave out : 省略，忽略．．</li>\n<li>indicate : 表明，表示，显示</li>\n<li>associated : 有关联的，相关的．．</li>\n<li>highly recommended : 强烈建议．．</li>\n<li>thereby : 从而．．</li>\n<li>substantially : 实质上．．</li>\n<li>the rest of : 其余的．．</li>\n<li>neglect : 忽略｀</li>\n<li>clearly something must be done : 显然．．一定要去做一些事情．．</li>\n<li>up to date : 现代的，最新的</li>\n<li>significantly : 显著的．</li>\n<li>coordinate with sb/sth : 与．．．配合，配合．．．</li>\n<li>launch : 启动．．发射．．</li>\n<li>authenticate : 认证</li>\n<li>principal : 最重要的</li>\n<li>restriction :限制</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Computer-Networking-A-Top-Down-Approach\"><a href=\"#Computer-Networking-A-Top-Down-Approach\" class=\"headerlink\" title=\"Computer Networking A Top-Down Approach\"></a>Computer Networking A Top-Down Approach</h1><ul>\n<li>desirable to : 希望</li>\n<li>To gain further insight into … :获得进一步深入的….</li>\n<li>In this ideal scenario : (idea n:点子，ideal adj: 理想的）</li>\n<li>Clearly : 明显的</li>\n<li>among ：在…中 （among  + 时间）</li>\n<li>no longer ： 不再</li>\n<li>nonetheless : 尽管如此，然而</li>\n<li>In particular ： 尤其是，特别是</li>\n<li>It is a apparent that ….: 这是清晰可见的 …..</li>\n<li>deplane: 下飞机</li>\n<li>turn out attention to: …</li>\n<li>responsible for : 负责….</li>\n<li>referred to as : 被称为是….</li>\n<li>impact …. : 影响…</li>\n<li>additional: 额外的</li>\n<li>so-called ： 所谓的，被叫做…的</li>\n<li>via ： 通过…</li>\n<li>wreak havoc : 肆虐，造成严重破坏；</li>\n<li>upcoming： 即将来临，即将发生的</li>\n<li>In essence: 在本质上</li>\n<li>the strengths and weaknesses : 长处和短处</li>\n<li>throughout : 遍及，从始至终， 贯彻</li>\n<li>namely ： 即 ，也就是说</li>\n<li>hence: 因此</li>\n<li>diving into: 跳进，潜进</li>\n<li>draw on : 利用，借鉴</li>\n<li>is analogous to : 类似于…</li>\n<li>It is also referrd to as : 这个也被称为．．．</li>\n<li>we can think of as : 我们可以认为是….</li>\n<li>This imformation is needed : 这个消息是必需的….</li>\n<li>in general : 一般来说，通常…</li>\n<li>acceptable : 可以接受的</li>\n<li>lead to : 导致了．．．．</li>\n<li>result in : 造成，导致．．．</li>\n<li>albeit : 尽管</li>\n<li>straightforward : 直接了当的</li>\n<li>essentially : 实际上，本质上．．</li>\n<li>on the scene : 在当时．</li>\n<li>caught(catch的过去式)general public’s eye :抓住了公众的眼睛，引起公众的注意．</li>\n<li>perhap :也许</li>\n<li>general idea :总体思路，总体大意．．．</li>\n<li>somewhat : 有些，稍微有点</li>\n<li>in which case : 在这种情况下　．．</li>\n<li>elapses: V:（随着时间的）流逝．</li>\n<li>shortcoming : 缺点．．</li>\n<li>moreover : 而且，加之，此外，再者．</li>\n<li>back-to-back :背靠背，连续，一个接着一个．．</li>\n<li>taking a close look :仔细看看．．</li>\n<li>first of all : 首先</li>\n<li>otherwise : 除此之外，否则．</li>\n<li>leave out : 省略，忽略．．</li>\n<li>indicate : 表明，表示，显示</li>\n<li>associated : 有关联的，相关的．．</li>\n<li>highly recommended : 强烈建议．．</li>\n<li>thereby : 从而．．</li>\n<li>substantially : 实质上．．</li>\n<li>the rest of : 其余的．．</li>\n<li>neglect : 忽略｀</li>\n<li>clearly something must be done : 显然．．一定要去做一些事情．．</li>\n<li>up to date : 现代的，最新的</li>\n<li>significantly : 显著的．</li>\n<li>coordinate with sb/sth : 与．．．配合，配合．．．</li>\n<li>launch : 启动．．发射．．</li>\n<li>authenticate : 认证</li>\n<li>principal : 最重要的</li>\n<li>restriction :限制</li>\n</ul>\n"},{"title":"talk about the Past and Habits in English : USED TO vs WOULD","date":"2020-02-17T06:12:39.467Z","_content":"\n## USED TO\n\nQ: **How to use the \"USED TO\" ?**\n\nA : describes something that was true in the distant past like childhood (but is not true now).So, we can use \"used to\"  without a specific time period. we don't have to say like when I was a kid, when I was in the school. because we use \"used to\" it's often in a situation where we can understand from context. **we also can use ''used to \" for status or condition.** we can say like I used to be a teacher.\n\n**EXAMPLES :**\n\n1. I used to play soccer. [The mean I play soccer long long time age but now I do not play soccer.]\n\n2. He used to hate bananas. \n\n3. I used to be a teacher [use \"Used to \" for statues or condition] [The mean a long time ago  I am a teacher, but now I am  not].\n4. Where did you used to play?\n5. Didn't you used to have a car?\n\n\n\n## WOULD\n\nDescribes :  \"used to \" mean is same for \"would\" . we also use \"would\" to talk  something true before but is not true now. So this is the same. Ｗe tend to use \"Would\" with repeated action. For example something we did every year or every day or every month or every winter. **we will often kind of give more a little more detail when we use would.** We use would when like the general time period or the general situation is known. So this is a big different from \"used to\". and **we can not use \"would\" for status or conditions . we can only talk about actions ,That also is  difference from \"used to\".**\n\n\n\nWhen we make a sentence with \"would\", we typically combine we typically put it together with some information about the time period or another detail .\n\n**FOR EXAMPLE :**\n\n1. When I was a kid , I would collect stamps and put them in a box in my room.\n2. When he was in college, he would go out to crazy parities every weekend.\n3. **When she was little, she would leave her clothes all over the house.[When she was little is a very common sentence we can use.] [ leave her clothes doesn't mean 离开她的衣服, it's mean to forget things like you place something somewhere and you go away,so we use the verb leave to describe that]**\n\n\n\n# Use these together with simple past tense\n\n1. Introduce the concept with \"Used to\" (no specific time period)\n2. Give details (a repeated action) with \"Would\"(specific time period)\n3. End with the past tense statement(memory) or a present tense statement (the situation now).\n\n**EXAMPLE:**\n\n1. I used to live with a really messy roommate. Every week, the guy would leave his dirty dishes in the sink and wait for me to clean them up!  I eventually moved out.\n\n2. My parents used to live around here. When I worked in this neighborhood. I would go to their house every week for dinner, and my mom makes amazing food and my dad is pretty good with barbecue.","source":"_posts/talk-about-the-Past-and-Habits-in-English-USED-TO-vs-WOULD.md","raw":"---\ntitle: 'talk about the Past and Habits in English : USED TO vs WOULD'\ndate: 2020-02-17 14:12:39- \ntags: -英语学习\n\n---\n\n## USED TO\n\nQ: **How to use the \"USED TO\" ?**\n\nA : describes something that was true in the distant past like childhood (but is not true now).So, we can use \"used to\"  without a specific time period. we don't have to say like when I was a kid, when I was in the school. because we use \"used to\" it's often in a situation where we can understand from context. **we also can use ''used to \" for status or condition.** we can say like I used to be a teacher.\n\n**EXAMPLES :**\n\n1. I used to play soccer. [The mean I play soccer long long time age but now I do not play soccer.]\n\n2. He used to hate bananas. \n\n3. I used to be a teacher [use \"Used to \" for statues or condition] [The mean a long time ago  I am a teacher, but now I am  not].\n4. Where did you used to play?\n5. Didn't you used to have a car?\n\n\n\n## WOULD\n\nDescribes :  \"used to \" mean is same for \"would\" . we also use \"would\" to talk  something true before but is not true now. So this is the same. Ｗe tend to use \"Would\" with repeated action. For example something we did every year or every day or every month or every winter. **we will often kind of give more a little more detail when we use would.** We use would when like the general time period or the general situation is known. So this is a big different from \"used to\". and **we can not use \"would\" for status or conditions . we can only talk about actions ,That also is  difference from \"used to\".**\n\n\n\nWhen we make a sentence with \"would\", we typically combine we typically put it together with some information about the time period or another detail .\n\n**FOR EXAMPLE :**\n\n1. When I was a kid , I would collect stamps and put them in a box in my room.\n2. When he was in college, he would go out to crazy parities every weekend.\n3. **When she was little, she would leave her clothes all over the house.[When she was little is a very common sentence we can use.] [ leave her clothes doesn't mean 离开她的衣服, it's mean to forget things like you place something somewhere and you go away,so we use the verb leave to describe that]**\n\n\n\n# Use these together with simple past tense\n\n1. Introduce the concept with \"Used to\" (no specific time period)\n2. Give details (a repeated action) with \"Would\"(specific time period)\n3. End with the past tense statement(memory) or a present tense statement (the situation now).\n\n**EXAMPLE:**\n\n1. I used to live with a really messy roommate. Every week, the guy would leave his dirty dishes in the sink and wait for me to clean them up!  I eventually moved out.\n\n2. My parents used to live around here. When I worked in this neighborhood. I would go to their house every week for dinner, and my mom makes amazing food and my dad is pretty good with barbecue.","slug":"talk-about-the-Past-and-Habits-in-English-USED-TO-vs-WOULD","published":1,"updated":"2020-02-18T12:58:37.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7knymje0005tlfwea510yok","content":"<h2 id=\"USED-TO\"><a href=\"#USED-TO\" class=\"headerlink\" title=\"USED TO\"></a>USED TO</h2><p>Q: <strong>How to use the “USED TO” ?</strong></p>\n<p>A : describes something that was true in the distant past like childhood (but is not true now).So, we can use “used to”  without a specific time period. we don’t have to say like when I was a kid, when I was in the school. because we use “used to” it’s often in a situation where we can understand from context. <strong>we also can use ‘’used to “ for status or condition.</strong> we can say like I used to be a teacher.</p>\n<p><strong>EXAMPLES :</strong></p>\n<ol>\n<li><p>I used to play soccer. [The mean I play soccer long long time age but now I do not play soccer.]</p>\n</li>\n<li><p>He used to hate bananas. </p>\n</li>\n<li><p>I used to be a teacher [use “Used to “ for statues or condition] [The mean a long time ago  I am a teacher, but now I am  not].</p>\n</li>\n<li>Where did you used to play?</li>\n<li>Didn’t you used to have a car?</li>\n</ol>\n<h2 id=\"WOULD\"><a href=\"#WOULD\" class=\"headerlink\" title=\"WOULD\"></a>WOULD</h2><p>Describes :  “used to “ mean is same for “would” . we also use “would” to talk  something true before but is not true now. So this is the same. Ｗe tend to use “Would” with repeated action. For example something we did every year or every day or every month or every winter. <strong>we will often kind of give more a little more detail when we use would.</strong> We use would when like the general time period or the general situation is known. So this is a big different from “used to”. and <strong>we can not use “would” for status or conditions . we can only talk about actions ,That also is  difference from “used to”.</strong></p>\n<p>When we make a sentence with “would”, we typically combine we typically put it together with some information about the time period or another detail .</p>\n<p><strong>FOR EXAMPLE :</strong></p>\n<ol>\n<li>When I was a kid , I would collect stamps and put them in a box in my room.</li>\n<li>When he was in college, he would go out to crazy parities every weekend.</li>\n<li><strong>When she was little, she would leave her clothes all over the house.[When she was little is a very common sentence we can use.] [ leave her clothes doesn’t mean 离开她的衣服, it’s mean to forget things like you place something somewhere and you go away,so we use the verb leave to describe that]</strong></li>\n</ol>\n<h1 id=\"Use-these-together-with-simple-past-tense\"><a href=\"#Use-these-together-with-simple-past-tense\" class=\"headerlink\" title=\"Use these together with simple past tense\"></a>Use these together with simple past tense</h1><ol>\n<li>Introduce the concept with “Used to” (no specific time period)</li>\n<li>Give details (a repeated action) with “Would”(specific time period)</li>\n<li>End with the past tense statement(memory) or a present tense statement (the situation now).</li>\n</ol>\n<p><strong>EXAMPLE:</strong></p>\n<ol>\n<li><p>I used to live with a really messy roommate. Every week, the guy would leave his dirty dishes in the sink and wait for me to clean them up!  I eventually moved out.</p>\n</li>\n<li><p>My parents used to live around here. When I worked in this neighborhood. I would go to their house every week for dinner, and my mom makes amazing food and my dad is pretty good with barbecue.</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"USED-TO\"><a href=\"#USED-TO\" class=\"headerlink\" title=\"USED TO\"></a>USED TO</h2><p>Q: <strong>How to use the “USED TO” ?</strong></p>\n<p>A : describes something that was true in the distant past like childhood (but is not true now).So, we can use “used to”  without a specific time period. we don’t have to say like when I was a kid, when I was in the school. because we use “used to” it’s often in a situation where we can understand from context. <strong>we also can use ‘’used to “ for status or condition.</strong> we can say like I used to be a teacher.</p>\n<p><strong>EXAMPLES :</strong></p>\n<ol>\n<li><p>I used to play soccer. [The mean I play soccer long long time age but now I do not play soccer.]</p>\n</li>\n<li><p>He used to hate bananas. </p>\n</li>\n<li><p>I used to be a teacher [use “Used to “ for statues or condition] [The mean a long time ago  I am a teacher, but now I am  not].</p>\n</li>\n<li>Where did you used to play?</li>\n<li>Didn’t you used to have a car?</li>\n</ol>\n<h2 id=\"WOULD\"><a href=\"#WOULD\" class=\"headerlink\" title=\"WOULD\"></a>WOULD</h2><p>Describes :  “used to “ mean is same for “would” . we also use “would” to talk  something true before but is not true now. So this is the same. Ｗe tend to use “Would” with repeated action. For example something we did every year or every day or every month or every winter. <strong>we will often kind of give more a little more detail when we use would.</strong> We use would when like the general time period or the general situation is known. So this is a big different from “used to”. and <strong>we can not use “would” for status or conditions . we can only talk about actions ,That also is  difference from “used to”.</strong></p>\n<p>When we make a sentence with “would”, we typically combine we typically put it together with some information about the time period or another detail .</p>\n<p><strong>FOR EXAMPLE :</strong></p>\n<ol>\n<li>When I was a kid , I would collect stamps and put them in a box in my room.</li>\n<li>When he was in college, he would go out to crazy parities every weekend.</li>\n<li><strong>When she was little, she would leave her clothes all over the house.[When she was little is a very common sentence we can use.] [ leave her clothes doesn’t mean 离开她的衣服, it’s mean to forget things like you place something somewhere and you go away,so we use the verb leave to describe that]</strong></li>\n</ol>\n<h1 id=\"Use-these-together-with-simple-past-tense\"><a href=\"#Use-these-together-with-simple-past-tense\" class=\"headerlink\" title=\"Use these together with simple past tense\"></a>Use these together with simple past tense</h1><ol>\n<li>Introduce the concept with “Used to” (no specific time period)</li>\n<li>Give details (a repeated action) with “Would”(specific time period)</li>\n<li>End with the past tense statement(memory) or a present tense statement (the situation now).</li>\n</ol>\n<p><strong>EXAMPLE:</strong></p>\n<ol>\n<li><p>I used to live with a really messy roommate. Every week, the guy would leave his dirty dishes in the sink and wait for me to clean them up!  I eventually moved out.</p>\n</li>\n<li><p>My parents used to live around here. When I worked in this neighborhood. I would go to their house every week for dinner, and my mom makes amazing food and my dad is pretty good with barbecue.</p>\n</li>\n</ol>\n"},{"title":"The Network Edge","date":"2020-02-27T06:11:47.000Z","_content":"\n# Access Networks\n\n## Home Access: DSL,Cable,FTTH,Dial-Up,and Satellite\n\n### DSL\n\nToday, the two most prevalent types of broadband residential access are **digital subscriber line (DSL)** and cable. A residence typically obtains DSL Internet access from the same local telephone company(telco) that provides its wried local phone access.Thus, when DSL is used, a customer's telco is also its ISP.\n\nThe residential telephone line carries both data and traditional telephone signals simultaneously, which are encode at difference frequencies:\n\n- A high-speed downstream channel , in the 50 kHz to 1MHz band.\n- A medium-speed upstream channel, in the 4 kHz to 50 kHz band.\n- An ordinary two-way telephone channel, in the 0 to 4 kHz band.\n\nThis approach makes the single DSL link appear as  if there were three separate links, so that a telephone call and an Internet connection can share the DSL link at the same time\n\n![](The Network Edge/2020-02-27 14-34-38 的屏幕截图.png)\n\nOn the customer's side a splitter separates the data and telephone signals arriving to the home and forwards the data signal to the DSL modem. On the telco side ,in the **CO(Central office)**,the DSLAM separates the data and phone signals and sends the data into the Internet. Hundreds or even thousands of households connect to a single DSLAM.\n\n### Cable Internet access\n\nCable Internet access makes use of the cable television company's existing cable company that provides its cable television.\n\nAs illustrated in Figure,fiber optics connect the cable head end to neighborhood-level junctions, from which traditional coaxial cable is then used to reach individual houses and apartments. Each neighborhood junction typically supports 500 to 5000 homes. Because both fiber and coaxial cable are employed in this system, **it is often referred to as hybrid fiber coax(HFC)** \n\n![](Access-Networks/2020-02-27 20-56-20 的屏幕截图.png)\n\n**Cable Internet access requires special modems, called cable modems.** As with a DSL modem, the cable modem is typically an external device and connects to the home PC through an Ethernet port.\n\nAt the cable head end, **the cable modem termination system(CMTS )serves** a similar function as the DSL network's DSLAM - turning the analog signal sent from the cable modems in many downstream homes back into digital format.\n\n### FTTH(fiber to the home)\n\nAlthough DSL and cable network currently represent more than 90 percent of residential broadband access in the united States , an up-and-coming technology that promises even hight speeds is **the deployment of fiber to the home(FTTH).**\n\nAs the name suggests , the FTTH concept is simple-provide an optical fiber path from the CO directly to the home.\n\nThere are several competing technologies for optical distribution from the CO to home. The simplest optical distribution network is called direct fiber,with one fiber leaving the CO for each home. More commonly each fiber leaving the CO(central office) is actually shared by many homes. These are two competing optical-distribution network architectures that perform this splitting : **active optical networks (AONs) and passive optical networks(PONs).**\n\nHere, we briefly discuss PON, which is used in Verizon's FIOS service.\n\n![](The Network Edge/2020-02-27 21-43-25 的屏幕截图.png)\n\nEach home has an optical network terminator(ONT),which is connected by dedicated optical fiber(Optical fibers) to a neighborhood splitter. The splitter combines a number of homes(typically less than 100) onto a single, shared optical fiber,which connects to an **optical line terminator(OLT)** in the telco's CO. The OLT providing conversion between optical line and electrical signals, connects to the Internet via a telco router. In the home, users connect a home router(typically a wireless router) to the ONT and access the Internet via this home router.\n\n### Satellite\n\nIn location where DSL, cable and FTTH are not available, a satellite link can be used to connect a residence to the Internet at speed of more than 1 Mbps; StarBand and HughesNet are two such satellite access providers.\n\n### Dial-up access\n\nDial-up access over traditional phone lines is based on the same model as DSL - a home modem connect over phone line to a modem in the ISP. Compared with DSL and other broadband access networks , dial-up access is excruciatingly slow at 56 kbps.\n\n\n\n## Access in the Enterprise(and the home): Ethernet and WiFi\n\nOn corporate and university campuses and increasingly in the home setting , **a local area network(LAN)** is used to connect an end system to the edge router. Although there are many types of LAN technologies, Ethernet is by far the most prevalent access technology in corporate, university and home networks. As shown in the Figure. Ethernet users use twisted-pair copper wire to connect to an Ethernet switch.\n\n![](The Network Edge/2020-02-27 23-49-06 的屏幕截图.png)\n\nThe Ethernet switch or a network of such interconnected switch is then into the larger Internet. With Ethernet access, users typically have 100 Mbps access to the Ethernet switch, whereas servers may have 1 Gbps or even 10 Gbps access.\n\n\n\nIncreasingly, however people are accessing the Internet wirelessly from laptops, smartphones, tablets and other devices. In the a wireless LAN setting, wireless users transmit/receive packets to/from an access point that is connected into the enterprise's networks,which in turn is connected to the wired Internet. A wireless LAN user must typically be within a few ten of meters of the access point. Wireless LAN access based on IEEE 802.11 technology, more colloquially known as WiFi.(A wireless LAN user must typically be within a few ten of meters of the access point.)\n\nMany home combine broadband residential access(that is cable modem or DSL) with these inexpensive wireless LAN technology to create powerful home networks. Figure shows a typically home networks. This home network consist of roaming laptop as well as wired PC; a base station(the wireless access point),which communicates with the wireless PC; a cable modem providing broadband access to the Internet; and a router,which interconnects the base station and the stationary PC with the cable modem.\n\n![](Access-Networks/2020-02-28 00-21-20 的屏幕截图.png)\n\n## Wide-Area Wireless Access: 3G and LTE\n\nIncreasingly, devices such as iphone, Blackberrys and Android devices are being used to send email, surf the Web, Tweet,and download music while on the run. These devices employ the same wireless infrastructure used for cellular telephony to send/receive packets through a base station that is operated by cellular network provider. Unlike WiFi , a user need only be within a few tens of kilometers(as opposed to a few tens of meters) of the base station.\n\nTelecommunications companies have made enormous investments in so-called third-generation(3G) wireless,which provides packet-switched wide-area wireless Internet access at speeds in excess of 1 Mbps, But even higher-speed wide-area accesss technologies - fourth-generation(4G) of wide-area wireless networks are alread being deployed. LTF(Long-Term Evolution) has its root in 3G technology and can potentially achieve rates in excess of 10 Mbps. LTF downstream rates of many tens of Mbps have been reported in commercial deployments.\n\n\n\n# Physical Media\n\nPhysical media fall into two categories: **guided media** and **unguided media** with guided media, the waves are guided along a solid medium, such as a fiber-optic cable, a twisted-pair copper wire or a coaxial cable. with unguided media, the waves propagate in the atmosphere and in outer space, such as in a wireless LAN or a digital satellite channel.\n\n## Twisted-Pair Copper Wire\n\nThe least expensive and most commonly used guided transmission medium is twisted-pair copper wire. In fact, more than 99 percent of the wired connection from telephone handset to the local telephone switch use twisted-pair copper wire. Twisted pair consist of two insulated copper wires, each about 1 mm thick, arranged in a regular spiral patten. The wires are twisted together to reduce the electrical interference from similar pairs close by. Typically a number of pairs are bundled together in a cable by wrapping the pairs in protective shield. **Unshielded twisted pair(UTP)** is commonly used for computer networks within a building  ,that is for LAN. Data rates for LANs using twisted pair today range from 10 Mbps to 10 Gpbs. The data rates that can be achieve depend on the thickness of the wire and the distance between transmitter and receiver.\n\n\n\n## Coaxial cable\n\nCoaxial cable is quite common in cable television system. As we saw earlier, cable television system have recently been couple with cable modems to provide residential users with Internet access at rate of tens of Mbps. In cable television and cable Internet access, the transmitter shifs the digital signal to a specific frequency band, and resulting analog signal is send from the transmitter to one or more receivers. Coaxial cable can be used as a guided shared medium. Specifically , a number of end systems can be connected directly to the cable, with each of the end systems receiving whatever is send by the other end system.\n\n\n\n## Fiber Optics\n\nAn optical fiber is a thin, flexible medium that conducts pulses of light, with each pulse representing a bit. A single optical fiber can support tremendous bit rates, up to ten or even hundreds of gigabits per second. They are immune to electromagnetic interference , have  very low signal attenuation up to 100 kilometers and are very hard to tap. There characteristics have made fiber optics the preferred long-haul guided transmission media, particularly for overseas links. Many of the long-distance telephone networks in the united states and elsewhere now use fiber optics exclusively. However the high cost of optical devices- such as transmitters receivers and switches - has hindered their deployment for short-haul transport, such as in a LAN or into the home in a residential access network.\n\n\n\n## Terrestrial Radio Channels\n\nRadio channels carry signal in the electromagnetic spectrum. They require no physical wire to be installed can penetrate walls, provide connectivity to mobile user, and can potentially carry a signal for long distances. The characteristics of a radio channel depend on significantly on the propagation environment and the distance over which a signal is to be carried.\n\nTerrestrial radio channels can be broadly classified into three groups: those that operate over very short distance(e.g : with one or two meters); those that operate in local areas, typically spanning from ten to a few hundred meters; and those that operate in the wide area spanning tens of kilometers. Personal devices such as wireless headsets, keyboards and medical devices over short distances; the wireless LAN technologies use local-area radio channels; the cellular access technologies use wide-area radio channels.\n\n\n\n## Satellite Radio Channels\n\nA communications satellite links two or more Earth-based microwave transmitter/receivers, known as ground stations. The satellite receives transmissions on one frequency band, regenerates the signal using a repeater and transmits the signal on another frequency. two type of satellite are used in communications: **geostationary satellites and low-earth orbiting(LEO) satellite.**\n\nGeostationary satellites permanently remain above the same spot on Earth. This stationary presence achieve by placing the satellite in orbit at 36000 kilometers above Earth's surface. This huge distance from ground station through satellite back to ground station introduces a substantial signal propagation delay of 280 milliseconds. Nevertheless, satellite links, which can operate at speed of hundreds of Mbps , are often used in areas without access to DSL or cable-based Internet.\n\nLEO satellites are placed much closer to Earth and do not remain permanently above one spot on Earth. They rotate around Earth(just as the moon does) and may communicate with each other as well as ground stations. To provide continuous coverage to an area , many satellite need to be place in orbit. there are currently may low- altitude communications system in development. LEO satellite technology may be used for Internet access sometime in the future.","source":"_posts/The Network Edge.md","raw":"---\ntitle: The Network Edge\ndate: 2020-02-27 14:11:47\ntags: -Computer Network A Top-Down Approach\n\n\n\n---\n\n# Access Networks\n\n## Home Access: DSL,Cable,FTTH,Dial-Up,and Satellite\n\n### DSL\n\nToday, the two most prevalent types of broadband residential access are **digital subscriber line (DSL)** and cable. A residence typically obtains DSL Internet access from the same local telephone company(telco) that provides its wried local phone access.Thus, when DSL is used, a customer's telco is also its ISP.\n\nThe residential telephone line carries both data and traditional telephone signals simultaneously, which are encode at difference frequencies:\n\n- A high-speed downstream channel , in the 50 kHz to 1MHz band.\n- A medium-speed upstream channel, in the 4 kHz to 50 kHz band.\n- An ordinary two-way telephone channel, in the 0 to 4 kHz band.\n\nThis approach makes the single DSL link appear as  if there were three separate links, so that a telephone call and an Internet connection can share the DSL link at the same time\n\n![](The Network Edge/2020-02-27 14-34-38 的屏幕截图.png)\n\nOn the customer's side a splitter separates the data and telephone signals arriving to the home and forwards the data signal to the DSL modem. On the telco side ,in the **CO(Central office)**,the DSLAM separates the data and phone signals and sends the data into the Internet. Hundreds or even thousands of households connect to a single DSLAM.\n\n### Cable Internet access\n\nCable Internet access makes use of the cable television company's existing cable company that provides its cable television.\n\nAs illustrated in Figure,fiber optics connect the cable head end to neighborhood-level junctions, from which traditional coaxial cable is then used to reach individual houses and apartments. Each neighborhood junction typically supports 500 to 5000 homes. Because both fiber and coaxial cable are employed in this system, **it is often referred to as hybrid fiber coax(HFC)** \n\n![](Access-Networks/2020-02-27 20-56-20 的屏幕截图.png)\n\n**Cable Internet access requires special modems, called cable modems.** As with a DSL modem, the cable modem is typically an external device and connects to the home PC through an Ethernet port.\n\nAt the cable head end, **the cable modem termination system(CMTS )serves** a similar function as the DSL network's DSLAM - turning the analog signal sent from the cable modems in many downstream homes back into digital format.\n\n### FTTH(fiber to the home)\n\nAlthough DSL and cable network currently represent more than 90 percent of residential broadband access in the united States , an up-and-coming technology that promises even hight speeds is **the deployment of fiber to the home(FTTH).**\n\nAs the name suggests , the FTTH concept is simple-provide an optical fiber path from the CO directly to the home.\n\nThere are several competing technologies for optical distribution from the CO to home. The simplest optical distribution network is called direct fiber,with one fiber leaving the CO for each home. More commonly each fiber leaving the CO(central office) is actually shared by many homes. These are two competing optical-distribution network architectures that perform this splitting : **active optical networks (AONs) and passive optical networks(PONs).**\n\nHere, we briefly discuss PON, which is used in Verizon's FIOS service.\n\n![](The Network Edge/2020-02-27 21-43-25 的屏幕截图.png)\n\nEach home has an optical network terminator(ONT),which is connected by dedicated optical fiber(Optical fibers) to a neighborhood splitter. The splitter combines a number of homes(typically less than 100) onto a single, shared optical fiber,which connects to an **optical line terminator(OLT)** in the telco's CO. The OLT providing conversion between optical line and electrical signals, connects to the Internet via a telco router. In the home, users connect a home router(typically a wireless router) to the ONT and access the Internet via this home router.\n\n### Satellite\n\nIn location where DSL, cable and FTTH are not available, a satellite link can be used to connect a residence to the Internet at speed of more than 1 Mbps; StarBand and HughesNet are two such satellite access providers.\n\n### Dial-up access\n\nDial-up access over traditional phone lines is based on the same model as DSL - a home modem connect over phone line to a modem in the ISP. Compared with DSL and other broadband access networks , dial-up access is excruciatingly slow at 56 kbps.\n\n\n\n## Access in the Enterprise(and the home): Ethernet and WiFi\n\nOn corporate and university campuses and increasingly in the home setting , **a local area network(LAN)** is used to connect an end system to the edge router. Although there are many types of LAN technologies, Ethernet is by far the most prevalent access technology in corporate, university and home networks. As shown in the Figure. Ethernet users use twisted-pair copper wire to connect to an Ethernet switch.\n\n![](The Network Edge/2020-02-27 23-49-06 的屏幕截图.png)\n\nThe Ethernet switch or a network of such interconnected switch is then into the larger Internet. With Ethernet access, users typically have 100 Mbps access to the Ethernet switch, whereas servers may have 1 Gbps or even 10 Gbps access.\n\n\n\nIncreasingly, however people are accessing the Internet wirelessly from laptops, smartphones, tablets and other devices. In the a wireless LAN setting, wireless users transmit/receive packets to/from an access point that is connected into the enterprise's networks,which in turn is connected to the wired Internet. A wireless LAN user must typically be within a few ten of meters of the access point. Wireless LAN access based on IEEE 802.11 technology, more colloquially known as WiFi.(A wireless LAN user must typically be within a few ten of meters of the access point.)\n\nMany home combine broadband residential access(that is cable modem or DSL) with these inexpensive wireless LAN technology to create powerful home networks. Figure shows a typically home networks. This home network consist of roaming laptop as well as wired PC; a base station(the wireless access point),which communicates with the wireless PC; a cable modem providing broadband access to the Internet; and a router,which interconnects the base station and the stationary PC with the cable modem.\n\n![](Access-Networks/2020-02-28 00-21-20 的屏幕截图.png)\n\n## Wide-Area Wireless Access: 3G and LTE\n\nIncreasingly, devices such as iphone, Blackberrys and Android devices are being used to send email, surf the Web, Tweet,and download music while on the run. These devices employ the same wireless infrastructure used for cellular telephony to send/receive packets through a base station that is operated by cellular network provider. Unlike WiFi , a user need only be within a few tens of kilometers(as opposed to a few tens of meters) of the base station.\n\nTelecommunications companies have made enormous investments in so-called third-generation(3G) wireless,which provides packet-switched wide-area wireless Internet access at speeds in excess of 1 Mbps, But even higher-speed wide-area accesss technologies - fourth-generation(4G) of wide-area wireless networks are alread being deployed. LTF(Long-Term Evolution) has its root in 3G technology and can potentially achieve rates in excess of 10 Mbps. LTF downstream rates of many tens of Mbps have been reported in commercial deployments.\n\n\n\n# Physical Media\n\nPhysical media fall into two categories: **guided media** and **unguided media** with guided media, the waves are guided along a solid medium, such as a fiber-optic cable, a twisted-pair copper wire or a coaxial cable. with unguided media, the waves propagate in the atmosphere and in outer space, such as in a wireless LAN or a digital satellite channel.\n\n## Twisted-Pair Copper Wire\n\nThe least expensive and most commonly used guided transmission medium is twisted-pair copper wire. In fact, more than 99 percent of the wired connection from telephone handset to the local telephone switch use twisted-pair copper wire. Twisted pair consist of two insulated copper wires, each about 1 mm thick, arranged in a regular spiral patten. The wires are twisted together to reduce the electrical interference from similar pairs close by. Typically a number of pairs are bundled together in a cable by wrapping the pairs in protective shield. **Unshielded twisted pair(UTP)** is commonly used for computer networks within a building  ,that is for LAN. Data rates for LANs using twisted pair today range from 10 Mbps to 10 Gpbs. The data rates that can be achieve depend on the thickness of the wire and the distance between transmitter and receiver.\n\n\n\n## Coaxial cable\n\nCoaxial cable is quite common in cable television system. As we saw earlier, cable television system have recently been couple with cable modems to provide residential users with Internet access at rate of tens of Mbps. In cable television and cable Internet access, the transmitter shifs the digital signal to a specific frequency band, and resulting analog signal is send from the transmitter to one or more receivers. Coaxial cable can be used as a guided shared medium. Specifically , a number of end systems can be connected directly to the cable, with each of the end systems receiving whatever is send by the other end system.\n\n\n\n## Fiber Optics\n\nAn optical fiber is a thin, flexible medium that conducts pulses of light, with each pulse representing a bit. A single optical fiber can support tremendous bit rates, up to ten or even hundreds of gigabits per second. They are immune to electromagnetic interference , have  very low signal attenuation up to 100 kilometers and are very hard to tap. There characteristics have made fiber optics the preferred long-haul guided transmission media, particularly for overseas links. Many of the long-distance telephone networks in the united states and elsewhere now use fiber optics exclusively. However the high cost of optical devices- such as transmitters receivers and switches - has hindered their deployment for short-haul transport, such as in a LAN or into the home in a residential access network.\n\n\n\n## Terrestrial Radio Channels\n\nRadio channels carry signal in the electromagnetic spectrum. They require no physical wire to be installed can penetrate walls, provide connectivity to mobile user, and can potentially carry a signal for long distances. The characteristics of a radio channel depend on significantly on the propagation environment and the distance over which a signal is to be carried.\n\nTerrestrial radio channels can be broadly classified into three groups: those that operate over very short distance(e.g : with one or two meters); those that operate in local areas, typically spanning from ten to a few hundred meters; and those that operate in the wide area spanning tens of kilometers. Personal devices such as wireless headsets, keyboards and medical devices over short distances; the wireless LAN technologies use local-area radio channels; the cellular access technologies use wide-area radio channels.\n\n\n\n## Satellite Radio Channels\n\nA communications satellite links two or more Earth-based microwave transmitter/receivers, known as ground stations. The satellite receives transmissions on one frequency band, regenerates the signal using a repeater and transmits the signal on another frequency. two type of satellite are used in communications: **geostationary satellites and low-earth orbiting(LEO) satellite.**\n\nGeostationary satellites permanently remain above the same spot on Earth. This stationary presence achieve by placing the satellite in orbit at 36000 kilometers above Earth's surface. This huge distance from ground station through satellite back to ground station introduces a substantial signal propagation delay of 280 milliseconds. Nevertheless, satellite links, which can operate at speed of hundreds of Mbps , are often used in areas without access to DSL or cable-based Internet.\n\nLEO satellites are placed much closer to Earth and do not remain permanently above one spot on Earth. They rotate around Earth(just as the moon does) and may communicate with each other as well as ground stations. To provide continuous coverage to an area , many satellite need to be place in orbit. there are currently may low- altitude communications system in development. LEO satellite technology may be used for Internet access sometime in the future.","slug":"The Network Edge","published":1,"updated":"2020-02-28T08:28:51.437Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7knymkv000dtlfw04fm6sm8","content":"<h1 id=\"Access-Networks\"><a href=\"#Access-Networks\" class=\"headerlink\" title=\"Access Networks\"></a>Access Networks</h1><h2 id=\"Home-Access-DSL-Cable-FTTH-Dial-Up-and-Satellite\"><a href=\"#Home-Access-DSL-Cable-FTTH-Dial-Up-and-Satellite\" class=\"headerlink\" title=\"Home Access: DSL,Cable,FTTH,Dial-Up,and Satellite\"></a>Home Access: DSL,Cable,FTTH,Dial-Up,and Satellite</h2><h3 id=\"DSL\"><a href=\"#DSL\" class=\"headerlink\" title=\"DSL\"></a>DSL</h3><p>Today, the two most prevalent types of broadband residential access are <strong>digital subscriber line (DSL)</strong> and cable. A residence typically obtains DSL Internet access from the same local telephone company(telco) that provides its wried local phone access.Thus, when DSL is used, a customer’s telco is also its ISP.</p>\n<p>The residential telephone line carries both data and traditional telephone signals simultaneously, which are encode at difference frequencies:</p>\n<ul>\n<li>A high-speed downstream channel , in the 50 kHz to 1MHz band.</li>\n<li>A medium-speed upstream channel, in the 4 kHz to 50 kHz band.</li>\n<li>An ordinary two-way telephone channel, in the 0 to 4 kHz band.</li>\n</ul>\n<p>This approach makes the single DSL link appear as  if there were three separate links, so that a telephone call and an Internet connection can share the DSL link at the same time</p>\n<p><img src=\"/2020/02/27/The%20Network%20Edge/2020-02-27 14-34-38 的屏幕截图.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>On the customer’s side a splitter separates the data and telephone signals arriving to the home and forwards the data signal to the DSL modem. On the telco side ,in the <strong>CO(Central office)</strong>,the DSLAM separates the data and phone signals and sends the data into the Internet. Hundreds or even thousands of households connect to a single DSLAM.</p>\n<h3 id=\"Cable-Internet-access\"><a href=\"#Cable-Internet-access\" class=\"headerlink\" title=\"Cable Internet access\"></a>Cable Internet access</h3><p>Cable Internet access makes use of the cable television company’s existing cable company that provides its cable television.</p>\n<p>As illustrated in Figure,fiber optics connect the cable head end to neighborhood-level junctions, from which traditional coaxial cable is then used to reach individual houses and apartments. Each neighborhood junction typically supports 500 to 5000 homes. Because both fiber and coaxial cable are employed in this system, <strong>it is often referred to as hybrid fiber coax(HFC)</strong> </p>\n<p><img src=\"/2020/02/27/The%20Network%20Edge/2020-02-27 20-56-20 的屏幕截图.png\" srcset=\"/img/loading.gif\" alt></p>\n<p><strong>Cable Internet access requires special modems, called cable modems.</strong> As with a DSL modem, the cable modem is typically an external device and connects to the home PC through an Ethernet port.</p>\n<p>At the cable head end, <strong>the cable modem termination system(CMTS )serves</strong> a similar function as the DSL network’s DSLAM - turning the analog signal sent from the cable modems in many downstream homes back into digital format.</p>\n<h3 id=\"FTTH-fiber-to-the-home\"><a href=\"#FTTH-fiber-to-the-home\" class=\"headerlink\" title=\"FTTH(fiber to the home)\"></a>FTTH(fiber to the home)</h3><p>Although DSL and cable network currently represent more than 90 percent of residential broadband access in the united States , an up-and-coming technology that promises even hight speeds is <strong>the deployment of fiber to the home(FTTH).</strong></p>\n<p>As the name suggests , the FTTH concept is simple-provide an optical fiber path from the CO directly to the home.</p>\n<p>There are several competing technologies for optical distribution from the CO to home. The simplest optical distribution network is called direct fiber,with one fiber leaving the CO for each home. More commonly each fiber leaving the CO(central office) is actually shared by many homes. These are two competing optical-distribution network architectures that perform this splitting : <strong>active optical networks (AONs) and passive optical networks(PONs).</strong></p>\n<p>Here, we briefly discuss PON, which is used in Verizon’s FIOS service.</p>\n<p><img src=\"/2020/02/27/The%20Network%20Edge/2020-02-27 21-43-25 的屏幕截图.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>Each home has an optical network terminator(ONT),which is connected by dedicated optical fiber(Optical fibers) to a neighborhood splitter. The splitter combines a number of homes(typically less than 100) onto a single, shared optical fiber,which connects to an <strong>optical line terminator(OLT)</strong> in the telco’s CO. The OLT providing conversion between optical line and electrical signals, connects to the Internet via a telco router. In the home, users connect a home router(typically a wireless router) to the ONT and access the Internet via this home router.</p>\n<h3 id=\"Satellite\"><a href=\"#Satellite\" class=\"headerlink\" title=\"Satellite\"></a>Satellite</h3><p>In location where DSL, cable and FTTH are not available, a satellite link can be used to connect a residence to the Internet at speed of more than 1 Mbps; StarBand and HughesNet are two such satellite access providers.</p>\n<h3 id=\"Dial-up-access\"><a href=\"#Dial-up-access\" class=\"headerlink\" title=\"Dial-up access\"></a>Dial-up access</h3><p>Dial-up access over traditional phone lines is based on the same model as DSL - a home modem connect over phone line to a modem in the ISP. Compared with DSL and other broadband access networks , dial-up access is excruciatingly slow at 56 kbps.</p>\n<h2 id=\"Access-in-the-Enterprise-and-the-home-Ethernet-and-WiFi\"><a href=\"#Access-in-the-Enterprise-and-the-home-Ethernet-and-WiFi\" class=\"headerlink\" title=\"Access in the Enterprise(and the home): Ethernet and WiFi\"></a>Access in the Enterprise(and the home): Ethernet and WiFi</h2><p>On corporate and university campuses and increasingly in the home setting , <strong>a local area network(LAN)</strong> is used to connect an end system to the edge router. Although there are many types of LAN technologies, Ethernet is by far the most prevalent access technology in corporate, university and home networks. As shown in the Figure. Ethernet users use twisted-pair copper wire to connect to an Ethernet switch.</p>\n<p><img src=\"/2020/02/27/The%20Network%20Edge/2020-02-27 23-49-06 的屏幕截图.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>The Ethernet switch or a network of such interconnected switch is then into the larger Internet. With Ethernet access, users typically have 100 Mbps access to the Ethernet switch, whereas servers may have 1 Gbps or even 10 Gbps access.</p>\n<p>Increasingly, however people are accessing the Internet wirelessly from laptops, smartphones, tablets and other devices. In the a wireless LAN setting, wireless users transmit/receive packets to/from an access point that is connected into the enterprise’s networks,which in turn is connected to the wired Internet. A wireless LAN user must typically be within a few ten of meters of the access point. Wireless LAN access based on IEEE 802.11 technology, more colloquially known as WiFi.(A wireless LAN user must typically be within a few ten of meters of the access point.)</p>\n<p>Many home combine broadband residential access(that is cable modem or DSL) with these inexpensive wireless LAN technology to create powerful home networks. Figure shows a typically home networks. This home network consist of roaming laptop as well as wired PC; a base station(the wireless access point),which communicates with the wireless PC; a cable modem providing broadband access to the Internet; and a router,which interconnects the base station and the stationary PC with the cable modem.</p>\n<p><img src=\"/2020/02/27/The%20Network%20Edge/2020-02-28 00-21-20 的屏幕截图.png\" srcset=\"/img/loading.gif\" alt></p>\n<h2 id=\"Wide-Area-Wireless-Access-3G-and-LTE\"><a href=\"#Wide-Area-Wireless-Access-3G-and-LTE\" class=\"headerlink\" title=\"Wide-Area Wireless Access: 3G and LTE\"></a>Wide-Area Wireless Access: 3G and LTE</h2><p>Increasingly, devices such as iphone, Blackberrys and Android devices are being used to send email, surf the Web, Tweet,and download music while on the run. These devices employ the same wireless infrastructure used for cellular telephony to send/receive packets through a base station that is operated by cellular network provider. Unlike WiFi , a user need only be within a few tens of kilometers(as opposed to a few tens of meters) of the base station.</p>\n<p>Telecommunications companies have made enormous investments in so-called third-generation(3G) wireless,which provides packet-switched wide-area wireless Internet access at speeds in excess of 1 Mbps, But even higher-speed wide-area accesss technologies - fourth-generation(4G) of wide-area wireless networks are alread being deployed. LTF(Long-Term Evolution) has its root in 3G technology and can potentially achieve rates in excess of 10 Mbps. LTF downstream rates of many tens of Mbps have been reported in commercial deployments.</p>\n<h1 id=\"Physical-Media\"><a href=\"#Physical-Media\" class=\"headerlink\" title=\"Physical Media\"></a>Physical Media</h1><p>Physical media fall into two categories: <strong>guided media</strong> and <strong>unguided media</strong> with guided media, the waves are guided along a solid medium, such as a fiber-optic cable, a twisted-pair copper wire or a coaxial cable. with unguided media, the waves propagate in the atmosphere and in outer space, such as in a wireless LAN or a digital satellite channel.</p>\n<h2 id=\"Twisted-Pair-Copper-Wire\"><a href=\"#Twisted-Pair-Copper-Wire\" class=\"headerlink\" title=\"Twisted-Pair Copper Wire\"></a>Twisted-Pair Copper Wire</h2><p>The least expensive and most commonly used guided transmission medium is twisted-pair copper wire. In fact, more than 99 percent of the wired connection from telephone handset to the local telephone switch use twisted-pair copper wire. Twisted pair consist of two insulated copper wires, each about 1 mm thick, arranged in a regular spiral patten. The wires are twisted together to reduce the electrical interference from similar pairs close by. Typically a number of pairs are bundled together in a cable by wrapping the pairs in protective shield. <strong>Unshielded twisted pair(UTP)</strong> is commonly used for computer networks within a building  ,that is for LAN. Data rates for LANs using twisted pair today range from 10 Mbps to 10 Gpbs. The data rates that can be achieve depend on the thickness of the wire and the distance between transmitter and receiver.</p>\n<h2 id=\"Coaxial-cable\"><a href=\"#Coaxial-cable\" class=\"headerlink\" title=\"Coaxial cable\"></a>Coaxial cable</h2><p>Coaxial cable is quite common in cable television system. As we saw earlier, cable television system have recently been couple with cable modems to provide residential users with Internet access at rate of tens of Mbps. In cable television and cable Internet access, the transmitter shifs the digital signal to a specific frequency band, and resulting analog signal is send from the transmitter to one or more receivers. Coaxial cable can be used as a guided shared medium. Specifically , a number of end systems can be connected directly to the cable, with each of the end systems receiving whatever is send by the other end system.</p>\n<h2 id=\"Fiber-Optics\"><a href=\"#Fiber-Optics\" class=\"headerlink\" title=\"Fiber Optics\"></a>Fiber Optics</h2><p>An optical fiber is a thin, flexible medium that conducts pulses of light, with each pulse representing a bit. A single optical fiber can support tremendous bit rates, up to ten or even hundreds of gigabits per second. They are immune to electromagnetic interference , have  very low signal attenuation up to 100 kilometers and are very hard to tap. There characteristics have made fiber optics the preferred long-haul guided transmission media, particularly for overseas links. Many of the long-distance telephone networks in the united states and elsewhere now use fiber optics exclusively. However the high cost of optical devices- such as transmitters receivers and switches - has hindered their deployment for short-haul transport, such as in a LAN or into the home in a residential access network.</p>\n<h2 id=\"Terrestrial-Radio-Channels\"><a href=\"#Terrestrial-Radio-Channels\" class=\"headerlink\" title=\"Terrestrial Radio Channels\"></a>Terrestrial Radio Channels</h2><p>Radio channels carry signal in the electromagnetic spectrum. They require no physical wire to be installed can penetrate walls, provide connectivity to mobile user, and can potentially carry a signal for long distances. The characteristics of a radio channel depend on significantly on the propagation environment and the distance over which a signal is to be carried.</p>\n<p>Terrestrial radio channels can be broadly classified into three groups: those that operate over very short distance(e.g : with one or two meters); those that operate in local areas, typically spanning from ten to a few hundred meters; and those that operate in the wide area spanning tens of kilometers. Personal devices such as wireless headsets, keyboards and medical devices over short distances; the wireless LAN technologies use local-area radio channels; the cellular access technologies use wide-area radio channels.</p>\n<h2 id=\"Satellite-Radio-Channels\"><a href=\"#Satellite-Radio-Channels\" class=\"headerlink\" title=\"Satellite Radio Channels\"></a>Satellite Radio Channels</h2><p>A communications satellite links two or more Earth-based microwave transmitter/receivers, known as ground stations. The satellite receives transmissions on one frequency band, regenerates the signal using a repeater and transmits the signal on another frequency. two type of satellite are used in communications: <strong>geostationary satellites and low-earth orbiting(LEO) satellite.</strong></p>\n<p>Geostationary satellites permanently remain above the same spot on Earth. This stationary presence achieve by placing the satellite in orbit at 36000 kilometers above Earth’s surface. This huge distance from ground station through satellite back to ground station introduces a substantial signal propagation delay of 280 milliseconds. Nevertheless, satellite links, which can operate at speed of hundreds of Mbps , are often used in areas without access to DSL or cable-based Internet.</p>\n<p>LEO satellites are placed much closer to Earth and do not remain permanently above one spot on Earth. They rotate around Earth(just as the moon does) and may communicate with each other as well as ground stations. To provide continuous coverage to an area , many satellite need to be place in orbit. there are currently may low- altitude communications system in development. LEO satellite technology may be used for Internet access sometime in the future.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Access-Networks\"><a href=\"#Access-Networks\" class=\"headerlink\" title=\"Access Networks\"></a>Access Networks</h1><h2 id=\"Home-Access-DSL-Cable-FTTH-Dial-Up-and-Satellite\"><a href=\"#Home-Access-DSL-Cable-FTTH-Dial-Up-and-Satellite\" class=\"headerlink\" title=\"Home Access: DSL,Cable,FTTH,Dial-Up,and Satellite\"></a>Home Access: DSL,Cable,FTTH,Dial-Up,and Satellite</h2><h3 id=\"DSL\"><a href=\"#DSL\" class=\"headerlink\" title=\"DSL\"></a>DSL</h3><p>Today, the two most prevalent types of broadband residential access are <strong>digital subscriber line (DSL)</strong> and cable. A residence typically obtains DSL Internet access from the same local telephone company(telco) that provides its wried local phone access.Thus, when DSL is used, a customer’s telco is also its ISP.</p>\n<p>The residential telephone line carries both data and traditional telephone signals simultaneously, which are encode at difference frequencies:</p>\n<ul>\n<li>A high-speed downstream channel , in the 50 kHz to 1MHz band.</li>\n<li>A medium-speed upstream channel, in the 4 kHz to 50 kHz band.</li>\n<li>An ordinary two-way telephone channel, in the 0 to 4 kHz band.</li>\n</ul>\n<p>This approach makes the single DSL link appear as  if there were three separate links, so that a telephone call and an Internet connection can share the DSL link at the same time</p>\n<p><img src=\"/2020/02/27/The%20Network%20Edge/2020-02-27 14-34-38 的屏幕截图.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>On the customer’s side a splitter separates the data and telephone signals arriving to the home and forwards the data signal to the DSL modem. On the telco side ,in the <strong>CO(Central office)</strong>,the DSLAM separates the data and phone signals and sends the data into the Internet. Hundreds or even thousands of households connect to a single DSLAM.</p>\n<h3 id=\"Cable-Internet-access\"><a href=\"#Cable-Internet-access\" class=\"headerlink\" title=\"Cable Internet access\"></a>Cable Internet access</h3><p>Cable Internet access makes use of the cable television company’s existing cable company that provides its cable television.</p>\n<p>As illustrated in Figure,fiber optics connect the cable head end to neighborhood-level junctions, from which traditional coaxial cable is then used to reach individual houses and apartments. Each neighborhood junction typically supports 500 to 5000 homes. Because both fiber and coaxial cable are employed in this system, <strong>it is often referred to as hybrid fiber coax(HFC)</strong> </p>\n<p><img src=\"/2020/02/27/The%20Network%20Edge/2020-02-27 20-56-20 的屏幕截图.png\" srcset=\"/img/loading.gif\" alt></p>\n<p><strong>Cable Internet access requires special modems, called cable modems.</strong> As with a DSL modem, the cable modem is typically an external device and connects to the home PC through an Ethernet port.</p>\n<p>At the cable head end, <strong>the cable modem termination system(CMTS )serves</strong> a similar function as the DSL network’s DSLAM - turning the analog signal sent from the cable modems in many downstream homes back into digital format.</p>\n<h3 id=\"FTTH-fiber-to-the-home\"><a href=\"#FTTH-fiber-to-the-home\" class=\"headerlink\" title=\"FTTH(fiber to the home)\"></a>FTTH(fiber to the home)</h3><p>Although DSL and cable network currently represent more than 90 percent of residential broadband access in the united States , an up-and-coming technology that promises even hight speeds is <strong>the deployment of fiber to the home(FTTH).</strong></p>\n<p>As the name suggests , the FTTH concept is simple-provide an optical fiber path from the CO directly to the home.</p>\n<p>There are several competing technologies for optical distribution from the CO to home. The simplest optical distribution network is called direct fiber,with one fiber leaving the CO for each home. More commonly each fiber leaving the CO(central office) is actually shared by many homes. These are two competing optical-distribution network architectures that perform this splitting : <strong>active optical networks (AONs) and passive optical networks(PONs).</strong></p>\n<p>Here, we briefly discuss PON, which is used in Verizon’s FIOS service.</p>\n<p><img src=\"/2020/02/27/The%20Network%20Edge/2020-02-27 21-43-25 的屏幕截图.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>Each home has an optical network terminator(ONT),which is connected by dedicated optical fiber(Optical fibers) to a neighborhood splitter. The splitter combines a number of homes(typically less than 100) onto a single, shared optical fiber,which connects to an <strong>optical line terminator(OLT)</strong> in the telco’s CO. The OLT providing conversion between optical line and electrical signals, connects to the Internet via a telco router. In the home, users connect a home router(typically a wireless router) to the ONT and access the Internet via this home router.</p>\n<h3 id=\"Satellite\"><a href=\"#Satellite\" class=\"headerlink\" title=\"Satellite\"></a>Satellite</h3><p>In location where DSL, cable and FTTH are not available, a satellite link can be used to connect a residence to the Internet at speed of more than 1 Mbps; StarBand and HughesNet are two such satellite access providers.</p>\n<h3 id=\"Dial-up-access\"><a href=\"#Dial-up-access\" class=\"headerlink\" title=\"Dial-up access\"></a>Dial-up access</h3><p>Dial-up access over traditional phone lines is based on the same model as DSL - a home modem connect over phone line to a modem in the ISP. Compared with DSL and other broadband access networks , dial-up access is excruciatingly slow at 56 kbps.</p>\n<h2 id=\"Access-in-the-Enterprise-and-the-home-Ethernet-and-WiFi\"><a href=\"#Access-in-the-Enterprise-and-the-home-Ethernet-and-WiFi\" class=\"headerlink\" title=\"Access in the Enterprise(and the home): Ethernet and WiFi\"></a>Access in the Enterprise(and the home): Ethernet and WiFi</h2><p>On corporate and university campuses and increasingly in the home setting , <strong>a local area network(LAN)</strong> is used to connect an end system to the edge router. Although there are many types of LAN technologies, Ethernet is by far the most prevalent access technology in corporate, university and home networks. As shown in the Figure. Ethernet users use twisted-pair copper wire to connect to an Ethernet switch.</p>\n<p><img src=\"/2020/02/27/The%20Network%20Edge/2020-02-27 23-49-06 的屏幕截图.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>The Ethernet switch or a network of such interconnected switch is then into the larger Internet. With Ethernet access, users typically have 100 Mbps access to the Ethernet switch, whereas servers may have 1 Gbps or even 10 Gbps access.</p>\n<p>Increasingly, however people are accessing the Internet wirelessly from laptops, smartphones, tablets and other devices. In the a wireless LAN setting, wireless users transmit/receive packets to/from an access point that is connected into the enterprise’s networks,which in turn is connected to the wired Internet. A wireless LAN user must typically be within a few ten of meters of the access point. Wireless LAN access based on IEEE 802.11 technology, more colloquially known as WiFi.(A wireless LAN user must typically be within a few ten of meters of the access point.)</p>\n<p>Many home combine broadband residential access(that is cable modem or DSL) with these inexpensive wireless LAN technology to create powerful home networks. Figure shows a typically home networks. This home network consist of roaming laptop as well as wired PC; a base station(the wireless access point),which communicates with the wireless PC; a cable modem providing broadband access to the Internet; and a router,which interconnects the base station and the stationary PC with the cable modem.</p>\n<p><img src=\"/2020/02/27/The%20Network%20Edge/2020-02-28 00-21-20 的屏幕截图.png\" srcset=\"/img/loading.gif\" alt></p>\n<h2 id=\"Wide-Area-Wireless-Access-3G-and-LTE\"><a href=\"#Wide-Area-Wireless-Access-3G-and-LTE\" class=\"headerlink\" title=\"Wide-Area Wireless Access: 3G and LTE\"></a>Wide-Area Wireless Access: 3G and LTE</h2><p>Increasingly, devices such as iphone, Blackberrys and Android devices are being used to send email, surf the Web, Tweet,and download music while on the run. These devices employ the same wireless infrastructure used for cellular telephony to send/receive packets through a base station that is operated by cellular network provider. Unlike WiFi , a user need only be within a few tens of kilometers(as opposed to a few tens of meters) of the base station.</p>\n<p>Telecommunications companies have made enormous investments in so-called third-generation(3G) wireless,which provides packet-switched wide-area wireless Internet access at speeds in excess of 1 Mbps, But even higher-speed wide-area accesss technologies - fourth-generation(4G) of wide-area wireless networks are alread being deployed. LTF(Long-Term Evolution) has its root in 3G technology and can potentially achieve rates in excess of 10 Mbps. LTF downstream rates of many tens of Mbps have been reported in commercial deployments.</p>\n<h1 id=\"Physical-Media\"><a href=\"#Physical-Media\" class=\"headerlink\" title=\"Physical Media\"></a>Physical Media</h1><p>Physical media fall into two categories: <strong>guided media</strong> and <strong>unguided media</strong> with guided media, the waves are guided along a solid medium, such as a fiber-optic cable, a twisted-pair copper wire or a coaxial cable. with unguided media, the waves propagate in the atmosphere and in outer space, such as in a wireless LAN or a digital satellite channel.</p>\n<h2 id=\"Twisted-Pair-Copper-Wire\"><a href=\"#Twisted-Pair-Copper-Wire\" class=\"headerlink\" title=\"Twisted-Pair Copper Wire\"></a>Twisted-Pair Copper Wire</h2><p>The least expensive and most commonly used guided transmission medium is twisted-pair copper wire. In fact, more than 99 percent of the wired connection from telephone handset to the local telephone switch use twisted-pair copper wire. Twisted pair consist of two insulated copper wires, each about 1 mm thick, arranged in a regular spiral patten. The wires are twisted together to reduce the electrical interference from similar pairs close by. Typically a number of pairs are bundled together in a cable by wrapping the pairs in protective shield. <strong>Unshielded twisted pair(UTP)</strong> is commonly used for computer networks within a building  ,that is for LAN. Data rates for LANs using twisted pair today range from 10 Mbps to 10 Gpbs. The data rates that can be achieve depend on the thickness of the wire and the distance between transmitter and receiver.</p>\n<h2 id=\"Coaxial-cable\"><a href=\"#Coaxial-cable\" class=\"headerlink\" title=\"Coaxial cable\"></a>Coaxial cable</h2><p>Coaxial cable is quite common in cable television system. As we saw earlier, cable television system have recently been couple with cable modems to provide residential users with Internet access at rate of tens of Mbps. In cable television and cable Internet access, the transmitter shifs the digital signal to a specific frequency band, and resulting analog signal is send from the transmitter to one or more receivers. Coaxial cable can be used as a guided shared medium. Specifically , a number of end systems can be connected directly to the cable, with each of the end systems receiving whatever is send by the other end system.</p>\n<h2 id=\"Fiber-Optics\"><a href=\"#Fiber-Optics\" class=\"headerlink\" title=\"Fiber Optics\"></a>Fiber Optics</h2><p>An optical fiber is a thin, flexible medium that conducts pulses of light, with each pulse representing a bit. A single optical fiber can support tremendous bit rates, up to ten or even hundreds of gigabits per second. They are immune to electromagnetic interference , have  very low signal attenuation up to 100 kilometers and are very hard to tap. There characteristics have made fiber optics the preferred long-haul guided transmission media, particularly for overseas links. Many of the long-distance telephone networks in the united states and elsewhere now use fiber optics exclusively. However the high cost of optical devices- such as transmitters receivers and switches - has hindered their deployment for short-haul transport, such as in a LAN or into the home in a residential access network.</p>\n<h2 id=\"Terrestrial-Radio-Channels\"><a href=\"#Terrestrial-Radio-Channels\" class=\"headerlink\" title=\"Terrestrial Radio Channels\"></a>Terrestrial Radio Channels</h2><p>Radio channels carry signal in the electromagnetic spectrum. They require no physical wire to be installed can penetrate walls, provide connectivity to mobile user, and can potentially carry a signal for long distances. The characteristics of a radio channel depend on significantly on the propagation environment and the distance over which a signal is to be carried.</p>\n<p>Terrestrial radio channels can be broadly classified into three groups: those that operate over very short distance(e.g : with one or two meters); those that operate in local areas, typically spanning from ten to a few hundred meters; and those that operate in the wide area spanning tens of kilometers. Personal devices such as wireless headsets, keyboards and medical devices over short distances; the wireless LAN technologies use local-area radio channels; the cellular access technologies use wide-area radio channels.</p>\n<h2 id=\"Satellite-Radio-Channels\"><a href=\"#Satellite-Radio-Channels\" class=\"headerlink\" title=\"Satellite Radio Channels\"></a>Satellite Radio Channels</h2><p>A communications satellite links two or more Earth-based microwave transmitter/receivers, known as ground stations. The satellite receives transmissions on one frequency band, regenerates the signal using a repeater and transmits the signal on another frequency. two type of satellite are used in communications: <strong>geostationary satellites and low-earth orbiting(LEO) satellite.</strong></p>\n<p>Geostationary satellites permanently remain above the same spot on Earth. This stationary presence achieve by placing the satellite in orbit at 36000 kilometers above Earth’s surface. This huge distance from ground station through satellite back to ground station introduces a substantial signal propagation delay of 280 milliseconds. Nevertheless, satellite links, which can operate at speed of hundreds of Mbps , are often used in areas without access to DSL or cable-based Internet.</p>\n<p>LEO satellites are placed much closer to Earth and do not remain permanently above one spot on Earth. They rotate around Earth(just as the moon does) and may communicate with each other as well as ground stations. To provide continuous coverage to an area , many satellite need to be place in orbit. there are currently may low- altitude communications system in development. LEO satellite technology may be used for Internet access sometime in the future.</p>\n"},{"title":"英语词汇积累Blog","date":"2020-02-22T03:49:32.000Z","_content":"\n# The Economist February 1st 2020\n\n- Mean\n  - V(A2): To express or represent something such as an idea, thought, or fact.\n  - V(B1): To have a particular result.\n  - Adj(B2): Not willing to give or share things ,especially money.\n  - Adj(B2): Unkind or Unpleasant.\n- Obsession\n  - Noun(B2): Something or someone that you think about all the time.\n- Obsessive\n  - Adj(C2): Thinking about something or someone or doing something, too much or all the time.\n\n- Hustle\n  - V: To make someone move quickly by pushing or pulling them along.\n  - V: to try to persuade someone, especially to buy something, often illegally.\n  - Noun : energetic action\n  - a dishonest way of making money. \n- Dejected\n  - Adj: unhappy, disappointed, or without hope.\n- League\n  - Noun : a group of teams playing a sport who take part in competitions between each other.\n- Straight\n  - Adj(A2) : continuing in one direction without bending or curving.\n- Bend\n  - Adj(B2): to (cause to) curve.\n- Curve\n  - a line that bends continuously and has no straight parts.\n- Suburb\n  - Noun: an area on the edge of a large town or city where people who work in the town or city often live.\n- Suburban\n  - Adj: relating to a suburb.\n  - Adj: used to suggest that something is boring and has no excitement.\n- Odd \n  - Adj(B2): strange or unexpected\n- Burn\n  - V(B2): to be hurt , damaged, or destroyed by fire or extreme heat, or to cause this to happen.\n  - V: to cause emotional pain or damage to someone.\n  - V: to produce light.\n  - V: to want to do something very much.\n- Extreme\n  - the largest possible amount or degree of something.\n- Self-belief\n  - Noun: trust in your own abilities.\n- Assassin\n  - Noun : someone who kill a famous or important person, usually for political reasons or in exchange for money.\n- Ruthless\n  - Adj(C2): not thinking or worrying about any pain caused to others, cruel.\n- Cruel\n  - Adj(B1): extremely unkind and unpleasant and causing pain to people or animals intentionally.\n- Intend\n  - V(B1): to have as a plan or purpose.\n- Intentional\n  - Adj: planned or intended.\n- Intentionally\n  - Adv: in a planned or intended way.\n- Strike\n  - V(B2): to refuse to continue working because of an argument with an employer about working conditions, pay levels,or job losses.\n  - V(C2): to cause a person or place to suffer severely from the effects of something very unpleasant that happens suddenly.\n  - V(B2):to hit or attack someone or something forcefully or violently.\n- Violently\n  - Adv(B2): in a forceful way that causes people to be hurt.\n  - Adv: strongly or extremely.\n- Threw (Pass tense of Throw)\n  - V(A2): to send something through the air with force, especially by a sudden movement of the arm.\n\n- Misery\n  - Noun(Unhappy feeling) : great unhappiness .\n  - Noun(Unhappy person): someone who is often very unhappy and is always complaining about things.\n- Vow \n  - V(C2): to make a determined decision or promise to do something.\n  - Noun(C2): a serious promise or decision.\n\n- Revenge\n  - V: to harm someone as a punishment for harm that they have done to you.\n\n- Lithe\n  - Adj: young ,healthy,attractive , and able to move and bend smoothly.\n- Smoothly\n  - Adj: easily and without interruption or difficulty.\n- Attractive\n  - very pleasing in appearance or sound.\n- Nimble\n  - quick and exact either in movement or thoughts.\n- Hit back\n  - Ph: to attack or criticize someone who has attacked or criticized you.\n- Glory\n  - Noun: praise and thanks, especially as given to God.\n  - Noun: great admiration,honour,and praise that you earn by doing something successfully.\n  - Noun: great beauty,or something special or extremely beautiful,that gives great pleasure.\n- Play-offs\n  - Noun: an extra game or period of play in a competition played between team or competitors who both have the same number of points, in order to decide who win the competition.\n- Purple\n  - Adj: 紫红色\n- Draw\n  - V: to make a picture of something or someone with a pencil or pen.\n  - V: to attract attention or interest.\n  - V: to make or show a comparison between things.\n- Fabulous\n  - Adj: very good; excellent\n  - Adj: imaginary, not existing in real life.\n- Floater\n  - Noun: someone who does a lot of different job in an organization.\n- Trajectory\n  - Noun: The curved path that an object follows after it has been thrown or shot into the air.\n- Affair\n  - Noun: a situation or subject that is being dealt with or considered.\n  - Noun: a matter or situation that causes strong public feeling, usually of moral disapproval.\n- Moral\n  - Adj: relating to the standards of good or bad behaviour ,fairness,honesty,etc. that each person believes in, rather than to law.\n- Era\n  - Noun: a period of time of which particular event or stages of development are typical.\n- Event\n  - Noun: anything that happens, especially something important or unusual.\n  - Noun: one of a set of races or competitions.\n- Buddha\n  - Noun: the holy man(563-483 BC) on whose life and teachings Buddhism is based.\n  - Noun: an image of statue (=large model) of Buddha.\n- Charming\n  - Adj: pleasant and attractive\n  - Adj: used to describe people who  use their attractiveness to influence people or to make other people like them.\n  - Adj: used to show that you do no approve of what someone has said or done.\n- Approve\n  - V: to have a positive opinion of someone or something.\n- Infuriate\n  - V to make someone extremely angry.\n- Staggering\n  - Adj: very shocking and surprising.\n- Ankle\n  - Noun: 踝关节，踝.\n- Knee\n  - Noun: 膝盖，膝.\n- Sore\n  - Adj: painful and uncomfortable because of injury,infection or too much use.\n- Infection\n  - Noun: a disease in a part of your body that is caused by bacteria or a virus.\n- Disease\n  - Noun: (an) illness of people ,animals,plants,etc. casued by infection or a failure of health rather than by an accident.\n- Bacterium\n  - Noun: a type of very small organism that live in air,earth,water,plants,and animals,often one that causes disease.\n- Claim\n  - V: to say that something is true or is a fact ,although you cannot prove it and other people might not believe it.\n  - V: to ask for something of value because you think it belongs to you or because you think you have a right to it.\n- Multimeida\n  - Adj: using a combination of moving and still pictures, sound,music,and word,especially in computers or entertainment.\n- Entertainment\n  - Noun: shows,films,television,or other performances or activities that entertain people,or a performance of the type.\n- Award\n  - V: to give money or prize following an official decision.\n- Motivate\n  - V: to make someone want to do something well.\n- Impatience\n  - Noun: the feeling of being annoyed by someone's mistakes or because you have to wait.\n  - Noun: the feeling of wanting something to happen as soon as possible.\n- Get to and from\n  - Ph: 往返。\n- Increase\n  - V: to(make something) become larger in amount or size.\n- Motto\n  - Noun: a short sentence or phrase that expresses a belief or purpose.\n- Purpose\n  - Noun: why you do something or why something exists.\n  - on purpose: if you do something on purpose, you do it intentionally, not by accident.\n  - Noun: determination or a feeling of having a reason for what you do.\n- Time wait for no man.\n  - Ph:时间不等人。","source":"_posts/英语词汇积累Blog.md","raw":"---\ntitle: 英语词汇积累Blog\ndate: 2020-02-22 11:49:32\ntags: -英语学习 \n---\n\n# The Economist February 1st 2020\n\n- Mean\n  - V(A2): To express or represent something such as an idea, thought, or fact.\n  - V(B1): To have a particular result.\n  - Adj(B2): Not willing to give or share things ,especially money.\n  - Adj(B2): Unkind or Unpleasant.\n- Obsession\n  - Noun(B2): Something or someone that you think about all the time.\n- Obsessive\n  - Adj(C2): Thinking about something or someone or doing something, too much or all the time.\n\n- Hustle\n  - V: To make someone move quickly by pushing or pulling them along.\n  - V: to try to persuade someone, especially to buy something, often illegally.\n  - Noun : energetic action\n  - a dishonest way of making money. \n- Dejected\n  - Adj: unhappy, disappointed, or without hope.\n- League\n  - Noun : a group of teams playing a sport who take part in competitions between each other.\n- Straight\n  - Adj(A2) : continuing in one direction without bending or curving.\n- Bend\n  - Adj(B2): to (cause to) curve.\n- Curve\n  - a line that bends continuously and has no straight parts.\n- Suburb\n  - Noun: an area on the edge of a large town or city where people who work in the town or city often live.\n- Suburban\n  - Adj: relating to a suburb.\n  - Adj: used to suggest that something is boring and has no excitement.\n- Odd \n  - Adj(B2): strange or unexpected\n- Burn\n  - V(B2): to be hurt , damaged, or destroyed by fire or extreme heat, or to cause this to happen.\n  - V: to cause emotional pain or damage to someone.\n  - V: to produce light.\n  - V: to want to do something very much.\n- Extreme\n  - the largest possible amount or degree of something.\n- Self-belief\n  - Noun: trust in your own abilities.\n- Assassin\n  - Noun : someone who kill a famous or important person, usually for political reasons or in exchange for money.\n- Ruthless\n  - Adj(C2): not thinking or worrying about any pain caused to others, cruel.\n- Cruel\n  - Adj(B1): extremely unkind and unpleasant and causing pain to people or animals intentionally.\n- Intend\n  - V(B1): to have as a plan or purpose.\n- Intentional\n  - Adj: planned or intended.\n- Intentionally\n  - Adv: in a planned or intended way.\n- Strike\n  - V(B2): to refuse to continue working because of an argument with an employer about working conditions, pay levels,or job losses.\n  - V(C2): to cause a person or place to suffer severely from the effects of something very unpleasant that happens suddenly.\n  - V(B2):to hit or attack someone or something forcefully or violently.\n- Violently\n  - Adv(B2): in a forceful way that causes people to be hurt.\n  - Adv: strongly or extremely.\n- Threw (Pass tense of Throw)\n  - V(A2): to send something through the air with force, especially by a sudden movement of the arm.\n\n- Misery\n  - Noun(Unhappy feeling) : great unhappiness .\n  - Noun(Unhappy person): someone who is often very unhappy and is always complaining about things.\n- Vow \n  - V(C2): to make a determined decision or promise to do something.\n  - Noun(C2): a serious promise or decision.\n\n- Revenge\n  - V: to harm someone as a punishment for harm that they have done to you.\n\n- Lithe\n  - Adj: young ,healthy,attractive , and able to move and bend smoothly.\n- Smoothly\n  - Adj: easily and without interruption or difficulty.\n- Attractive\n  - very pleasing in appearance or sound.\n- Nimble\n  - quick and exact either in movement or thoughts.\n- Hit back\n  - Ph: to attack or criticize someone who has attacked or criticized you.\n- Glory\n  - Noun: praise and thanks, especially as given to God.\n  - Noun: great admiration,honour,and praise that you earn by doing something successfully.\n  - Noun: great beauty,or something special or extremely beautiful,that gives great pleasure.\n- Play-offs\n  - Noun: an extra game or period of play in a competition played between team or competitors who both have the same number of points, in order to decide who win the competition.\n- Purple\n  - Adj: 紫红色\n- Draw\n  - V: to make a picture of something or someone with a pencil or pen.\n  - V: to attract attention or interest.\n  - V: to make or show a comparison between things.\n- Fabulous\n  - Adj: very good; excellent\n  - Adj: imaginary, not existing in real life.\n- Floater\n  - Noun: someone who does a lot of different job in an organization.\n- Trajectory\n  - Noun: The curved path that an object follows after it has been thrown or shot into the air.\n- Affair\n  - Noun: a situation or subject that is being dealt with or considered.\n  - Noun: a matter or situation that causes strong public feeling, usually of moral disapproval.\n- Moral\n  - Adj: relating to the standards of good or bad behaviour ,fairness,honesty,etc. that each person believes in, rather than to law.\n- Era\n  - Noun: a period of time of which particular event or stages of development are typical.\n- Event\n  - Noun: anything that happens, especially something important or unusual.\n  - Noun: one of a set of races or competitions.\n- Buddha\n  - Noun: the holy man(563-483 BC) on whose life and teachings Buddhism is based.\n  - Noun: an image of statue (=large model) of Buddha.\n- Charming\n  - Adj: pleasant and attractive\n  - Adj: used to describe people who  use their attractiveness to influence people or to make other people like them.\n  - Adj: used to show that you do no approve of what someone has said or done.\n- Approve\n  - V: to have a positive opinion of someone or something.\n- Infuriate\n  - V to make someone extremely angry.\n- Staggering\n  - Adj: very shocking and surprising.\n- Ankle\n  - Noun: 踝关节，踝.\n- Knee\n  - Noun: 膝盖，膝.\n- Sore\n  - Adj: painful and uncomfortable because of injury,infection or too much use.\n- Infection\n  - Noun: a disease in a part of your body that is caused by bacteria or a virus.\n- Disease\n  - Noun: (an) illness of people ,animals,plants,etc. casued by infection or a failure of health rather than by an accident.\n- Bacterium\n  - Noun: a type of very small organism that live in air,earth,water,plants,and animals,often one that causes disease.\n- Claim\n  - V: to say that something is true or is a fact ,although you cannot prove it and other people might not believe it.\n  - V: to ask for something of value because you think it belongs to you or because you think you have a right to it.\n- Multimeida\n  - Adj: using a combination of moving and still pictures, sound,music,and word,especially in computers or entertainment.\n- Entertainment\n  - Noun: shows,films,television,or other performances or activities that entertain people,or a performance of the type.\n- Award\n  - V: to give money or prize following an official decision.\n- Motivate\n  - V: to make someone want to do something well.\n- Impatience\n  - Noun: the feeling of being annoyed by someone's mistakes or because you have to wait.\n  - Noun: the feeling of wanting something to happen as soon as possible.\n- Get to and from\n  - Ph: 往返。\n- Increase\n  - V: to(make something) become larger in amount or size.\n- Motto\n  - Noun: a short sentence or phrase that expresses a belief or purpose.\n- Purpose\n  - Noun: why you do something or why something exists.\n  - on purpose: if you do something on purpose, you do it intentionally, not by accident.\n  - Noun: determination or a feeling of having a reason for what you do.\n- Time wait for no man.\n  - Ph:时间不等人。","slug":"英语词汇积累Blog","published":1,"updated":"2020-02-25T05:30:20.566Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7knymkz000ftlfw1huv2tb7","content":"<h1 id=\"The-Economist-February-1st-2020\"><a href=\"#The-Economist-February-1st-2020\" class=\"headerlink\" title=\"The Economist February 1st 2020\"></a>The Economist February 1st 2020</h1><ul>\n<li>Mean<ul>\n<li>V(A2): To express or represent something such as an idea, thought, or fact.</li>\n<li>V(B1): To have a particular result.</li>\n<li>Adj(B2): Not willing to give or share things ,especially money.</li>\n<li>Adj(B2): Unkind or Unpleasant.</li>\n</ul>\n</li>\n<li>Obsession<ul>\n<li>Noun(B2): Something or someone that you think about all the time.</li>\n</ul>\n</li>\n<li><p>Obsessive</p>\n<ul>\n<li>Adj(C2): Thinking about something or someone or doing something, too much or all the time.</li>\n</ul>\n</li>\n<li><p>Hustle</p>\n<ul>\n<li>V: To make someone move quickly by pushing or pulling them along.</li>\n<li>V: to try to persuade someone, especially to buy something, often illegally.</li>\n<li>Noun : energetic action</li>\n<li>a dishonest way of making money. </li>\n</ul>\n</li>\n<li>Dejected<ul>\n<li>Adj: unhappy, disappointed, or without hope.</li>\n</ul>\n</li>\n<li>League<ul>\n<li>Noun : a group of teams playing a sport who take part in competitions between each other.</li>\n</ul>\n</li>\n<li>Straight<ul>\n<li>Adj(A2) : continuing in one direction without bending or curving.</li>\n</ul>\n</li>\n<li>Bend<ul>\n<li>Adj(B2): to (cause to) curve.</li>\n</ul>\n</li>\n<li>Curve<ul>\n<li>a line that bends continuously and has no straight parts.</li>\n</ul>\n</li>\n<li>Suburb<ul>\n<li>Noun: an area on the edge of a large town or city where people who work in the town or city often live.</li>\n</ul>\n</li>\n<li>Suburban<ul>\n<li>Adj: relating to a suburb.</li>\n<li>Adj: used to suggest that something is boring and has no excitement.</li>\n</ul>\n</li>\n<li>Odd <ul>\n<li>Adj(B2): strange or unexpected</li>\n</ul>\n</li>\n<li>Burn<ul>\n<li>V(B2): to be hurt , damaged, or destroyed by fire or extreme heat, or to cause this to happen.</li>\n<li>V: to cause emotional pain or damage to someone.</li>\n<li>V: to produce light.</li>\n<li>V: to want to do something very much.</li>\n</ul>\n</li>\n<li>Extreme<ul>\n<li>the largest possible amount or degree of something.</li>\n</ul>\n</li>\n<li>Self-belief<ul>\n<li>Noun: trust in your own abilities.</li>\n</ul>\n</li>\n<li>Assassin<ul>\n<li>Noun : someone who kill a famous or important person, usually for political reasons or in exchange for money.</li>\n</ul>\n</li>\n<li>Ruthless<ul>\n<li>Adj(C2): not thinking or worrying about any pain caused to others, cruel.</li>\n</ul>\n</li>\n<li>Cruel<ul>\n<li>Adj(B1): extremely unkind and unpleasant and causing pain to people or animals intentionally.</li>\n</ul>\n</li>\n<li>Intend<ul>\n<li>V(B1): to have as a plan or purpose.</li>\n</ul>\n</li>\n<li>Intentional<ul>\n<li>Adj: planned or intended.</li>\n</ul>\n</li>\n<li>Intentionally<ul>\n<li>Adv: in a planned or intended way.</li>\n</ul>\n</li>\n<li>Strike<ul>\n<li>V(B2): to refuse to continue working because of an argument with an employer about working conditions, pay levels,or job losses.</li>\n<li>V(C2): to cause a person or place to suffer severely from the effects of something very unpleasant that happens suddenly.</li>\n<li>V(B2):to hit or attack someone or something forcefully or violently.</li>\n</ul>\n</li>\n<li>Violently<ul>\n<li>Adv(B2): in a forceful way that causes people to be hurt.</li>\n<li>Adv: strongly or extremely.</li>\n</ul>\n</li>\n<li><p>Threw (Pass tense of Throw)</p>\n<ul>\n<li>V(A2): to send something through the air with force, especially by a sudden movement of the arm.</li>\n</ul>\n</li>\n<li><p>Misery</p>\n<ul>\n<li>Noun(Unhappy feeling) : great unhappiness .</li>\n<li>Noun(Unhappy person): someone who is often very unhappy and is always complaining about things.</li>\n</ul>\n</li>\n<li><p>Vow </p>\n<ul>\n<li>V(C2): to make a determined decision or promise to do something.</li>\n<li>Noun(C2): a serious promise or decision.</li>\n</ul>\n</li>\n<li><p>Revenge</p>\n<ul>\n<li>V: to harm someone as a punishment for harm that they have done to you.</li>\n</ul>\n</li>\n<li><p>Lithe</p>\n<ul>\n<li>Adj: young ,healthy,attractive , and able to move and bend smoothly.</li>\n</ul>\n</li>\n<li>Smoothly<ul>\n<li>Adj: easily and without interruption or difficulty.</li>\n</ul>\n</li>\n<li>Attractive<ul>\n<li>very pleasing in appearance or sound.</li>\n</ul>\n</li>\n<li>Nimble<ul>\n<li>quick and exact either in movement or thoughts.</li>\n</ul>\n</li>\n<li>Hit back<ul>\n<li>Ph: to attack or criticize someone who has attacked or criticized you.</li>\n</ul>\n</li>\n<li>Glory<ul>\n<li>Noun: praise and thanks, especially as given to God.</li>\n<li>Noun: great admiration,honour,and praise that you earn by doing something successfully.</li>\n<li>Noun: great beauty,or something special or extremely beautiful,that gives great pleasure.</li>\n</ul>\n</li>\n<li>Play-offs<ul>\n<li>Noun: an extra game or period of play in a competition played between team or competitors who both have the same number of points, in order to decide who win the competition.</li>\n</ul>\n</li>\n<li>Purple<ul>\n<li>Adj: 紫红色</li>\n</ul>\n</li>\n<li>Draw<ul>\n<li>V: to make a picture of something or someone with a pencil or pen.</li>\n<li>V: to attract attention or interest.</li>\n<li>V: to make or show a comparison between things.</li>\n</ul>\n</li>\n<li>Fabulous<ul>\n<li>Adj: very good; excellent</li>\n<li>Adj: imaginary, not existing in real life.</li>\n</ul>\n</li>\n<li>Floater<ul>\n<li>Noun: someone who does a lot of different job in an organization.</li>\n</ul>\n</li>\n<li>Trajectory<ul>\n<li>Noun: The curved path that an object follows after it has been thrown or shot into the air.</li>\n</ul>\n</li>\n<li>Affair<ul>\n<li>Noun: a situation or subject that is being dealt with or considered.</li>\n<li>Noun: a matter or situation that causes strong public feeling, usually of moral disapproval.</li>\n</ul>\n</li>\n<li>Moral<ul>\n<li>Adj: relating to the standards of good or bad behaviour ,fairness,honesty,etc. that each person believes in, rather than to law.</li>\n</ul>\n</li>\n<li>Era<ul>\n<li>Noun: a period of time of which particular event or stages of development are typical.</li>\n</ul>\n</li>\n<li>Event<ul>\n<li>Noun: anything that happens, especially something important or unusual.</li>\n<li>Noun: one of a set of races or competitions.</li>\n</ul>\n</li>\n<li>Buddha<ul>\n<li>Noun: the holy man(563-483 BC) on whose life and teachings Buddhism is based.</li>\n<li>Noun: an image of statue (=large model) of Buddha.</li>\n</ul>\n</li>\n<li>Charming<ul>\n<li>Adj: pleasant and attractive</li>\n<li>Adj: used to describe people who  use their attractiveness to influence people or to make other people like them.</li>\n<li>Adj: used to show that you do no approve of what someone has said or done.</li>\n</ul>\n</li>\n<li>Approve<ul>\n<li>V: to have a positive opinion of someone or something.</li>\n</ul>\n</li>\n<li>Infuriate<ul>\n<li>V to make someone extremely angry.</li>\n</ul>\n</li>\n<li>Staggering<ul>\n<li>Adj: very shocking and surprising.</li>\n</ul>\n</li>\n<li>Ankle<ul>\n<li>Noun: 踝关节，踝.</li>\n</ul>\n</li>\n<li>Knee<ul>\n<li>Noun: 膝盖，膝.</li>\n</ul>\n</li>\n<li>Sore<ul>\n<li>Adj: painful and uncomfortable because of injury,infection or too much use.</li>\n</ul>\n</li>\n<li>Infection<ul>\n<li>Noun: a disease in a part of your body that is caused by bacteria or a virus.</li>\n</ul>\n</li>\n<li>Disease<ul>\n<li>Noun: (an) illness of people ,animals,plants,etc. casued by infection or a failure of health rather than by an accident.</li>\n</ul>\n</li>\n<li>Bacterium<ul>\n<li>Noun: a type of very small organism that live in air,earth,water,plants,and animals,often one that causes disease.</li>\n</ul>\n</li>\n<li>Claim<ul>\n<li>V: to say that something is true or is a fact ,although you cannot prove it and other people might not believe it.</li>\n<li>V: to ask for something of value because you think it belongs to you or because you think you have a right to it.</li>\n</ul>\n</li>\n<li>Multimeida<ul>\n<li>Adj: using a combination of moving and still pictures, sound,music,and word,especially in computers or entertainment.</li>\n</ul>\n</li>\n<li>Entertainment<ul>\n<li>Noun: shows,films,television,or other performances or activities that entertain people,or a performance of the type.</li>\n</ul>\n</li>\n<li>Award<ul>\n<li>V: to give money or prize following an official decision.</li>\n</ul>\n</li>\n<li>Motivate<ul>\n<li>V: to make someone want to do something well.</li>\n</ul>\n</li>\n<li>Impatience<ul>\n<li>Noun: the feeling of being annoyed by someone’s mistakes or because you have to wait.</li>\n<li>Noun: the feeling of wanting something to happen as soon as possible.</li>\n</ul>\n</li>\n<li>Get to and from<ul>\n<li>Ph: 往返。</li>\n</ul>\n</li>\n<li>Increase<ul>\n<li>V: to(make something) become larger in amount or size.</li>\n</ul>\n</li>\n<li>Motto<ul>\n<li>Noun: a short sentence or phrase that expresses a belief or purpose.</li>\n</ul>\n</li>\n<li>Purpose<ul>\n<li>Noun: why you do something or why something exists.</li>\n<li>on purpose: if you do something on purpose, you do it intentionally, not by accident.</li>\n<li>Noun: determination or a feeling of having a reason for what you do.</li>\n</ul>\n</li>\n<li>Time wait for no man.<ul>\n<li>Ph:时间不等人。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"The-Economist-February-1st-2020\"><a href=\"#The-Economist-February-1st-2020\" class=\"headerlink\" title=\"The Economist February 1st 2020\"></a>The Economist February 1st 2020</h1><ul>\n<li>Mean<ul>\n<li>V(A2): To express or represent something such as an idea, thought, or fact.</li>\n<li>V(B1): To have a particular result.</li>\n<li>Adj(B2): Not willing to give or share things ,especially money.</li>\n<li>Adj(B2): Unkind or Unpleasant.</li>\n</ul>\n</li>\n<li>Obsession<ul>\n<li>Noun(B2): Something or someone that you think about all the time.</li>\n</ul>\n</li>\n<li><p>Obsessive</p>\n<ul>\n<li>Adj(C2): Thinking about something or someone or doing something, too much or all the time.</li>\n</ul>\n</li>\n<li><p>Hustle</p>\n<ul>\n<li>V: To make someone move quickly by pushing or pulling them along.</li>\n<li>V: to try to persuade someone, especially to buy something, often illegally.</li>\n<li>Noun : energetic action</li>\n<li>a dishonest way of making money. </li>\n</ul>\n</li>\n<li>Dejected<ul>\n<li>Adj: unhappy, disappointed, or without hope.</li>\n</ul>\n</li>\n<li>League<ul>\n<li>Noun : a group of teams playing a sport who take part in competitions between each other.</li>\n</ul>\n</li>\n<li>Straight<ul>\n<li>Adj(A2) : continuing in one direction without bending or curving.</li>\n</ul>\n</li>\n<li>Bend<ul>\n<li>Adj(B2): to (cause to) curve.</li>\n</ul>\n</li>\n<li>Curve<ul>\n<li>a line that bends continuously and has no straight parts.</li>\n</ul>\n</li>\n<li>Suburb<ul>\n<li>Noun: an area on the edge of a large town or city where people who work in the town or city often live.</li>\n</ul>\n</li>\n<li>Suburban<ul>\n<li>Adj: relating to a suburb.</li>\n<li>Adj: used to suggest that something is boring and has no excitement.</li>\n</ul>\n</li>\n<li>Odd <ul>\n<li>Adj(B2): strange or unexpected</li>\n</ul>\n</li>\n<li>Burn<ul>\n<li>V(B2): to be hurt , damaged, or destroyed by fire or extreme heat, or to cause this to happen.</li>\n<li>V: to cause emotional pain or damage to someone.</li>\n<li>V: to produce light.</li>\n<li>V: to want to do something very much.</li>\n</ul>\n</li>\n<li>Extreme<ul>\n<li>the largest possible amount or degree of something.</li>\n</ul>\n</li>\n<li>Self-belief<ul>\n<li>Noun: trust in your own abilities.</li>\n</ul>\n</li>\n<li>Assassin<ul>\n<li>Noun : someone who kill a famous or important person, usually for political reasons or in exchange for money.</li>\n</ul>\n</li>\n<li>Ruthless<ul>\n<li>Adj(C2): not thinking or worrying about any pain caused to others, cruel.</li>\n</ul>\n</li>\n<li>Cruel<ul>\n<li>Adj(B1): extremely unkind and unpleasant and causing pain to people or animals intentionally.</li>\n</ul>\n</li>\n<li>Intend<ul>\n<li>V(B1): to have as a plan or purpose.</li>\n</ul>\n</li>\n<li>Intentional<ul>\n<li>Adj: planned or intended.</li>\n</ul>\n</li>\n<li>Intentionally<ul>\n<li>Adv: in a planned or intended way.</li>\n</ul>\n</li>\n<li>Strike<ul>\n<li>V(B2): to refuse to continue working because of an argument with an employer about working conditions, pay levels,or job losses.</li>\n<li>V(C2): to cause a person or place to suffer severely from the effects of something very unpleasant that happens suddenly.</li>\n<li>V(B2):to hit or attack someone or something forcefully or violently.</li>\n</ul>\n</li>\n<li>Violently<ul>\n<li>Adv(B2): in a forceful way that causes people to be hurt.</li>\n<li>Adv: strongly or extremely.</li>\n</ul>\n</li>\n<li><p>Threw (Pass tense of Throw)</p>\n<ul>\n<li>V(A2): to send something through the air with force, especially by a sudden movement of the arm.</li>\n</ul>\n</li>\n<li><p>Misery</p>\n<ul>\n<li>Noun(Unhappy feeling) : great unhappiness .</li>\n<li>Noun(Unhappy person): someone who is often very unhappy and is always complaining about things.</li>\n</ul>\n</li>\n<li><p>Vow </p>\n<ul>\n<li>V(C2): to make a determined decision or promise to do something.</li>\n<li>Noun(C2): a serious promise or decision.</li>\n</ul>\n</li>\n<li><p>Revenge</p>\n<ul>\n<li>V: to harm someone as a punishment for harm that they have done to you.</li>\n</ul>\n</li>\n<li><p>Lithe</p>\n<ul>\n<li>Adj: young ,healthy,attractive , and able to move and bend smoothly.</li>\n</ul>\n</li>\n<li>Smoothly<ul>\n<li>Adj: easily and without interruption or difficulty.</li>\n</ul>\n</li>\n<li>Attractive<ul>\n<li>very pleasing in appearance or sound.</li>\n</ul>\n</li>\n<li>Nimble<ul>\n<li>quick and exact either in movement or thoughts.</li>\n</ul>\n</li>\n<li>Hit back<ul>\n<li>Ph: to attack or criticize someone who has attacked or criticized you.</li>\n</ul>\n</li>\n<li>Glory<ul>\n<li>Noun: praise and thanks, especially as given to God.</li>\n<li>Noun: great admiration,honour,and praise that you earn by doing something successfully.</li>\n<li>Noun: great beauty,or something special or extremely beautiful,that gives great pleasure.</li>\n</ul>\n</li>\n<li>Play-offs<ul>\n<li>Noun: an extra game or period of play in a competition played between team or competitors who both have the same number of points, in order to decide who win the competition.</li>\n</ul>\n</li>\n<li>Purple<ul>\n<li>Adj: 紫红色</li>\n</ul>\n</li>\n<li>Draw<ul>\n<li>V: to make a picture of something or someone with a pencil or pen.</li>\n<li>V: to attract attention or interest.</li>\n<li>V: to make or show a comparison between things.</li>\n</ul>\n</li>\n<li>Fabulous<ul>\n<li>Adj: very good; excellent</li>\n<li>Adj: imaginary, not existing in real life.</li>\n</ul>\n</li>\n<li>Floater<ul>\n<li>Noun: someone who does a lot of different job in an organization.</li>\n</ul>\n</li>\n<li>Trajectory<ul>\n<li>Noun: The curved path that an object follows after it has been thrown or shot into the air.</li>\n</ul>\n</li>\n<li>Affair<ul>\n<li>Noun: a situation or subject that is being dealt with or considered.</li>\n<li>Noun: a matter or situation that causes strong public feeling, usually of moral disapproval.</li>\n</ul>\n</li>\n<li>Moral<ul>\n<li>Adj: relating to the standards of good or bad behaviour ,fairness,honesty,etc. that each person believes in, rather than to law.</li>\n</ul>\n</li>\n<li>Era<ul>\n<li>Noun: a period of time of which particular event or stages of development are typical.</li>\n</ul>\n</li>\n<li>Event<ul>\n<li>Noun: anything that happens, especially something important or unusual.</li>\n<li>Noun: one of a set of races or competitions.</li>\n</ul>\n</li>\n<li>Buddha<ul>\n<li>Noun: the holy man(563-483 BC) on whose life and teachings Buddhism is based.</li>\n<li>Noun: an image of statue (=large model) of Buddha.</li>\n</ul>\n</li>\n<li>Charming<ul>\n<li>Adj: pleasant and attractive</li>\n<li>Adj: used to describe people who  use their attractiveness to influence people or to make other people like them.</li>\n<li>Adj: used to show that you do no approve of what someone has said or done.</li>\n</ul>\n</li>\n<li>Approve<ul>\n<li>V: to have a positive opinion of someone or something.</li>\n</ul>\n</li>\n<li>Infuriate<ul>\n<li>V to make someone extremely angry.</li>\n</ul>\n</li>\n<li>Staggering<ul>\n<li>Adj: very shocking and surprising.</li>\n</ul>\n</li>\n<li>Ankle<ul>\n<li>Noun: 踝关节，踝.</li>\n</ul>\n</li>\n<li>Knee<ul>\n<li>Noun: 膝盖，膝.</li>\n</ul>\n</li>\n<li>Sore<ul>\n<li>Adj: painful and uncomfortable because of injury,infection or too much use.</li>\n</ul>\n</li>\n<li>Infection<ul>\n<li>Noun: a disease in a part of your body that is caused by bacteria or a virus.</li>\n</ul>\n</li>\n<li>Disease<ul>\n<li>Noun: (an) illness of people ,animals,plants,etc. casued by infection or a failure of health rather than by an accident.</li>\n</ul>\n</li>\n<li>Bacterium<ul>\n<li>Noun: a type of very small organism that live in air,earth,water,plants,and animals,often one that causes disease.</li>\n</ul>\n</li>\n<li>Claim<ul>\n<li>V: to say that something is true or is a fact ,although you cannot prove it and other people might not believe it.</li>\n<li>V: to ask for something of value because you think it belongs to you or because you think you have a right to it.</li>\n</ul>\n</li>\n<li>Multimeida<ul>\n<li>Adj: using a combination of moving and still pictures, sound,music,and word,especially in computers or entertainment.</li>\n</ul>\n</li>\n<li>Entertainment<ul>\n<li>Noun: shows,films,television,or other performances or activities that entertain people,or a performance of the type.</li>\n</ul>\n</li>\n<li>Award<ul>\n<li>V: to give money or prize following an official decision.</li>\n</ul>\n</li>\n<li>Motivate<ul>\n<li>V: to make someone want to do something well.</li>\n</ul>\n</li>\n<li>Impatience<ul>\n<li>Noun: the feeling of being annoyed by someone’s mistakes or because you have to wait.</li>\n<li>Noun: the feeling of wanting something to happen as soon as possible.</li>\n</ul>\n</li>\n<li>Get to and from<ul>\n<li>Ph: 往返。</li>\n</ul>\n</li>\n<li>Increase<ul>\n<li>V: to(make something) become larger in amount or size.</li>\n</ul>\n</li>\n<li>Motto<ul>\n<li>Noun: a short sentence or phrase that expresses a belief or purpose.</li>\n</ul>\n</li>\n<li>Purpose<ul>\n<li>Noun: why you do something or why something exists.</li>\n<li>on purpose: if you do something on purpose, you do it intentionally, not by accident.</li>\n<li>Noun: determination or a feeling of having a reason for what you do.</li>\n</ul>\n</li>\n<li>Time wait for no man.<ul>\n<li>Ph:时间不等人。</li>\n</ul>\n</li>\n</ul>\n"},{"title":"process-switch-base-on-stack-switch","date":"2020-02-16T07:57:03.000Z","_content":"\n# 基于内核栈切换的进程切换\n\n## 实验目的\n\n- 深入理解进程和进程切换的概念；\n- 综合应用进程、CPU 管理、PCB、LDT、内核栈、内核态等知识解决实际问题；\n- 开始建立系统认识。\n\n## 实验内容\n\n现在的 Linux 0.11 采用 TSS（后面会有详细论述）和一条指令就能完成任务切换，虽然简单，但这指令的执行时间却很长，在实现任务切换时大概需要 200 多个时钟周期。\n\n而通过堆栈实现任务切换可能要更快，而且采用堆栈的切换还可以使用指令流水的并行优化技术，同时又使得 CPU 的设计变得简单。所以无论是 Linux 还是 Windows，进程/线程的切换都没有使用 Intel 提供的这种 TSS 切换手段，而都是通过堆栈实现的。\n\n本次实践项目就是将 Linux 0.11 中采用的 TSS 切换部分去掉，取而代之的是基于堆栈的切换程序。具体的说，就是将 Linux 0.11 中的 `switch_to` 实现去掉，写成一段基于堆栈切换的代码。\n\n本次实验包括如下内容：\n\n- 编写汇编程序 `switch_to`：\n- 完成主体框架；\n- 在主体框架下依次完成 PCB 切换、内核栈切换、LDT 切换等；\n- 修改 `fork()`，由于是基于内核栈的切换，所以进程需要创建出能完成内核栈切换的样子。\n- 修改 PCB，即 `task_struct` 结构，增加相应的内容域，同时处理由于修改了 task_struct 所造成的影响。\n- 用修改后的 Linux 0.11 仍然可以启动、可以正常使用。\n- （选做）分析实验 3 的日志体会修改前后系统运行的差别。\n\n## 实验报告\n\n回答下面三个题：\n\n#### 问题 1\n\n针对下面的代码片段：\n\n```\nmovl tss,%ecx\naddl $4096,%ebx\nmovl %ebx,ESP0(%ecx)\n```\n\n回答问题：\n\n- （1）为什么要加 4096；\n\n  答：因为一页内存低地址存进程PCB，高地址是堆栈，linux-0.11 一页内存大小为4Kb,所以+4096。\n\n- （2）为什么没有设置 tss 中的 ss0。\n\n  答\n\n#### 问题 2\n\n针对代码片段：\n\n```c\n*(--krnstack) = ebp;\n*(--krnstack) = ecx;\n*(--krnstack) = ebx;\n*(--krnstack) = 0;\n```\n\n回答问题：\n\n- （1）子进程第一次执行时，eax=？为什么要等于这个数？哪里的工作让 eax 等于这样一个数？\n\n  答：子进程第一次执行是eax =0;，为了让代码```if (!fork()) {....}```区分子进程和父进程。\n\n- （2）这段代码中的 ebx 和 ecx 来自哪里，是什么含义，为什么要通过这些代码将其写到子进程的内核栈中？\n\n  答：这段代码中的ebx和ecx是栈切换执行switch_to时压入的值，我觉得是为了切换进程时保护现场而压入的，在fork创建新进程（子进程）时添加这些代码进新进程内核栈是为了模拟父进程的内核栈。\n\n- （3）这段代码中的 ebp 来自哪里，是什么含义，为什么要做这样的设置？可以不设置吗？为什么？\n\n  答：ebp也是来自基于栈切换的switch_to（）时压入的，是当前进程在进行切换时保存当前进程现场的操作，为什么要这样设置呢？因为创建新的子进程当进程切换时需要pop所以这里是为了模拟父进程的内核栈.\n\n#### 问题 3\n\n为什么要在切换完 LDT 之后要重新设置 fs=0x17？而且为什么重设操作要出现在切换完 LDT 之后，出现在 LDT 之前又会怎么样？\n\n答：因为需要重新设置fs对应的隐藏寄存器的段基址和段限长，所以需要重设操作，出现在LDT之前则没有任何意义不会有任何改变。\n\n\n\n## TSS的切换\n\n### TSS (task state segment)\n\nThe **task state segment (TTS)** is a structure on x86-based computers which holds information about a task, it is used by the operating system kernel for task managenment. specifically, the following information is stored in the TSS:\n\n- processor register state\n- I/O port permissions\n- Inner-lever stack pointers (内部堆栈指针)\n- Previous TSS link\n\nAll this information should be stored at specific locations within the TSS as specified in the IA-32 manuals.\n\n### TR (task register).\n\nThe TR register is a 16-bit register which holds a segment selector for the TSS. It may be loaded through the LTR instruction. LTR is a privileged instruction and acts in a manner similar to other segment register loads. The task register has two parts: a portion visible and accessible by the programmer and an invisible one that is automatically loaded from the TSS descriptor.<br>\n\n\n\nIn the current Linux 0.11,the real completion of the  process switch is accomplished by the task state segment(Task State Segment,TSS for short).\n\nSpecifically, when designing the \"Intel architecture\"(that is the x86 system structure),\n\neach task(process or thread) corresponds to an independent TSS. TSS is a  corresponds\n\nto an independent TSS. TSS is a structure in memory that contains almost all CPU registers Image. There is a Task Register(TR for short) pointing to the TSS structure corresponding to the current process. \n\nThe so-called TSS switch is copies almost all the registers in the CPU(current) to the TSS \n\nstructure pointed  by TR.\n\nAt the same time a target TSS is found ,that is the TSS corresponding to the next process to be switched to, and the register image of TSS structure of next process  stored in CPU.\n\nIn here  the execution site switching  is completed.\n\nas shown in the figure  blow:\n\n![](process-switch-base-on-stack-switch/wm.png)\n\nInter architecture provides the command ljmp to achieve the process switch .\n\n\n\nThe specific working process is:\n\n- First, use the segment selector in TR to find the current TSS structure memory location in GDT table.\n- second,  the register image of current CPU  store to the TSS structure memory  of finding before.(store the current site !)\n- Now, we need to find the target process site and copy the register image of the target   process to the CPU. This just means we need to find TSS of the next process in  GDT table and copy the context of TSS structure memory to CPU.\n- when the register image of TSS structure of the target process store in CPU completely, that means achieve switch to target process site, now, the target process becomes the current process. \n- Finally , TR should be changed to point to the location of the target TSS segment in the GDT table.<br>\n\nall explain above  through one sentence execute  (ljmp segment selector : intra-segment offset).\n\nSo switch_to (a instruction) base on TSS for process and thread switching is actually a ljmp instruction：\n\n```assembly\n#define switch_to(n) {\\\nstruct {long a,b;} __tmp; \\\n__asm__(\"cmpl %%ecx,current\\n\\t\" \\\t \n\t\"je 1f\\n\\t\" \\\n\t\"movw %%dx,%1\\n\\t\" \\\n\t\"xchgl %%ecx,current\\n\\t\" \\\n\t\"ljmp *%0\\n\\t\" \\\n\t\"cmpl %%ecx,last_task_used_math\\n\\t\" \\\n\t\"jne 1f\\n\\t\" \\\n\t\"clts\\n\" \\\n\t\"1:\" \\\n\t::\"m\" (*&__tmp.a),\"m\" (*&__tmp.b), \\\n\t\"d\" (_TSS(n)),\"c\" ((long) task[n])); \\\n}\n\n#define FIRST_TSS_ENTRY 4\n\n#define TSS(n) (((unsigned long) n) << 4) + (FIRST_TSS_ENTRY << 3))\n```\n\nEach process is divided into two part which correspond to TSS and LDT, respectively. \n\nTSS and LDT are both 64-bit(8 bytes).\n\nso  _TSS(n) = n * 16 + 4 * 8 (bytes).\n\n**ljmp instruction can be used in two ways, which are \"ljmp $ segment selector, $ offset\" and \"ljmp * mem48\" respectively. In here \"ljmp *% 0\" used the second way, \"ljmp * mem48\" mean jump to Logical address (48 bits) of the mem48 contain (mem48 also is an address), the hight 16 bits of 48 bits correspond to segment_selector, the low 32 bits of 48 bits correspond to offset. So ,the core of switch_to is ljmp 0 , n\\*16+4\\*8  **\n\n**!! it is worth out attention:**\n\nThe '\\*' of the \"ljmp *mem48\" is different from '\\*' of C language . The '\\*' of the \"ljmp *mem48\"  is mean indirect jump.\n\n\n\n## 本次实验的内容\n\nAlthough ，the task switching can be completed with one instruction, the execution time of the instruction is very long . It take almost 200 time cycles to complete the task switch using the ljmp instruction. if we want to increase the switching speed ,we can use the heap_stack switch instead of ljmp instruction.\n\nMoreover. The use of heap_stack switching can also use the parallel optimization technology of instruction pipeline, while making design of the CPU simple.\n\nTherefore, both Windows and Linux use the heap_stack switching technology to handle process switching.\n\nTherefore rewriter the code of \"switch_to\" to  use the heap_stack switch instead of TSS is my task.\n\nTo achieve a process switch base on kernel , we need do three things :\n\n1. Rewrite \"switch_to\"\n2. Connect the rewritten \"switch_to\" and schedule() functions together.\n3. Modify the current fork().\n\n## schedule 与 switch_to\n\n### modify shcedule()\n\nThe task of schedule( ) is finding the position \"next\" of the next process in the array.  The \"next\" is equal to \"n\" of the GDT table(TSS[n]=n\\*16+4\\*8).  if we get the \"next\" in the schedule function, we can use \"switch_to (next)\" function move to another process.\n\nNow, we use heap_stack switching instead of TSS switching ,and so we need informations of  current process PCB 、target process PCB、current process kernel stack and target process kernel stack.\n\n The kernel stack of the Linux 0.11 process and the PCB of process are stored on the same page of memory (a 4kB size page of memory).The PCB is located at the low address of this page of memory ,and the stack is located at the high address of this page of memory.\n\nIn addition, since the PCB of the current process is pointed with a global variable \"current\", we  need to tell new switch_to () function a pointer to the target process PCB and we need to tell new switch_to function LDT(next) instead of TSS (next). Just mean ,we don't need TSS in each process now（we can delete code about TSS），but  also need LDT of  process.\n\n\n\nIn summary ,the current schedule() function (in kernel/sched.c) needs to be slightly modified, that is the following code:\n\n```C\nif ((*p)->state == TASK_RUNNING && (*p)->counter > c) \n    c = (*p)->counter, next = i; \n\n//......\n\nswitch_to(next);\n```\n\nmodify:\n\n```C\nif ((*p)->state == TASK_RUNNING && (*p)->counter > c) \n    c = (*p)->counter, next = i, pnext = *p;\n\n//.......\n\nswitch_to(pnext, _LDT(next)); \n```\n\n### Rewrite switch_to()\n\nRewrite switch_to() function is the most important step in this experiment.\n\nThis function, in turn, completes the following functions:\n\n- first, we need to handle the stack by the assembly language. just handle the ebp register.\n- second, we need to compare the parameter of stack about the next process's PCB with the current process.\n- third, we need in turn to complete PCB switch, rewrite kernel stack pointer of TSS, switch kernel stack, switch LDT and switch PC pointer (CS:EIP).\n\n```assembly\nswitch_to:\n    pushl %ebp\n    movl %esp,%ebp\n    pushl %ecx\n    pushl %ebx\n    pushl %eax\n    movl 8(%ebp),%ebx\n    cmpl %ebx,current\n    je 1f\n! 切换PCB\n    ! ...\n! TSS中的内核栈指针的重写\n    ! ...\n! 切换内核栈\n    ! ...\n! 切换LDT\n    ! ...\n    movl $0x17,%ecx\n    mov %cx,%fs\n! 和后面的 clts 配合来处理协处理器，由于和主题关系不大，此处不做论述\n    cmpl %eax,last_task_used_math \n    jne 1f\n    clts\n\n1:    popl %eax\n    popl %ebx\n    popl %ecx\n    popl %ebp\nret\n```\n\n**Switch PCB pointer**\n\nebx register is next process's PCB pointer.\n\nThe function of xchgl instruction  is to exchange contents between  two register.\n\n```assembly\nmovl %ebx,%eax\nxchgl %eax,current\t\n```\n\n**Rewrite pointer of kernel stack stored in  TSS**\n\nThe current TSS is different from TSS before. Before TSS is a global array but current TSS is a global variable. We need to redefine TSS pointer through two sentences.\n\n```\n#define ESP0 =4\nstruct tss_struct *tss = (init_task.task.tss);\n```\n\ncurrent TSS pointer ```tss``` similar current process pointer ```current```.\n\nThis has already discussed in detail before. In the system interrupt ,we need to find and determine the location of the kernel stack. and push the five register SS : ESP, CS: EIP and EFLAGS in user mode onto kernel stack. This is the key bridge between the user mode (user stack) and kernel mode (kernel stack). The key of find kernel stack position is use the TR register point to current TSS.\n\nAlthough we don't need to use TSS for switch process in now.  We still stay the intel interrupt system. So we still need it that is we define global variable ```tss```. All processes share that variable.\n\n```assembly\nmovl tss,%ecx\naddl $4096,%ebx\nmovl %ebx,ESP0(%ecx)\n```\n\nESP0 = 4 ,the ecx + ESP0 equal to position of kernel stack pointer in TSS (esp0).\n\n```C\nstruct tss_struct {\n\tlong\tback_link;\t/* 16 high bits zero */\n\tlong\tesp0;\n\tlong\tss0;\t\t/* 16 high bits zero */\n\tlong\tesp1;\n\tlong\tss1;\t\t/* 16 high bits zero */\n\tlong\tesp2;\n\tlong\tss2;\t\t/* 16 high bits zero */\n\tlong\tcr3;\n\tlong\teip;\n\tlong\teflags;\n\tlong\teax,ecx,edx,ebx;\n\tlong\tesp;\n\tlong\tebp;\n\tlong\tesi;\n\tlong\tedi;\n\tlong\tes;\t\t/* 16 high bits zero */\n\tlong\tcs;\t\t/* 16 high bits zero */\n\tlong\tss;\t\t/* 16 high bits zero */\n\tlong\tds;\t\t/* 16 high bits zero */\n\tlong\tfs;\t\t/* 16 high bits zero */\n\tlong\tgs;\t\t/* 16 high bits zero */\n\tlong\tldt;\t\t/* 16 high bits zero */\n\tlong\ttrace_bitmap;\t/* bits: trace 0, bitmap 16-31 */\n\tstruct i387_struct i387;\n};\n```\n\n**switch kernel stack :**\n\nIt's also simple to complete the kernel stack switch. we just need to store value of esp register of the current process  onto the current PCB , and take corresponding esp value of next PCB out and put it into esp register.\n\nsince Linux -0.11  didn't define the variable of kernel stack pointer in PCB(task_struct). so we need to add a variable ```kernelstack``` to Linux-0.11 PCB, we still need define another variable ``` KERNEL_STACK = 12```  for determine variable of  ```kernelstack``` position in PCB.\n\n**Why KERNEL_STACK equal to 12 ?**\n\nbecause the kernel code have many  assembly hardcodes about manipulating this structure, so,if we add the variable ```kernelstack``` in other position, we need to modify kernel code in many difference place. \n\n```C\nKERNEL_STACK = 12\nmovl %esp,KERNEL_STACK(%eax)\t! 保存上一个进程的栈顶指针\n! 再取一下 ebx，因为前面修改过 ebx 的值,此时eax的值等于上一个进程的PCB指针\nmovl 8(%ebp),%ebx\t\nmovl KERNEL_STACK(%ebx),%esp\t！取下个进程的栈顶指针放入esp\n```\n\ntask_struct:\n\n```C\n// 在 include/linux/sched.h 中\nstruct task_struct {\n    long state;\n    long counter;\n    long priority;\n    long kernelstack;\n//......\n```\n\nbecause we modify the PCB structure,  we also need to modify initialization code of 0 process PCB structure .Modify ```#define INIT_TASK { 0,15,15, 0,{ { },},0,...```  to ``` #define INIT_TASK { 0,15,15,PAGE_SIZE+(long)&init_task, 0,{ { },},0,...```\n\n**switch LDT**\n\n```assembly\nmovl 12(%ebp),%ecx\nlldt %cx\n!上面使改LDT代码\nmovl $0x17,%ecx\nmov %cx,%fs\n```\n\nWhy we have to add two code ```movl $0x17,%ecx``` ``` mov %cx,%fs``` behind that code of switch LDT.\n\nbecause we need to change the segment base address and segment length limit in the hidden register about fs.\n\nExamlpe with CS. The hidden register for increase CPU processing speed.\n\n![](process-switch-base-on-stack-switch/wm1.png)\n\n**switch PC （switch to next process）**\n\n```assembly\n1:    popl %eax\n    popl %ebx\n    popl %ecx\n    popl %ebp\nret\n```\n\n**kernel stack  now**\n\n![](https://img-blog.csdnimg.cn/20190819230403925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTc2MTQ3OA==,size_16,color_FFFFFF,t_70)\n\nExecute those codes to turn to the next process,if it isn't come here through code ```je 1f```. Because we have been changed the kernel stack before. we ```pop  (eax ,ebx,ecx,ebp) ``` is register of next process.   ret instruction equal to ```pop IP```.So we execute ```ret``` turn to schedule() function tail of next process. Now ! we completed the stack switch perfectly.\n\n## modify fork()\n\n**Why we need to modify fork() function ?**\n\n**Because, we need to simulate the parent process's kernel stack for the newly created child process. **\n\nNow, we need to modify the fork() function. it is to associate the process's user stack, user program to its kernel stack with SS: ESP, CS: IP, which is pushed in the kernel stack.\n\nIn addition, since fork() function-core is let the child process to use code, data, and stack of the parent process . the fork core has not changed, although we use the stack switching.\n\n![](process-switch-base-on-stack-switch/wm2.png)\n\nDon't hard to imagine. modify fork which  mean  initialize child process's kernel stack. In ```copy_process () ```as the core code of ```fork ()```, it used to apply a page of memory as process PCB. The kernel stack address position equal pointer p position add the one page of memory size.  so the code ```krnstack = (*long)(PAGE_SIZE + (long)p)``` can find the child process kernel stack position. next step is to initialize the content of krnstack pointer .\n\n```C\n/*modify in fork()*/\nlong *krnstack;\np = (struct task_struct *) get_free_page();\nkrnstack = (long)(PAGE_SIZE +(long)p);\n *(--krnstack) = ss & 0xffff;\n *(--krnstack) = esp;\n *(--krnstack) = eflags;\n *(--krnstack) = cs & 0xffff;\n *(--krnstack) = eip;\n *(--krnstack) = ds & 0xffff;\n *(--krnstack) = es & 0xffff;\n *(--krnstack) = fs & 0xffff;\n *(--krnstack) = gs & 0xffff;\n *(--krnstack) = esi;\n *(--krnstack) = edi;\n *(--krnstack) = edx;\n *(--krnstack) = (long)first_return_from_kernel;\n *(--krnstack) = ebp;\n *(--krnstack) = ecx;\n *(--krnstack) = ebx;\n *(--krnstack) = 0;\n p->kernelstack = krnstack;\n ......\n\n```\n\nThose code for simulate parent kernel stack for child process! \n\nMake a attention !\n\n```c\n*(--krnstack) = (long)first_return_from_kernel;\n*(--krnstack) = 0;\n```\n\nWe need to code a first_return_from_kernel as a mark! If we return to address first_return_from_kernel. We need to execute those code following.\n\n```assembly\n/*modify in system_call.s*/\n.align 2\nfirst_return_from_kernel:\npopl %edx\npopl %edi\npopl %esi\npop %gs\npop %fs\npop %es\npop %ds\niret\n```\n\ninstruction ```iret``` equal to \n\n```assembly\npop eip\npop cs\npop eflags\npop esp\npop ss\n```\n\n instruction ```*(--krnstack) = 0;```  Means eax =0 for distinguish parent process and child process.\n\n**In the end , don't forget add the two code following to corresponding .c file **\n\n```C\nextern void first_return_kernel(void); // in the fork()\nextern long switch_to(struct task_struct *p , unsigned long _ldt); // in the sched.c\n```\n\n## Modify step\n\n**Modify in system_call.s**\n\nWrite the switch_to、first_return_from_kernel、etc in the system_call.s**\n\n```assembly\n# Don't forget to change the hardcode.\n# Because I forget to change the hardcode , I stayed here so long time.\nstate\t= 0\t\t# these are offsets into the task-struct.\ncounter\t= 4\npriority = 8\nKERNEL_STACK = 12\nsignal\t= 16\nsigaction = 20\t\t# MUST be 16 (=len of sigaction)\nblocked = (33*16+4)\n\n# Define as a global variable，can be used in other file with the keyword extern declaration.\n.globl first_return_from_kernel, switch_to \n.align 2\nswitch_to:\n\tpushl %ebp\n\tmovl %esp, %ebp\n\tpushl %ecx\n\tpushl %ebx\n\tpushl %eax \n\tmovl 8(%ebp), %ebx \n\tcmpl %ebx, current \n\tje 1f\n\tmovl %ebx, %eax\n\txchgl %eax, current # eax=old_current, so current=pnext\n\tmovl tss, %ecx\t\t# ecx = tss of pnext, it also the new current\n\taddl $4096, %ebx\t# ebx=the top of current kernel stack(pnext)\n\tmovl %ebx, 4(%ecx)\n\tmovl %esp, KERNEL_STACK(%eax)\n\tmovl 8(%ebp), %ebx \n\tmovl KERNEL_STACK(%ebx), %esp\n\tmovl 12(%ebp), %ecx\n\tlldt %cx\n\tmovl $0x17, %ecx\n\tmov %cx, %fs\n\tcmpl %eax, last_task_used_math\t\n\tjne 1f\n\tclts\n1:  popl %eax\n\tpopl %ebx\n\tpopl %ecx\n\tpopl %ebp\n\tret\n.align 2\nfirst_return_from_kernel:\n\tpopl %edx\n\tpopl %edi\n\tpopl %esi\n\tpop %gs\n\tpop %fs\n\tpop %es\n\tpop %ds\n\tiret\n```\n\n**Modify sched.h **\n\n```C\nstruct task_struct {\n/* these are hardcoded - don't touch */\n\tlong state;\t/* -1 unrunnable, 0 runnable, >0 stopped */\n\tlong counter;\n\tlong priority;\n\tlong kernelstack;\n\tlong signal;\n\tstruct sigaction sigaction[32];\n\tlong blocked;\t/* bitmap of masked signals */\n    ......\n}\n#define INIT_TASK \\\n/* state etc */\t{ 0,15,15,PAGE_SIZE+(long)&init_task, \\\n/* signals */\t0,{{},},0, \\\n.................................\n\n /*注释掉\n#define switch_to(n) {\\\nstruct {long a,b;} __tmp; \\\n__asm__(\"cmpl %%ecx,current\\n\\t\" \\\n\t\"je 1f\\n\\t\" \\\n\t\"movw %%dx,%1\\n\\t\" \\\n\t\"xchgl %%ecx,current\\n\\t\" \\\n\t\"ljmp *%0\\n\\t\" \\\n\t\"cmpl %%ecx,last_task_used_math\\n\\t\" \\\n\t\"jne 1f\\n\\t\" \\\n\t\"clts\\n\" \\\n\t\"1:\" \\\n\t::\"m\" (*&__tmp.a),\"m\" (*&__tmp.b), \\\n\t\"d\" (_TSS(n)),\"c\" ((long) task[n])); \\\n}\n*/\n  \n```\n\n**Modify sched.c**\n\n```C\nextern long switch_to(struct task_struct *p , unsigned long _ldt);\nstruct tss_struct * tss = &(init_task.task.tss);\nvoid schedule(void)\n{\n\tint i,next,c;\n\tstruct task_struct ** p;\n\tstruct task_struct *pnext = &(init_task.task);\n\n/* check alarm, wake up any interruptible tasks that have got a signal */\n\n\tfor(p = &LAST_TASK ; p > &FIRST_TASK ; --p)\n\t\tif (*p) {\n\t\t\tif ((*p)->alarm && (*p)->alarm < jiffies) {\n\t\t\t\t\t(*p)->signal |= (1<<(SIGALRM-1));\n\t\t\t\t\t(*p)->alarm = 0;\n\t\t\t\t}\n\t\t\tif (((*p)->signal & ~(_BLOCKABLE & (*p)->blocked)) &&\n\t\t\t(*p)->state==TASK_INTERRUPTIBLE)\n\t\t\t\t(*p)->state=TASK_RUNNING;\n\t\t}\n\n/* this is the scheduler proper: */\n\n\twhile (1) {\n\t\tc = -1;\n\t\tnext = 0;\n\t\ti = NR_TASKS;\n\t\tp = &task[NR_TASKS];\n\t\twhile (--i) {\n\t\t\tif (!*--p)\n\t\t\t\tcontinue;\n\t\t\tif ((*p)->state == TASK_RUNNING && (*p)->counter > c){\n\t\t\t\tc = (*p)->counter, next = i;\n\t\t\t\tpnext = *p;\n\t\t\t}\n\t\t}\n\t\tif (c) break;\n\t\tfor(p = &LAST_TASK ; p > &FIRST_TASK ; --p)\n\t\t\tif (*p)\n\t\t\t\t(*p)->counter = ((*p)->counter >> 1) +\n\t\t\t\t\t\t(*p)->priority;\n\t}\n\tswitch_to(pnext,_LDT(next));\n}\n```\n\n**Modify fork()**\n\n```C\nextern void first_return_kernel(void);  \n\nint copy_process(int nr,long ebp,long edi,long esi,long gs,long none,\n\t\tlong ebx,long ecx,long edx,\n\t\tlong fs,long es,long ds,\n\t\tlong eip,long cs,long eflags,long esp,long ss)\n{\n\tstruct task_struct *p;\n\tint i;\n\tstruct file *f;\n\n\tp = (struct task_struct *) get_free_page();\n\tif (!p)\n\t\treturn -EAGAIN;\n\ttask[nr] = p;\n\t*p = *current;\t/* NOTE! this doesn't copy the supervisor stack */\n\tp->state = TASK_UNINTERRUPTIBLE;\n\tp->pid = last_pid;\n\tp->father = current->pid;\n\tp->counter = p->priority;\n\tlong * krnstack ;\n\tkrnstack = (long *) (PAGE_SIZE + (long) p);\n    *(--krnstack) = ss & 0xffff;\n    *(--krnstack) = esp;\n    *(--krnstack) = eflags;\n    *(--krnstack) = cs & 0xffff;\n    *(--krnstack) = eip;\n *(--krnstack) = ds & 0xffff; \n   *(--krnstack) = es & 0xffff; \n   *(--krnstack) = fs & 0xffff; \n *(--krnstack) = gs & 0xffff;\n  *(--krnstack) = esi; \n *(--krnstack) = edi; \n    *(--krnstack) = edx;\n\t*(--krnstack) =(long) first_return_kernel;\n    *(--krnstack) = ebp;\n    *(--krnstack) = ecx;\n    *(--krnstack) = ebx;\n    *(--krnstack) = 0;\n\tp->kernelstack = krnstack;\n\tp->signal = 0;\n\tp->alarm = 0;\n\tp->leader = 0;\t\t/* process leadership doesn't inherit */\n\tp->utime = p->stime = 0;\n\tp->cutime = p->cstime = 0;\n\tp->start_time = jiffies;\n\tp->tss.back_link = 0;\n\tp->tss.esp0 = PAGE_SIZE + (long) p;\n\tp->tss.ss0 = 0x10;\n\tp->tss.eip = eip;\n\tp->tss.eflags = eflags;\n\tp->tss.eax = 0;\n\tp->tss.ecx = ecx;\n\tp->tss.edx = edx;\n\tp->tss.ebx = ebx;\n\tp->tss.esp = esp;\n\tp->tss.ebp = ebp;\n\tp->tss.esi = esi;\n\tp->tss.edi = edi;\n\tp->tss.es = es & 0xffff;\n\tp->tss.cs = cs & 0xffff;\n\tp->tss.ss = ss & 0xffff;\n\tp->tss.ds = ds & 0xffff;\n\tp->tss.fs = fs & 0xffff;\n\tp->tss.gs = gs & 0xffff;\n\tp->tss.ldt = _LDT(nr);\n\tp->tss.trace_bitmap = 0x80000000;\n\tif (last_task_used_math == current)\n\t\t__asm__(\"clts ; fnsave %0\"::\"m\" (p->tss.i387));\n\tif (copy_mem(nr,p)) {\n\t\ttask[nr] = NULL;\n\t\tfree_page((long) p);\n\t\treturn -EAGAIN;\n\t}\n\tfor (i=0; i<NR_OPEN;i++)\n\t\tif ((f=p->filp[i]))\n\t\t\tf->f_count++;\n\tif (current->pwd)\n\t\tcurrent->pwd->i_count++;\n\tif (current->root)\n\t\tcurrent->root->i_count++;\n\tif (current->executable)\n\t\tcurrent->executable->i_count++;\n\tset_tss_desc(gdt+(nr<<1)+FIRST_TSS_ENTRY,&(p->tss));\n\tset_ldt_desc(gdt+(nr<<1)+FIRST_LDT_ENTRY,&(p->ldt));\n\tp->state = TASK_RUNNING;\t/* do this last, just in case */\n\treturn last_pid;\n}\n```\n\n","source":"_posts/process-switch-base-on-stack-switch.md","raw":"---\ntitle: process-switch-base-on-stack-switch\ndate: 2020-02-16 15:57:03\ntags: -操作系统\n\n---\n\n# 基于内核栈切换的进程切换\n\n## 实验目的\n\n- 深入理解进程和进程切换的概念；\n- 综合应用进程、CPU 管理、PCB、LDT、内核栈、内核态等知识解决实际问题；\n- 开始建立系统认识。\n\n## 实验内容\n\n现在的 Linux 0.11 采用 TSS（后面会有详细论述）和一条指令就能完成任务切换，虽然简单，但这指令的执行时间却很长，在实现任务切换时大概需要 200 多个时钟周期。\n\n而通过堆栈实现任务切换可能要更快，而且采用堆栈的切换还可以使用指令流水的并行优化技术，同时又使得 CPU 的设计变得简单。所以无论是 Linux 还是 Windows，进程/线程的切换都没有使用 Intel 提供的这种 TSS 切换手段，而都是通过堆栈实现的。\n\n本次实践项目就是将 Linux 0.11 中采用的 TSS 切换部分去掉，取而代之的是基于堆栈的切换程序。具体的说，就是将 Linux 0.11 中的 `switch_to` 实现去掉，写成一段基于堆栈切换的代码。\n\n本次实验包括如下内容：\n\n- 编写汇编程序 `switch_to`：\n- 完成主体框架；\n- 在主体框架下依次完成 PCB 切换、内核栈切换、LDT 切换等；\n- 修改 `fork()`，由于是基于内核栈的切换，所以进程需要创建出能完成内核栈切换的样子。\n- 修改 PCB，即 `task_struct` 结构，增加相应的内容域，同时处理由于修改了 task_struct 所造成的影响。\n- 用修改后的 Linux 0.11 仍然可以启动、可以正常使用。\n- （选做）分析实验 3 的日志体会修改前后系统运行的差别。\n\n## 实验报告\n\n回答下面三个题：\n\n#### 问题 1\n\n针对下面的代码片段：\n\n```\nmovl tss,%ecx\naddl $4096,%ebx\nmovl %ebx,ESP0(%ecx)\n```\n\n回答问题：\n\n- （1）为什么要加 4096；\n\n  答：因为一页内存低地址存进程PCB，高地址是堆栈，linux-0.11 一页内存大小为4Kb,所以+4096。\n\n- （2）为什么没有设置 tss 中的 ss0。\n\n  答\n\n#### 问题 2\n\n针对代码片段：\n\n```c\n*(--krnstack) = ebp;\n*(--krnstack) = ecx;\n*(--krnstack) = ebx;\n*(--krnstack) = 0;\n```\n\n回答问题：\n\n- （1）子进程第一次执行时，eax=？为什么要等于这个数？哪里的工作让 eax 等于这样一个数？\n\n  答：子进程第一次执行是eax =0;，为了让代码```if (!fork()) {....}```区分子进程和父进程。\n\n- （2）这段代码中的 ebx 和 ecx 来自哪里，是什么含义，为什么要通过这些代码将其写到子进程的内核栈中？\n\n  答：这段代码中的ebx和ecx是栈切换执行switch_to时压入的值，我觉得是为了切换进程时保护现场而压入的，在fork创建新进程（子进程）时添加这些代码进新进程内核栈是为了模拟父进程的内核栈。\n\n- （3）这段代码中的 ebp 来自哪里，是什么含义，为什么要做这样的设置？可以不设置吗？为什么？\n\n  答：ebp也是来自基于栈切换的switch_to（）时压入的，是当前进程在进行切换时保存当前进程现场的操作，为什么要这样设置呢？因为创建新的子进程当进程切换时需要pop所以这里是为了模拟父进程的内核栈.\n\n#### 问题 3\n\n为什么要在切换完 LDT 之后要重新设置 fs=0x17？而且为什么重设操作要出现在切换完 LDT 之后，出现在 LDT 之前又会怎么样？\n\n答：因为需要重新设置fs对应的隐藏寄存器的段基址和段限长，所以需要重设操作，出现在LDT之前则没有任何意义不会有任何改变。\n\n\n\n## TSS的切换\n\n### TSS (task state segment)\n\nThe **task state segment (TTS)** is a structure on x86-based computers which holds information about a task, it is used by the operating system kernel for task managenment. specifically, the following information is stored in the TSS:\n\n- processor register state\n- I/O port permissions\n- Inner-lever stack pointers (内部堆栈指针)\n- Previous TSS link\n\nAll this information should be stored at specific locations within the TSS as specified in the IA-32 manuals.\n\n### TR (task register).\n\nThe TR register is a 16-bit register which holds a segment selector for the TSS. It may be loaded through the LTR instruction. LTR is a privileged instruction and acts in a manner similar to other segment register loads. The task register has two parts: a portion visible and accessible by the programmer and an invisible one that is automatically loaded from the TSS descriptor.<br>\n\n\n\nIn the current Linux 0.11,the real completion of the  process switch is accomplished by the task state segment(Task State Segment,TSS for short).\n\nSpecifically, when designing the \"Intel architecture\"(that is the x86 system structure),\n\neach task(process or thread) corresponds to an independent TSS. TSS is a  corresponds\n\nto an independent TSS. TSS is a structure in memory that contains almost all CPU registers Image. There is a Task Register(TR for short) pointing to the TSS structure corresponding to the current process. \n\nThe so-called TSS switch is copies almost all the registers in the CPU(current) to the TSS \n\nstructure pointed  by TR.\n\nAt the same time a target TSS is found ,that is the TSS corresponding to the next process to be switched to, and the register image of TSS structure of next process  stored in CPU.\n\nIn here  the execution site switching  is completed.\n\nas shown in the figure  blow:\n\n![](process-switch-base-on-stack-switch/wm.png)\n\nInter architecture provides the command ljmp to achieve the process switch .\n\n\n\nThe specific working process is:\n\n- First, use the segment selector in TR to find the current TSS structure memory location in GDT table.\n- second,  the register image of current CPU  store to the TSS structure memory  of finding before.(store the current site !)\n- Now, we need to find the target process site and copy the register image of the target   process to the CPU. This just means we need to find TSS of the next process in  GDT table and copy the context of TSS structure memory to CPU.\n- when the register image of TSS structure of the target process store in CPU completely, that means achieve switch to target process site, now, the target process becomes the current process. \n- Finally , TR should be changed to point to the location of the target TSS segment in the GDT table.<br>\n\nall explain above  through one sentence execute  (ljmp segment selector : intra-segment offset).\n\nSo switch_to (a instruction) base on TSS for process and thread switching is actually a ljmp instruction：\n\n```assembly\n#define switch_to(n) {\\\nstruct {long a,b;} __tmp; \\\n__asm__(\"cmpl %%ecx,current\\n\\t\" \\\t \n\t\"je 1f\\n\\t\" \\\n\t\"movw %%dx,%1\\n\\t\" \\\n\t\"xchgl %%ecx,current\\n\\t\" \\\n\t\"ljmp *%0\\n\\t\" \\\n\t\"cmpl %%ecx,last_task_used_math\\n\\t\" \\\n\t\"jne 1f\\n\\t\" \\\n\t\"clts\\n\" \\\n\t\"1:\" \\\n\t::\"m\" (*&__tmp.a),\"m\" (*&__tmp.b), \\\n\t\"d\" (_TSS(n)),\"c\" ((long) task[n])); \\\n}\n\n#define FIRST_TSS_ENTRY 4\n\n#define TSS(n) (((unsigned long) n) << 4) + (FIRST_TSS_ENTRY << 3))\n```\n\nEach process is divided into two part which correspond to TSS and LDT, respectively. \n\nTSS and LDT are both 64-bit(8 bytes).\n\nso  _TSS(n) = n * 16 + 4 * 8 (bytes).\n\n**ljmp instruction can be used in two ways, which are \"ljmp $ segment selector, $ offset\" and \"ljmp * mem48\" respectively. In here \"ljmp *% 0\" used the second way, \"ljmp * mem48\" mean jump to Logical address (48 bits) of the mem48 contain (mem48 also is an address), the hight 16 bits of 48 bits correspond to segment_selector, the low 32 bits of 48 bits correspond to offset. So ,the core of switch_to is ljmp 0 , n\\*16+4\\*8  **\n\n**!! it is worth out attention:**\n\nThe '\\*' of the \"ljmp *mem48\" is different from '\\*' of C language . The '\\*' of the \"ljmp *mem48\"  is mean indirect jump.\n\n\n\n## 本次实验的内容\n\nAlthough ，the task switching can be completed with one instruction, the execution time of the instruction is very long . It take almost 200 time cycles to complete the task switch using the ljmp instruction. if we want to increase the switching speed ,we can use the heap_stack switch instead of ljmp instruction.\n\nMoreover. The use of heap_stack switching can also use the parallel optimization technology of instruction pipeline, while making design of the CPU simple.\n\nTherefore, both Windows and Linux use the heap_stack switching technology to handle process switching.\n\nTherefore rewriter the code of \"switch_to\" to  use the heap_stack switch instead of TSS is my task.\n\nTo achieve a process switch base on kernel , we need do three things :\n\n1. Rewrite \"switch_to\"\n2. Connect the rewritten \"switch_to\" and schedule() functions together.\n3. Modify the current fork().\n\n## schedule 与 switch_to\n\n### modify shcedule()\n\nThe task of schedule( ) is finding the position \"next\" of the next process in the array.  The \"next\" is equal to \"n\" of the GDT table(TSS[n]=n\\*16+4\\*8).  if we get the \"next\" in the schedule function, we can use \"switch_to (next)\" function move to another process.\n\nNow, we use heap_stack switching instead of TSS switching ,and so we need informations of  current process PCB 、target process PCB、current process kernel stack and target process kernel stack.\n\n The kernel stack of the Linux 0.11 process and the PCB of process are stored on the same page of memory (a 4kB size page of memory).The PCB is located at the low address of this page of memory ,and the stack is located at the high address of this page of memory.\n\nIn addition, since the PCB of the current process is pointed with a global variable \"current\", we  need to tell new switch_to () function a pointer to the target process PCB and we need to tell new switch_to function LDT(next) instead of TSS (next). Just mean ,we don't need TSS in each process now（we can delete code about TSS），but  also need LDT of  process.\n\n\n\nIn summary ,the current schedule() function (in kernel/sched.c) needs to be slightly modified, that is the following code:\n\n```C\nif ((*p)->state == TASK_RUNNING && (*p)->counter > c) \n    c = (*p)->counter, next = i; \n\n//......\n\nswitch_to(next);\n```\n\nmodify:\n\n```C\nif ((*p)->state == TASK_RUNNING && (*p)->counter > c) \n    c = (*p)->counter, next = i, pnext = *p;\n\n//.......\n\nswitch_to(pnext, _LDT(next)); \n```\n\n### Rewrite switch_to()\n\nRewrite switch_to() function is the most important step in this experiment.\n\nThis function, in turn, completes the following functions:\n\n- first, we need to handle the stack by the assembly language. just handle the ebp register.\n- second, we need to compare the parameter of stack about the next process's PCB with the current process.\n- third, we need in turn to complete PCB switch, rewrite kernel stack pointer of TSS, switch kernel stack, switch LDT and switch PC pointer (CS:EIP).\n\n```assembly\nswitch_to:\n    pushl %ebp\n    movl %esp,%ebp\n    pushl %ecx\n    pushl %ebx\n    pushl %eax\n    movl 8(%ebp),%ebx\n    cmpl %ebx,current\n    je 1f\n! 切换PCB\n    ! ...\n! TSS中的内核栈指针的重写\n    ! ...\n! 切换内核栈\n    ! ...\n! 切换LDT\n    ! ...\n    movl $0x17,%ecx\n    mov %cx,%fs\n! 和后面的 clts 配合来处理协处理器，由于和主题关系不大，此处不做论述\n    cmpl %eax,last_task_used_math \n    jne 1f\n    clts\n\n1:    popl %eax\n    popl %ebx\n    popl %ecx\n    popl %ebp\nret\n```\n\n**Switch PCB pointer**\n\nebx register is next process's PCB pointer.\n\nThe function of xchgl instruction  is to exchange contents between  two register.\n\n```assembly\nmovl %ebx,%eax\nxchgl %eax,current\t\n```\n\n**Rewrite pointer of kernel stack stored in  TSS**\n\nThe current TSS is different from TSS before. Before TSS is a global array but current TSS is a global variable. We need to redefine TSS pointer through two sentences.\n\n```\n#define ESP0 =4\nstruct tss_struct *tss = (init_task.task.tss);\n```\n\ncurrent TSS pointer ```tss``` similar current process pointer ```current```.\n\nThis has already discussed in detail before. In the system interrupt ,we need to find and determine the location of the kernel stack. and push the five register SS : ESP, CS: EIP and EFLAGS in user mode onto kernel stack. This is the key bridge between the user mode (user stack) and kernel mode (kernel stack). The key of find kernel stack position is use the TR register point to current TSS.\n\nAlthough we don't need to use TSS for switch process in now.  We still stay the intel interrupt system. So we still need it that is we define global variable ```tss```. All processes share that variable.\n\n```assembly\nmovl tss,%ecx\naddl $4096,%ebx\nmovl %ebx,ESP0(%ecx)\n```\n\nESP0 = 4 ,the ecx + ESP0 equal to position of kernel stack pointer in TSS (esp0).\n\n```C\nstruct tss_struct {\n\tlong\tback_link;\t/* 16 high bits zero */\n\tlong\tesp0;\n\tlong\tss0;\t\t/* 16 high bits zero */\n\tlong\tesp1;\n\tlong\tss1;\t\t/* 16 high bits zero */\n\tlong\tesp2;\n\tlong\tss2;\t\t/* 16 high bits zero */\n\tlong\tcr3;\n\tlong\teip;\n\tlong\teflags;\n\tlong\teax,ecx,edx,ebx;\n\tlong\tesp;\n\tlong\tebp;\n\tlong\tesi;\n\tlong\tedi;\n\tlong\tes;\t\t/* 16 high bits zero */\n\tlong\tcs;\t\t/* 16 high bits zero */\n\tlong\tss;\t\t/* 16 high bits zero */\n\tlong\tds;\t\t/* 16 high bits zero */\n\tlong\tfs;\t\t/* 16 high bits zero */\n\tlong\tgs;\t\t/* 16 high bits zero */\n\tlong\tldt;\t\t/* 16 high bits zero */\n\tlong\ttrace_bitmap;\t/* bits: trace 0, bitmap 16-31 */\n\tstruct i387_struct i387;\n};\n```\n\n**switch kernel stack :**\n\nIt's also simple to complete the kernel stack switch. we just need to store value of esp register of the current process  onto the current PCB , and take corresponding esp value of next PCB out and put it into esp register.\n\nsince Linux -0.11  didn't define the variable of kernel stack pointer in PCB(task_struct). so we need to add a variable ```kernelstack``` to Linux-0.11 PCB, we still need define another variable ``` KERNEL_STACK = 12```  for determine variable of  ```kernelstack``` position in PCB.\n\n**Why KERNEL_STACK equal to 12 ?**\n\nbecause the kernel code have many  assembly hardcodes about manipulating this structure, so,if we add the variable ```kernelstack``` in other position, we need to modify kernel code in many difference place. \n\n```C\nKERNEL_STACK = 12\nmovl %esp,KERNEL_STACK(%eax)\t! 保存上一个进程的栈顶指针\n! 再取一下 ebx，因为前面修改过 ebx 的值,此时eax的值等于上一个进程的PCB指针\nmovl 8(%ebp),%ebx\t\nmovl KERNEL_STACK(%ebx),%esp\t！取下个进程的栈顶指针放入esp\n```\n\ntask_struct:\n\n```C\n// 在 include/linux/sched.h 中\nstruct task_struct {\n    long state;\n    long counter;\n    long priority;\n    long kernelstack;\n//......\n```\n\nbecause we modify the PCB structure,  we also need to modify initialization code of 0 process PCB structure .Modify ```#define INIT_TASK { 0,15,15, 0,{ { },},0,...```  to ``` #define INIT_TASK { 0,15,15,PAGE_SIZE+(long)&init_task, 0,{ { },},0,...```\n\n**switch LDT**\n\n```assembly\nmovl 12(%ebp),%ecx\nlldt %cx\n!上面使改LDT代码\nmovl $0x17,%ecx\nmov %cx,%fs\n```\n\nWhy we have to add two code ```movl $0x17,%ecx``` ``` mov %cx,%fs``` behind that code of switch LDT.\n\nbecause we need to change the segment base address and segment length limit in the hidden register about fs.\n\nExamlpe with CS. The hidden register for increase CPU processing speed.\n\n![](process-switch-base-on-stack-switch/wm1.png)\n\n**switch PC （switch to next process）**\n\n```assembly\n1:    popl %eax\n    popl %ebx\n    popl %ecx\n    popl %ebp\nret\n```\n\n**kernel stack  now**\n\n![](https://img-blog.csdnimg.cn/20190819230403925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTc2MTQ3OA==,size_16,color_FFFFFF,t_70)\n\nExecute those codes to turn to the next process,if it isn't come here through code ```je 1f```. Because we have been changed the kernel stack before. we ```pop  (eax ,ebx,ecx,ebp) ``` is register of next process.   ret instruction equal to ```pop IP```.So we execute ```ret``` turn to schedule() function tail of next process. Now ! we completed the stack switch perfectly.\n\n## modify fork()\n\n**Why we need to modify fork() function ?**\n\n**Because, we need to simulate the parent process's kernel stack for the newly created child process. **\n\nNow, we need to modify the fork() function. it is to associate the process's user stack, user program to its kernel stack with SS: ESP, CS: IP, which is pushed in the kernel stack.\n\nIn addition, since fork() function-core is let the child process to use code, data, and stack of the parent process . the fork core has not changed, although we use the stack switching.\n\n![](process-switch-base-on-stack-switch/wm2.png)\n\nDon't hard to imagine. modify fork which  mean  initialize child process's kernel stack. In ```copy_process () ```as the core code of ```fork ()```, it used to apply a page of memory as process PCB. The kernel stack address position equal pointer p position add the one page of memory size.  so the code ```krnstack = (*long)(PAGE_SIZE + (long)p)``` can find the child process kernel stack position. next step is to initialize the content of krnstack pointer .\n\n```C\n/*modify in fork()*/\nlong *krnstack;\np = (struct task_struct *) get_free_page();\nkrnstack = (long)(PAGE_SIZE +(long)p);\n *(--krnstack) = ss & 0xffff;\n *(--krnstack) = esp;\n *(--krnstack) = eflags;\n *(--krnstack) = cs & 0xffff;\n *(--krnstack) = eip;\n *(--krnstack) = ds & 0xffff;\n *(--krnstack) = es & 0xffff;\n *(--krnstack) = fs & 0xffff;\n *(--krnstack) = gs & 0xffff;\n *(--krnstack) = esi;\n *(--krnstack) = edi;\n *(--krnstack) = edx;\n *(--krnstack) = (long)first_return_from_kernel;\n *(--krnstack) = ebp;\n *(--krnstack) = ecx;\n *(--krnstack) = ebx;\n *(--krnstack) = 0;\n p->kernelstack = krnstack;\n ......\n\n```\n\nThose code for simulate parent kernel stack for child process! \n\nMake a attention !\n\n```c\n*(--krnstack) = (long)first_return_from_kernel;\n*(--krnstack) = 0;\n```\n\nWe need to code a first_return_from_kernel as a mark! If we return to address first_return_from_kernel. We need to execute those code following.\n\n```assembly\n/*modify in system_call.s*/\n.align 2\nfirst_return_from_kernel:\npopl %edx\npopl %edi\npopl %esi\npop %gs\npop %fs\npop %es\npop %ds\niret\n```\n\ninstruction ```iret``` equal to \n\n```assembly\npop eip\npop cs\npop eflags\npop esp\npop ss\n```\n\n instruction ```*(--krnstack) = 0;```  Means eax =0 for distinguish parent process and child process.\n\n**In the end , don't forget add the two code following to corresponding .c file **\n\n```C\nextern void first_return_kernel(void); // in the fork()\nextern long switch_to(struct task_struct *p , unsigned long _ldt); // in the sched.c\n```\n\n## Modify step\n\n**Modify in system_call.s**\n\nWrite the switch_to、first_return_from_kernel、etc in the system_call.s**\n\n```assembly\n# Don't forget to change the hardcode.\n# Because I forget to change the hardcode , I stayed here so long time.\nstate\t= 0\t\t# these are offsets into the task-struct.\ncounter\t= 4\npriority = 8\nKERNEL_STACK = 12\nsignal\t= 16\nsigaction = 20\t\t# MUST be 16 (=len of sigaction)\nblocked = (33*16+4)\n\n# Define as a global variable，can be used in other file with the keyword extern declaration.\n.globl first_return_from_kernel, switch_to \n.align 2\nswitch_to:\n\tpushl %ebp\n\tmovl %esp, %ebp\n\tpushl %ecx\n\tpushl %ebx\n\tpushl %eax \n\tmovl 8(%ebp), %ebx \n\tcmpl %ebx, current \n\tje 1f\n\tmovl %ebx, %eax\n\txchgl %eax, current # eax=old_current, so current=pnext\n\tmovl tss, %ecx\t\t# ecx = tss of pnext, it also the new current\n\taddl $4096, %ebx\t# ebx=the top of current kernel stack(pnext)\n\tmovl %ebx, 4(%ecx)\n\tmovl %esp, KERNEL_STACK(%eax)\n\tmovl 8(%ebp), %ebx \n\tmovl KERNEL_STACK(%ebx), %esp\n\tmovl 12(%ebp), %ecx\n\tlldt %cx\n\tmovl $0x17, %ecx\n\tmov %cx, %fs\n\tcmpl %eax, last_task_used_math\t\n\tjne 1f\n\tclts\n1:  popl %eax\n\tpopl %ebx\n\tpopl %ecx\n\tpopl %ebp\n\tret\n.align 2\nfirst_return_from_kernel:\n\tpopl %edx\n\tpopl %edi\n\tpopl %esi\n\tpop %gs\n\tpop %fs\n\tpop %es\n\tpop %ds\n\tiret\n```\n\n**Modify sched.h **\n\n```C\nstruct task_struct {\n/* these are hardcoded - don't touch */\n\tlong state;\t/* -1 unrunnable, 0 runnable, >0 stopped */\n\tlong counter;\n\tlong priority;\n\tlong kernelstack;\n\tlong signal;\n\tstruct sigaction sigaction[32];\n\tlong blocked;\t/* bitmap of masked signals */\n    ......\n}\n#define INIT_TASK \\\n/* state etc */\t{ 0,15,15,PAGE_SIZE+(long)&init_task, \\\n/* signals */\t0,{{},},0, \\\n.................................\n\n /*注释掉\n#define switch_to(n) {\\\nstruct {long a,b;} __tmp; \\\n__asm__(\"cmpl %%ecx,current\\n\\t\" \\\n\t\"je 1f\\n\\t\" \\\n\t\"movw %%dx,%1\\n\\t\" \\\n\t\"xchgl %%ecx,current\\n\\t\" \\\n\t\"ljmp *%0\\n\\t\" \\\n\t\"cmpl %%ecx,last_task_used_math\\n\\t\" \\\n\t\"jne 1f\\n\\t\" \\\n\t\"clts\\n\" \\\n\t\"1:\" \\\n\t::\"m\" (*&__tmp.a),\"m\" (*&__tmp.b), \\\n\t\"d\" (_TSS(n)),\"c\" ((long) task[n])); \\\n}\n*/\n  \n```\n\n**Modify sched.c**\n\n```C\nextern long switch_to(struct task_struct *p , unsigned long _ldt);\nstruct tss_struct * tss = &(init_task.task.tss);\nvoid schedule(void)\n{\n\tint i,next,c;\n\tstruct task_struct ** p;\n\tstruct task_struct *pnext = &(init_task.task);\n\n/* check alarm, wake up any interruptible tasks that have got a signal */\n\n\tfor(p = &LAST_TASK ; p > &FIRST_TASK ; --p)\n\t\tif (*p) {\n\t\t\tif ((*p)->alarm && (*p)->alarm < jiffies) {\n\t\t\t\t\t(*p)->signal |= (1<<(SIGALRM-1));\n\t\t\t\t\t(*p)->alarm = 0;\n\t\t\t\t}\n\t\t\tif (((*p)->signal & ~(_BLOCKABLE & (*p)->blocked)) &&\n\t\t\t(*p)->state==TASK_INTERRUPTIBLE)\n\t\t\t\t(*p)->state=TASK_RUNNING;\n\t\t}\n\n/* this is the scheduler proper: */\n\n\twhile (1) {\n\t\tc = -1;\n\t\tnext = 0;\n\t\ti = NR_TASKS;\n\t\tp = &task[NR_TASKS];\n\t\twhile (--i) {\n\t\t\tif (!*--p)\n\t\t\t\tcontinue;\n\t\t\tif ((*p)->state == TASK_RUNNING && (*p)->counter > c){\n\t\t\t\tc = (*p)->counter, next = i;\n\t\t\t\tpnext = *p;\n\t\t\t}\n\t\t}\n\t\tif (c) break;\n\t\tfor(p = &LAST_TASK ; p > &FIRST_TASK ; --p)\n\t\t\tif (*p)\n\t\t\t\t(*p)->counter = ((*p)->counter >> 1) +\n\t\t\t\t\t\t(*p)->priority;\n\t}\n\tswitch_to(pnext,_LDT(next));\n}\n```\n\n**Modify fork()**\n\n```C\nextern void first_return_kernel(void);  \n\nint copy_process(int nr,long ebp,long edi,long esi,long gs,long none,\n\t\tlong ebx,long ecx,long edx,\n\t\tlong fs,long es,long ds,\n\t\tlong eip,long cs,long eflags,long esp,long ss)\n{\n\tstruct task_struct *p;\n\tint i;\n\tstruct file *f;\n\n\tp = (struct task_struct *) get_free_page();\n\tif (!p)\n\t\treturn -EAGAIN;\n\ttask[nr] = p;\n\t*p = *current;\t/* NOTE! this doesn't copy the supervisor stack */\n\tp->state = TASK_UNINTERRUPTIBLE;\n\tp->pid = last_pid;\n\tp->father = current->pid;\n\tp->counter = p->priority;\n\tlong * krnstack ;\n\tkrnstack = (long *) (PAGE_SIZE + (long) p);\n    *(--krnstack) = ss & 0xffff;\n    *(--krnstack) = esp;\n    *(--krnstack) = eflags;\n    *(--krnstack) = cs & 0xffff;\n    *(--krnstack) = eip;\n *(--krnstack) = ds & 0xffff; \n   *(--krnstack) = es & 0xffff; \n   *(--krnstack) = fs & 0xffff; \n *(--krnstack) = gs & 0xffff;\n  *(--krnstack) = esi; \n *(--krnstack) = edi; \n    *(--krnstack) = edx;\n\t*(--krnstack) =(long) first_return_kernel;\n    *(--krnstack) = ebp;\n    *(--krnstack) = ecx;\n    *(--krnstack) = ebx;\n    *(--krnstack) = 0;\n\tp->kernelstack = krnstack;\n\tp->signal = 0;\n\tp->alarm = 0;\n\tp->leader = 0;\t\t/* process leadership doesn't inherit */\n\tp->utime = p->stime = 0;\n\tp->cutime = p->cstime = 0;\n\tp->start_time = jiffies;\n\tp->tss.back_link = 0;\n\tp->tss.esp0 = PAGE_SIZE + (long) p;\n\tp->tss.ss0 = 0x10;\n\tp->tss.eip = eip;\n\tp->tss.eflags = eflags;\n\tp->tss.eax = 0;\n\tp->tss.ecx = ecx;\n\tp->tss.edx = edx;\n\tp->tss.ebx = ebx;\n\tp->tss.esp = esp;\n\tp->tss.ebp = ebp;\n\tp->tss.esi = esi;\n\tp->tss.edi = edi;\n\tp->tss.es = es & 0xffff;\n\tp->tss.cs = cs & 0xffff;\n\tp->tss.ss = ss & 0xffff;\n\tp->tss.ds = ds & 0xffff;\n\tp->tss.fs = fs & 0xffff;\n\tp->tss.gs = gs & 0xffff;\n\tp->tss.ldt = _LDT(nr);\n\tp->tss.trace_bitmap = 0x80000000;\n\tif (last_task_used_math == current)\n\t\t__asm__(\"clts ; fnsave %0\"::\"m\" (p->tss.i387));\n\tif (copy_mem(nr,p)) {\n\t\ttask[nr] = NULL;\n\t\tfree_page((long) p);\n\t\treturn -EAGAIN;\n\t}\n\tfor (i=0; i<NR_OPEN;i++)\n\t\tif ((f=p->filp[i]))\n\t\t\tf->f_count++;\n\tif (current->pwd)\n\t\tcurrent->pwd->i_count++;\n\tif (current->root)\n\t\tcurrent->root->i_count++;\n\tif (current->executable)\n\t\tcurrent->executable->i_count++;\n\tset_tss_desc(gdt+(nr<<1)+FIRST_TSS_ENTRY,&(p->tss));\n\tset_ldt_desc(gdt+(nr<<1)+FIRST_LDT_ENTRY,&(p->ldt));\n\tp->state = TASK_RUNNING;\t/* do this last, just in case */\n\treturn last_pid;\n}\n```\n\n","slug":"process-switch-base-on-stack-switch","published":1,"updated":"2020-02-18T12:58:18.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck7knymm8000itlfw1ykud7c0","content":"<h1 id=\"基于内核栈切换的进程切换\"><a href=\"#基于内核栈切换的进程切换\" class=\"headerlink\" title=\"基于内核栈切换的进程切换\"></a>基于内核栈切换的进程切换</h1><h2 id=\"实验目的\"><a href=\"#实验目的\" class=\"headerlink\" title=\"实验目的\"></a>实验目的</h2><ul>\n<li>深入理解进程和进程切换的概念；</li>\n<li>综合应用进程、CPU 管理、PCB、LDT、内核栈、内核态等知识解决实际问题；</li>\n<li>开始建立系统认识。</li>\n</ul>\n<h2 id=\"实验内容\"><a href=\"#实验内容\" class=\"headerlink\" title=\"实验内容\"></a>实验内容</h2><p>现在的 Linux 0.11 采用 TSS（后面会有详细论述）和一条指令就能完成任务切换，虽然简单，但这指令的执行时间却很长，在实现任务切换时大概需要 200 多个时钟周期。</p>\n<p>而通过堆栈实现任务切换可能要更快，而且采用堆栈的切换还可以使用指令流水的并行优化技术，同时又使得 CPU 的设计变得简单。所以无论是 Linux 还是 Windows，进程/线程的切换都没有使用 Intel 提供的这种 TSS 切换手段，而都是通过堆栈实现的。</p>\n<p>本次实践项目就是将 Linux 0.11 中采用的 TSS 切换部分去掉，取而代之的是基于堆栈的切换程序。具体的说，就是将 Linux 0.11 中的 <code>switch_to</code> 实现去掉，写成一段基于堆栈切换的代码。</p>\n<p>本次实验包括如下内容：</p>\n<ul>\n<li>编写汇编程序 <code>switch_to</code>：</li>\n<li>完成主体框架；</li>\n<li>在主体框架下依次完成 PCB 切换、内核栈切换、LDT 切换等；</li>\n<li>修改 <code>fork()</code>，由于是基于内核栈的切换，所以进程需要创建出能完成内核栈切换的样子。</li>\n<li>修改 PCB，即 <code>task_struct</code> 结构，增加相应的内容域，同时处理由于修改了 task_struct 所造成的影响。</li>\n<li>用修改后的 Linux 0.11 仍然可以启动、可以正常使用。</li>\n<li>（选做）分析实验 3 的日志体会修改前后系统运行的差别。</li>\n</ul>\n<h2 id=\"实验报告\"><a href=\"#实验报告\" class=\"headerlink\" title=\"实验报告\"></a>实验报告</h2><p>回答下面三个题：</p>\n<h4 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题 1\"></a>问题 1</h4><p>针对下面的代码片段：</p>\n<pre><code>movl tss,%ecx\naddl $4096,%ebx\nmovl %ebx,ESP0(%ecx)\n</code></pre><p>回答问题：</p>\n<ul>\n<li><p>（1）为什么要加 4096；</p>\n<p>答：因为一页内存低地址存进程PCB，高地址是堆栈，linux-0.11 一页内存大小为4Kb,所以+4096。</p>\n</li>\n<li><p>（2）为什么没有设置 tss 中的 ss0。</p>\n<p>答</p>\n</li>\n</ul>\n<h4 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题 2\"></a>问题 2</h4><p>针对代码片段：</p>\n<pre><code class=\"lang-c\">*(--krnstack) = ebp;\n*(--krnstack) = ecx;\n*(--krnstack) = ebx;\n*(--krnstack) = 0;\n</code></pre>\n<p>回答问题：</p>\n<ul>\n<li><p>（1）子进程第一次执行时，eax=？为什么要等于这个数？哪里的工作让 eax 等于这样一个数？</p>\n<p>答：子进程第一次执行是eax =0;，为了让代码<code>if (!fork()) {....}</code>区分子进程和父进程。</p>\n</li>\n<li><p>（2）这段代码中的 ebx 和 ecx 来自哪里，是什么含义，为什么要通过这些代码将其写到子进程的内核栈中？</p>\n<p>答：这段代码中的ebx和ecx是栈切换执行switch_to时压入的值，我觉得是为了切换进程时保护现场而压入的，在fork创建新进程（子进程）时添加这些代码进新进程内核栈是为了模拟父进程的内核栈。</p>\n</li>\n<li><p>（3）这段代码中的 ebp 来自哪里，是什么含义，为什么要做这样的设置？可以不设置吗？为什么？</p>\n<p>答：ebp也是来自基于栈切换的switch_to（）时压入的，是当前进程在进行切换时保存当前进程现场的操作，为什么要这样设置呢？因为创建新的子进程当进程切换时需要pop所以这里是为了模拟父进程的内核栈.</p>\n</li>\n</ul>\n<h4 id=\"问题-3\"><a href=\"#问题-3\" class=\"headerlink\" title=\"问题 3\"></a>问题 3</h4><p>为什么要在切换完 LDT 之后要重新设置 fs=0x17？而且为什么重设操作要出现在切换完 LDT 之后，出现在 LDT 之前又会怎么样？</p>\n<p>答：因为需要重新设置fs对应的隐藏寄存器的段基址和段限长，所以需要重设操作，出现在LDT之前则没有任何意义不会有任何改变。</p>\n<h2 id=\"TSS的切换\"><a href=\"#TSS的切换\" class=\"headerlink\" title=\"TSS的切换\"></a>TSS的切换</h2><h3 id=\"TSS-task-state-segment\"><a href=\"#TSS-task-state-segment\" class=\"headerlink\" title=\"TSS (task state segment)\"></a>TSS (task state segment)</h3><p>The <strong>task state segment (TTS)</strong> is a structure on x86-based computers which holds information about a task, it is used by the operating system kernel for task managenment. specifically, the following information is stored in the TSS:</p>\n<ul>\n<li>processor register state</li>\n<li>I/O port permissions</li>\n<li>Inner-lever stack pointers (内部堆栈指针)</li>\n<li>Previous TSS link</li>\n</ul>\n<p>All this information should be stored at specific locations within the TSS as specified in the IA-32 manuals.</p>\n<h3 id=\"TR-task-register\"><a href=\"#TR-task-register\" class=\"headerlink\" title=\"TR (task register).\"></a>TR (task register).</h3><p>The TR register is a 16-bit register which holds a segment selector for the TSS. It may be loaded through the LTR instruction. LTR is a privileged instruction and acts in a manner similar to other segment register loads. The task register has two parts: a portion visible and accessible by the programmer and an invisible one that is automatically loaded from the TSS descriptor.<br></p>\n<p>In the current Linux 0.11,the real completion of the  process switch is accomplished by the task state segment(Task State Segment,TSS for short).</p>\n<p>Specifically, when designing the “Intel architecture”(that is the x86 system structure),</p>\n<p>each task(process or thread) corresponds to an independent TSS. TSS is a  corresponds</p>\n<p>to an independent TSS. TSS is a structure in memory that contains almost all CPU registers Image. There is a Task Register(TR for short) pointing to the TSS structure corresponding to the current process. </p>\n<p>The so-called TSS switch is copies almost all the registers in the CPU(current) to the TSS </p>\n<p>structure pointed  by TR.</p>\n<p>At the same time a target TSS is found ,that is the TSS corresponding to the next process to be switched to, and the register image of TSS structure of next process  stored in CPU.</p>\n<p>In here  the execution site switching  is completed.</p>\n<p>as shown in the figure  blow:</p>\n<p><img src=\"/2020/02/16/process-switch-base-on-stack-switch/wm.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>Inter architecture provides the command ljmp to achieve the process switch .</p>\n<p>The specific working process is:</p>\n<ul>\n<li>First, use the segment selector in TR to find the current TSS structure memory location in GDT table.</li>\n<li>second,  the register image of current CPU  store to the TSS structure memory  of finding before.(store the current site !)</li>\n<li>Now, we need to find the target process site and copy the register image of the target   process to the CPU. This just means we need to find TSS of the next process in  GDT table and copy the context of TSS structure memory to CPU.</li>\n<li>when the register image of TSS structure of the target process store in CPU completely, that means achieve switch to target process site, now, the target process becomes the current process. </li>\n<li>Finally , TR should be changed to point to the location of the target TSS segment in the GDT table.<br></li>\n</ul>\n<p>all explain above  through one sentence execute  (ljmp segment selector : intra-segment offset).</p>\n<p>So switch_to (a instruction) base on TSS for process and thread switching is actually a ljmp instruction：</p>\n<pre><code class=\"lang-assembly\">#define switch_to(n) {\\\nstruct {long a,b;} __tmp; \\\n__asm__(&quot;cmpl %%ecx,current\\n\\t&quot; \\     \n    &quot;je 1f\\n\\t&quot; \\\n    &quot;movw %%dx,%1\\n\\t&quot; \\\n    &quot;xchgl %%ecx,current\\n\\t&quot; \\\n    &quot;ljmp *%0\\n\\t&quot; \\\n    &quot;cmpl %%ecx,last_task_used_math\\n\\t&quot; \\\n    &quot;jne 1f\\n\\t&quot; \\\n    &quot;clts\\n&quot; \\\n    &quot;1:&quot; \\\n    ::&quot;m&quot; (*&amp;__tmp.a),&quot;m&quot; (*&amp;__tmp.b), \\\n    &quot;d&quot; (_TSS(n)),&quot;c&quot; ((long) task[n])); \\\n}\n\n#define FIRST_TSS_ENTRY 4\n\n#define TSS(n) (((unsigned long) n) &lt;&lt; 4) + (FIRST_TSS_ENTRY &lt;&lt; 3))\n</code></pre>\n<p>Each process is divided into two part which correspond to TSS and LDT, respectively. </p>\n<p>TSS and LDT are both 64-bit(8 bytes).</p>\n<p>so  _TSS(n) = n <em> 16 + 4 </em> 8 (bytes).</p>\n<p><strong>ljmp instruction can be used in two ways, which are “ljmp $ segment selector, $ offset” and “ljmp <em> mem48” respectively. In here “ljmp </em>% 0” used the second way, “ljmp <em> mem48” mean jump to Logical address (48 bits) of the mem48 contain (mem48 also is an address), the hight 16 bits of 48 bits correspond to segment_selector, the low 32 bits of 48 bits correspond to offset. So ,the core of switch_to is ljmp 0 , n\\</em>16+4*8  </strong></p>\n<p><strong>!! it is worth out attention:</strong></p>\n<p>The ‘*‘ of the “ljmp <em>mem48” is different from ‘\\</em>‘ of C language . The ‘*‘ of the “ljmp *mem48”  is mean indirect jump.</p>\n<h2 id=\"本次实验的内容\"><a href=\"#本次实验的内容\" class=\"headerlink\" title=\"本次实验的内容\"></a>本次实验的内容</h2><p>Although ，the task switching can be completed with one instruction, the execution time of the instruction is very long . It take almost 200 time cycles to complete the task switch using the ljmp instruction. if we want to increase the switching speed ,we can use the heap_stack switch instead of ljmp instruction.</p>\n<p>Moreover. The use of heap_stack switching can also use the parallel optimization technology of instruction pipeline, while making design of the CPU simple.</p>\n<p>Therefore, both Windows and Linux use the heap_stack switching technology to handle process switching.</p>\n<p>Therefore rewriter the code of “switch_to” to  use the heap_stack switch instead of TSS is my task.</p>\n<p>To achieve a process switch base on kernel , we need do three things :</p>\n<ol>\n<li>Rewrite “switch_to”</li>\n<li>Connect the rewritten “switch_to” and schedule() functions together.</li>\n<li>Modify the current fork().</li>\n</ol>\n<h2 id=\"schedule-与-switch-to\"><a href=\"#schedule-与-switch-to\" class=\"headerlink\" title=\"schedule 与 switch_to\"></a>schedule 与 switch_to</h2><h3 id=\"modify-shcedule\"><a href=\"#modify-shcedule\" class=\"headerlink\" title=\"modify shcedule()\"></a>modify shcedule()</h3><p>The task of schedule( ) is finding the position “next” of the next process in the array.  The “next” is equal to “n” of the GDT table(TSS[n]=n*16+4*8).  if we get the “next” in the schedule function, we can use “switch_to (next)” function move to another process.</p>\n<p>Now, we use heap_stack switching instead of TSS switching ,and so we need informations of  current process PCB 、target process PCB、current process kernel stack and target process kernel stack.</p>\n<p> The kernel stack of the Linux 0.11 process and the PCB of process are stored on the same page of memory (a 4kB size page of memory).The PCB is located at the low address of this page of memory ,and the stack is located at the high address of this page of memory.</p>\n<p>In addition, since the PCB of the current process is pointed with a global variable “current”, we  need to tell new switch_to () function a pointer to the target process PCB and we need to tell new switch_to function LDT(next) instead of TSS (next). Just mean ,we don’t need TSS in each process now（we can delete code about TSS），but  also need LDT of  process.</p>\n<p>In summary ,the current schedule() function (in kernel/sched.c) needs to be slightly modified, that is the following code:</p>\n<pre><code class=\"lang-C\">if ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c) \n    c = (*p)-&gt;counter, next = i; \n\n//......\n\nswitch_to(next);\n</code></pre>\n<p>modify:</p>\n<pre><code class=\"lang-C\">if ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c) \n    c = (*p)-&gt;counter, next = i, pnext = *p;\n\n//.......\n\nswitch_to(pnext, _LDT(next));\n</code></pre>\n<h3 id=\"Rewrite-switch-to\"><a href=\"#Rewrite-switch-to\" class=\"headerlink\" title=\"Rewrite switch_to()\"></a>Rewrite switch_to()</h3><p>Rewrite switch_to() function is the most important step in this experiment.</p>\n<p>This function, in turn, completes the following functions:</p>\n<ul>\n<li>first, we need to handle the stack by the assembly language. just handle the ebp register.</li>\n<li>second, we need to compare the parameter of stack about the next process’s PCB with the current process.</li>\n<li>third, we need in turn to complete PCB switch, rewrite kernel stack pointer of TSS, switch kernel stack, switch LDT and switch PC pointer (CS:EIP).</li>\n</ul>\n<pre><code class=\"lang-assembly\">switch_to:\n    pushl %ebp\n    movl %esp,%ebp\n    pushl %ecx\n    pushl %ebx\n    pushl %eax\n    movl 8(%ebp),%ebx\n    cmpl %ebx,current\n    je 1f\n! 切换PCB\n    ! ...\n! TSS中的内核栈指针的重写\n    ! ...\n! 切换内核栈\n    ! ...\n! 切换LDT\n    ! ...\n    movl $0x17,%ecx\n    mov %cx,%fs\n! 和后面的 clts 配合来处理协处理器，由于和主题关系不大，此处不做论述\n    cmpl %eax,last_task_used_math \n    jne 1f\n    clts\n\n1:    popl %eax\n    popl %ebx\n    popl %ecx\n    popl %ebp\nret\n</code></pre>\n<p><strong>Switch PCB pointer</strong></p>\n<p>ebx register is next process’s PCB pointer.</p>\n<p>The function of xchgl instruction  is to exchange contents between  two register.</p>\n<pre><code class=\"lang-assembly\">movl %ebx,%eax\nxchgl %eax,current\n</code></pre>\n<p><strong>Rewrite pointer of kernel stack stored in  TSS</strong></p>\n<p>The current TSS is different from TSS before. Before TSS is a global array but current TSS is a global variable. We need to redefine TSS pointer through two sentences.</p>\n<pre><code>#define ESP0 =4\nstruct tss_struct *tss = (init_task.task.tss);\n</code></pre><p>current TSS pointer <code>tss</code> similar current process pointer <code>current</code>.</p>\n<p>This has already discussed in detail before. In the system interrupt ,we need to find and determine the location of the kernel stack. and push the five register SS : ESP, CS: EIP and EFLAGS in user mode onto kernel stack. This is the key bridge between the user mode (user stack) and kernel mode (kernel stack). The key of find kernel stack position is use the TR register point to current TSS.</p>\n<p>Although we don’t need to use TSS for switch process in now.  We still stay the intel interrupt system. So we still need it that is we define global variable <code>tss</code>. All processes share that variable.</p>\n<pre><code class=\"lang-assembly\">movl tss,%ecx\naddl $4096,%ebx\nmovl %ebx,ESP0(%ecx)\n</code></pre>\n<p>ESP0 = 4 ,the ecx + ESP0 equal to position of kernel stack pointer in TSS (esp0).</p>\n<pre><code class=\"lang-C\">struct tss_struct {\n    long    back_link;    /* 16 high bits zero */\n    long    esp0;\n    long    ss0;        /* 16 high bits zero */\n    long    esp1;\n    long    ss1;        /* 16 high bits zero */\n    long    esp2;\n    long    ss2;        /* 16 high bits zero */\n    long    cr3;\n    long    eip;\n    long    eflags;\n    long    eax,ecx,edx,ebx;\n    long    esp;\n    long    ebp;\n    long    esi;\n    long    edi;\n    long    es;        /* 16 high bits zero */\n    long    cs;        /* 16 high bits zero */\n    long    ss;        /* 16 high bits zero */\n    long    ds;        /* 16 high bits zero */\n    long    fs;        /* 16 high bits zero */\n    long    gs;        /* 16 high bits zero */\n    long    ldt;        /* 16 high bits zero */\n    long    trace_bitmap;    /* bits: trace 0, bitmap 16-31 */\n    struct i387_struct i387;\n};\n</code></pre>\n<p><strong>switch kernel stack :</strong></p>\n<p>It’s also simple to complete the kernel stack switch. we just need to store value of esp register of the current process  onto the current PCB , and take corresponding esp value of next PCB out and put it into esp register.</p>\n<p>since Linux -0.11  didn’t define the variable of kernel stack pointer in PCB(task_struct). so we need to add a variable <code>kernelstack</code> to Linux-0.11 PCB, we still need define another variable <code>KERNEL_STACK = 12</code>  for determine variable of  <code>kernelstack</code> position in PCB.</p>\n<p><strong>Why KERNEL_STACK equal to 12 ?</strong></p>\n<p>because the kernel code have many  assembly hardcodes about manipulating this structure, so,if we add the variable <code>kernelstack</code> in other position, we need to modify kernel code in many difference place. </p>\n<pre><code class=\"lang-C\">KERNEL_STACK = 12\nmovl %esp,KERNEL_STACK(%eax)    ! 保存上一个进程的栈顶指针\n! 再取一下 ebx，因为前面修改过 ebx 的值,此时eax的值等于上一个进程的PCB指针\nmovl 8(%ebp),%ebx    \nmovl KERNEL_STACK(%ebx),%esp    ！取下个进程的栈顶指针放入esp\n</code></pre>\n<p>task_struct:</p>\n<pre><code class=\"lang-C\">// 在 include/linux/sched.h 中\nstruct task_struct {\n    long state;\n    long counter;\n    long priority;\n    long kernelstack;\n//......\n</code></pre>\n<p>because we modify the PCB structure,  we also need to modify initialization code of 0 process PCB structure .Modify <code>#define INIT_TASK { 0,15,15, 0,{ { },},0,...</code>  to <code>#define INIT_TASK { 0,15,15,PAGE_SIZE+(long)&amp;init_task, 0,{ { },},0,...</code></p>\n<p><strong>switch LDT</strong></p>\n<pre><code class=\"lang-assembly\">movl 12(%ebp),%ecx\nlldt %cx\n!上面使改LDT代码\nmovl $0x17,%ecx\nmov %cx,%fs\n</code></pre>\n<p>Why we have to add two code <code>movl $0x17,%ecx</code> <code>mov %cx,%fs</code> behind that code of switch LDT.</p>\n<p>because we need to change the segment base address and segment length limit in the hidden register about fs.</p>\n<p>Examlpe with CS. The hidden register for increase CPU processing speed.</p>\n<p><img src=\"/2020/02/16/process-switch-base-on-stack-switch/wm1.png\" srcset=\"/img/loading.gif\" alt></p>\n<p><strong>switch PC （switch to next process）</strong></p>\n<pre><code class=\"lang-assembly\">1:    popl %eax\n    popl %ebx\n    popl %ecx\n    popl %ebp\nret\n</code></pre>\n<p><strong>kernel stack  now</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190819230403925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTc2MTQ3OA==,size_16,color_FFFFFF,t_70\" srcset=\"/img/loading.gif\" alt></p>\n<p>Execute those codes to turn to the next process,if it isn’t come here through code <code>je 1f</code>. Because we have been changed the kernel stack before. we <code>pop  (eax ,ebx,ecx,ebp)</code> is register of next process.   ret instruction equal to <code>pop IP</code>.So we execute <code>ret</code> turn to schedule() function tail of next process. Now ! we completed the stack switch perfectly.</p>\n<h2 id=\"modify-fork\"><a href=\"#modify-fork\" class=\"headerlink\" title=\"modify fork()\"></a>modify fork()</h2><p><strong>Why we need to modify fork() function ?</strong></p>\n<p><strong>Because, we need to simulate the parent process’s kernel stack for the newly created child process. </strong></p>\n<p>Now, we need to modify the fork() function. it is to associate the process’s user stack, user program to its kernel stack with SS: ESP, CS: IP, which is pushed in the kernel stack.</p>\n<p>In addition, since fork() function-core is let the child process to use code, data, and stack of the parent process . the fork core has not changed, although we use the stack switching.</p>\n<p><img src=\"/2020/02/16/process-switch-base-on-stack-switch/wm2.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>Don’t hard to imagine. modify fork which  mean  initialize child process’s kernel stack. In <code>copy_process ()</code>as the core code of <code>fork ()</code>, it used to apply a page of memory as process PCB. The kernel stack address position equal pointer p position add the one page of memory size.  so the code <code>krnstack = (*long)(PAGE_SIZE + (long)p)</code> can find the child process kernel stack position. next step is to initialize the content of krnstack pointer .</p>\n<pre><code class=\"lang-C\">/*modify in fork()*/\nlong *krnstack;\np = (struct task_struct *) get_free_page();\nkrnstack = (long)(PAGE_SIZE +(long)p);\n *(--krnstack) = ss &amp; 0xffff;\n *(--krnstack) = esp;\n *(--krnstack) = eflags;\n *(--krnstack) = cs &amp; 0xffff;\n *(--krnstack) = eip;\n *(--krnstack) = ds &amp; 0xffff;\n *(--krnstack) = es &amp; 0xffff;\n *(--krnstack) = fs &amp; 0xffff;\n *(--krnstack) = gs &amp; 0xffff;\n *(--krnstack) = esi;\n *(--krnstack) = edi;\n *(--krnstack) = edx;\n *(--krnstack) = (long)first_return_from_kernel;\n *(--krnstack) = ebp;\n *(--krnstack) = ecx;\n *(--krnstack) = ebx;\n *(--krnstack) = 0;\n p-&gt;kernelstack = krnstack;\n ......\n</code></pre>\n<p>Those code for simulate parent kernel stack for child process! </p>\n<p>Make a attention !</p>\n<pre><code class=\"lang-c\">*(--krnstack) = (long)first_return_from_kernel;\n*(--krnstack) = 0;\n</code></pre>\n<p>We need to code a first_return_from_kernel as a mark! If we return to address first_return_from_kernel. We need to execute those code following.</p>\n<pre><code class=\"lang-assembly\">/*modify in system_call.s*/\n.align 2\nfirst_return_from_kernel:\npopl %edx\npopl %edi\npopl %esi\npop %gs\npop %fs\npop %es\npop %ds\niret\n</code></pre>\n<p>instruction <code>iret</code> equal to </p>\n<pre><code class=\"lang-assembly\">pop eip\npop cs\npop eflags\npop esp\npop ss\n</code></pre>\n<p> instruction <code>*(--krnstack) = 0;</code>  Means eax =0 for distinguish parent process and child process.</p>\n<p><strong>In the end , don’t forget add the two code following to corresponding .c file </strong></p>\n<pre><code class=\"lang-C\">extern void first_return_kernel(void); // in the fork()\nextern long switch_to(struct task_struct *p , unsigned long _ldt); // in the sched.c\n</code></pre>\n<h2 id=\"Modify-step\"><a href=\"#Modify-step\" class=\"headerlink\" title=\"Modify step\"></a>Modify step</h2><p><strong>Modify in system_call.s</strong></p>\n<p>Write the switch_to、first_return_from_kernel、etc in the system_call.s**</p>\n<pre><code class=\"lang-assembly\"># Don&#39;t forget to change the hardcode.\n# Because I forget to change the hardcode , I stayed here so long time.\nstate    = 0        # these are offsets into the task-struct.\ncounter    = 4\npriority = 8\nKERNEL_STACK = 12\nsignal    = 16\nsigaction = 20        # MUST be 16 (=len of sigaction)\nblocked = (33*16+4)\n\n# Define as a global variable，can be used in other file with the keyword extern declaration.\n.globl first_return_from_kernel, switch_to \n.align 2\nswitch_to:\n    pushl %ebp\n    movl %esp, %ebp\n    pushl %ecx\n    pushl %ebx\n    pushl %eax \n    movl 8(%ebp), %ebx \n    cmpl %ebx, current \n    je 1f\n    movl %ebx, %eax\n    xchgl %eax, current # eax=old_current, so current=pnext\n    movl tss, %ecx        # ecx = tss of pnext, it also the new current\n    addl $4096, %ebx    # ebx=the top of current kernel stack(pnext)\n    movl %ebx, 4(%ecx)\n    movl %esp, KERNEL_STACK(%eax)\n    movl 8(%ebp), %ebx \n    movl KERNEL_STACK(%ebx), %esp\n    movl 12(%ebp), %ecx\n    lldt %cx\n    movl $0x17, %ecx\n    mov %cx, %fs\n    cmpl %eax, last_task_used_math    \n    jne 1f\n    clts\n1:  popl %eax\n    popl %ebx\n    popl %ecx\n    popl %ebp\n    ret\n.align 2\nfirst_return_from_kernel:\n    popl %edx\n    popl %edi\n    popl %esi\n    pop %gs\n    pop %fs\n    pop %es\n    pop %ds\n    iret\n</code></pre>\n<p><strong>Modify sched.h </strong></p>\n<pre><code class=\"lang-C\">struct task_struct {\n/* these are hardcoded - don&#39;t touch */\n    long state;    /* -1 unrunnable, 0 runnable, &gt;0 stopped */\n    long counter;\n    long priority;\n    long kernelstack;\n    long signal;\n    struct sigaction sigaction[32];\n    long blocked;    /* bitmap of masked signals */\n    ......\n}\n#define INIT_TASK \\\n/* state etc */    { 0,15,15,PAGE_SIZE+(long)&amp;init_task, \\\n/* signals */    0,{{},},0, \\\n.................................\n\n /*注释掉\n#define switch_to(n) {\\\nstruct {long a,b;} __tmp; \\\n__asm__(&quot;cmpl %%ecx,current\\n\\t&quot; \\\n    &quot;je 1f\\n\\t&quot; \\\n    &quot;movw %%dx,%1\\n\\t&quot; \\\n    &quot;xchgl %%ecx,current\\n\\t&quot; \\\n    &quot;ljmp *%0\\n\\t&quot; \\\n    &quot;cmpl %%ecx,last_task_used_math\\n\\t&quot; \\\n    &quot;jne 1f\\n\\t&quot; \\\n    &quot;clts\\n&quot; \\\n    &quot;1:&quot; \\\n    ::&quot;m&quot; (*&amp;__tmp.a),&quot;m&quot; (*&amp;__tmp.b), \\\n    &quot;d&quot; (_TSS(n)),&quot;c&quot; ((long) task[n])); \\\n}\n*/\n</code></pre>\n<p><strong>Modify sched.c</strong></p>\n<pre><code class=\"lang-C\">extern long switch_to(struct task_struct *p , unsigned long _ldt);\nstruct tss_struct * tss = &amp;(init_task.task.tss);\nvoid schedule(void)\n{\n    int i,next,c;\n    struct task_struct ** p;\n    struct task_struct *pnext = &amp;(init_task.task);\n\n/* check alarm, wake up any interruptible tasks that have got a signal */\n\n    for(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)\n        if (*p) {\n            if ((*p)-&gt;alarm &amp;&amp; (*p)-&gt;alarm &lt; jiffies) {\n                    (*p)-&gt;signal |= (1&lt;&lt;(SIGALRM-1));\n                    (*p)-&gt;alarm = 0;\n                }\n            if (((*p)-&gt;signal &amp; ~(_BLOCKABLE &amp; (*p)-&gt;blocked)) &amp;&amp;\n            (*p)-&gt;state==TASK_INTERRUPTIBLE)\n                (*p)-&gt;state=TASK_RUNNING;\n        }\n\n/* this is the scheduler proper: */\n\n    while (1) {\n        c = -1;\n        next = 0;\n        i = NR_TASKS;\n        p = &amp;task[NR_TASKS];\n        while (--i) {\n            if (!*--p)\n                continue;\n            if ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c){\n                c = (*p)-&gt;counter, next = i;\n                pnext = *p;\n            }\n        }\n        if (c) break;\n        for(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)\n            if (*p)\n                (*p)-&gt;counter = ((*p)-&gt;counter &gt;&gt; 1) +\n                        (*p)-&gt;priority;\n    }\n    switch_to(pnext,_LDT(next));\n}\n</code></pre>\n<p><strong>Modify fork()</strong></p>\n<pre><code class=\"lang-C\">extern void first_return_kernel(void);  \n\nint copy_process(int nr,long ebp,long edi,long esi,long gs,long none,\n        long ebx,long ecx,long edx,\n        long fs,long es,long ds,\n        long eip,long cs,long eflags,long esp,long ss)\n{\n    struct task_struct *p;\n    int i;\n    struct file *f;\n\n    p = (struct task_struct *) get_free_page();\n    if (!p)\n        return -EAGAIN;\n    task[nr] = p;\n    *p = *current;    /* NOTE! this doesn&#39;t copy the supervisor stack */\n    p-&gt;state = TASK_UNINTERRUPTIBLE;\n    p-&gt;pid = last_pid;\n    p-&gt;father = current-&gt;pid;\n    p-&gt;counter = p-&gt;priority;\n    long * krnstack ;\n    krnstack = (long *) (PAGE_SIZE + (long) p);\n    *(--krnstack) = ss &amp; 0xffff;\n    *(--krnstack) = esp;\n    *(--krnstack) = eflags;\n    *(--krnstack) = cs &amp; 0xffff;\n    *(--krnstack) = eip;\n *(--krnstack) = ds &amp; 0xffff; \n   *(--krnstack) = es &amp; 0xffff; \n   *(--krnstack) = fs &amp; 0xffff; \n *(--krnstack) = gs &amp; 0xffff;\n  *(--krnstack) = esi; \n *(--krnstack) = edi; \n    *(--krnstack) = edx;\n    *(--krnstack) =(long) first_return_kernel;\n    *(--krnstack) = ebp;\n    *(--krnstack) = ecx;\n    *(--krnstack) = ebx;\n    *(--krnstack) = 0;\n    p-&gt;kernelstack = krnstack;\n    p-&gt;signal = 0;\n    p-&gt;alarm = 0;\n    p-&gt;leader = 0;        /* process leadership doesn&#39;t inherit */\n    p-&gt;utime = p-&gt;stime = 0;\n    p-&gt;cutime = p-&gt;cstime = 0;\n    p-&gt;start_time = jiffies;\n    p-&gt;tss.back_link = 0;\n    p-&gt;tss.esp0 = PAGE_SIZE + (long) p;\n    p-&gt;tss.ss0 = 0x10;\n    p-&gt;tss.eip = eip;\n    p-&gt;tss.eflags = eflags;\n    p-&gt;tss.eax = 0;\n    p-&gt;tss.ecx = ecx;\n    p-&gt;tss.edx = edx;\n    p-&gt;tss.ebx = ebx;\n    p-&gt;tss.esp = esp;\n    p-&gt;tss.ebp = ebp;\n    p-&gt;tss.esi = esi;\n    p-&gt;tss.edi = edi;\n    p-&gt;tss.es = es &amp; 0xffff;\n    p-&gt;tss.cs = cs &amp; 0xffff;\n    p-&gt;tss.ss = ss &amp; 0xffff;\n    p-&gt;tss.ds = ds &amp; 0xffff;\n    p-&gt;tss.fs = fs &amp; 0xffff;\n    p-&gt;tss.gs = gs &amp; 0xffff;\n    p-&gt;tss.ldt = _LDT(nr);\n    p-&gt;tss.trace_bitmap = 0x80000000;\n    if (last_task_used_math == current)\n        __asm__(&quot;clts ; fnsave %0&quot;::&quot;m&quot; (p-&gt;tss.i387));\n    if (copy_mem(nr,p)) {\n        task[nr] = NULL;\n        free_page((long) p);\n        return -EAGAIN;\n    }\n    for (i=0; i&lt;NR_OPEN;i++)\n        if ((f=p-&gt;filp[i]))\n            f-&gt;f_count++;\n    if (current-&gt;pwd)\n        current-&gt;pwd-&gt;i_count++;\n    if (current-&gt;root)\n        current-&gt;root-&gt;i_count++;\n    if (current-&gt;executable)\n        current-&gt;executable-&gt;i_count++;\n    set_tss_desc(gdt+(nr&lt;&lt;1)+FIRST_TSS_ENTRY,&amp;(p-&gt;tss));\n    set_ldt_desc(gdt+(nr&lt;&lt;1)+FIRST_LDT_ENTRY,&amp;(p-&gt;ldt));\n    p-&gt;state = TASK_RUNNING;    /* do this last, just in case */\n    return last_pid;\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"基于内核栈切换的进程切换\"><a href=\"#基于内核栈切换的进程切换\" class=\"headerlink\" title=\"基于内核栈切换的进程切换\"></a>基于内核栈切换的进程切换</h1><h2 id=\"实验目的\"><a href=\"#实验目的\" class=\"headerlink\" title=\"实验目的\"></a>实验目的</h2><ul>\n<li>深入理解进程和进程切换的概念；</li>\n<li>综合应用进程、CPU 管理、PCB、LDT、内核栈、内核态等知识解决实际问题；</li>\n<li>开始建立系统认识。</li>\n</ul>\n<h2 id=\"实验内容\"><a href=\"#实验内容\" class=\"headerlink\" title=\"实验内容\"></a>实验内容</h2><p>现在的 Linux 0.11 采用 TSS（后面会有详细论述）和一条指令就能完成任务切换，虽然简单，但这指令的执行时间却很长，在实现任务切换时大概需要 200 多个时钟周期。</p>\n<p>而通过堆栈实现任务切换可能要更快，而且采用堆栈的切换还可以使用指令流水的并行优化技术，同时又使得 CPU 的设计变得简单。所以无论是 Linux 还是 Windows，进程/线程的切换都没有使用 Intel 提供的这种 TSS 切换手段，而都是通过堆栈实现的。</p>\n<p>本次实践项目就是将 Linux 0.11 中采用的 TSS 切换部分去掉，取而代之的是基于堆栈的切换程序。具体的说，就是将 Linux 0.11 中的 <code>switch_to</code> 实现去掉，写成一段基于堆栈切换的代码。</p>\n<p>本次实验包括如下内容：</p>\n<ul>\n<li>编写汇编程序 <code>switch_to</code>：</li>\n<li>完成主体框架；</li>\n<li>在主体框架下依次完成 PCB 切换、内核栈切换、LDT 切换等；</li>\n<li>修改 <code>fork()</code>，由于是基于内核栈的切换，所以进程需要创建出能完成内核栈切换的样子。</li>\n<li>修改 PCB，即 <code>task_struct</code> 结构，增加相应的内容域，同时处理由于修改了 task_struct 所造成的影响。</li>\n<li>用修改后的 Linux 0.11 仍然可以启动、可以正常使用。</li>\n<li>（选做）分析实验 3 的日志体会修改前后系统运行的差别。</li>\n</ul>\n<h2 id=\"实验报告\"><a href=\"#实验报告\" class=\"headerlink\" title=\"实验报告\"></a>实验报告</h2><p>回答下面三个题：</p>\n<h4 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题 1\"></a>问题 1</h4><p>针对下面的代码片段：</p>\n<pre><code>movl tss,%ecx\naddl $4096,%ebx\nmovl %ebx,ESP0(%ecx)\n</code></pre><p>回答问题：</p>\n<ul>\n<li><p>（1）为什么要加 4096；</p>\n<p>答：因为一页内存低地址存进程PCB，高地址是堆栈，linux-0.11 一页内存大小为4Kb,所以+4096。</p>\n</li>\n<li><p>（2）为什么没有设置 tss 中的 ss0。</p>\n<p>答</p>\n</li>\n</ul>\n<h4 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题 2\"></a>问题 2</h4><p>针对代码片段：</p>\n<pre><code class=\"lang-c\">*(--krnstack) = ebp;\n*(--krnstack) = ecx;\n*(--krnstack) = ebx;\n*(--krnstack) = 0;\n</code></pre>\n<p>回答问题：</p>\n<ul>\n<li><p>（1）子进程第一次执行时，eax=？为什么要等于这个数？哪里的工作让 eax 等于这样一个数？</p>\n<p>答：子进程第一次执行是eax =0;，为了让代码<code>if (!fork()) {....}</code>区分子进程和父进程。</p>\n</li>\n<li><p>（2）这段代码中的 ebx 和 ecx 来自哪里，是什么含义，为什么要通过这些代码将其写到子进程的内核栈中？</p>\n<p>答：这段代码中的ebx和ecx是栈切换执行switch_to时压入的值，我觉得是为了切换进程时保护现场而压入的，在fork创建新进程（子进程）时添加这些代码进新进程内核栈是为了模拟父进程的内核栈。</p>\n</li>\n<li><p>（3）这段代码中的 ebp 来自哪里，是什么含义，为什么要做这样的设置？可以不设置吗？为什么？</p>\n<p>答：ebp也是来自基于栈切换的switch_to（）时压入的，是当前进程在进行切换时保存当前进程现场的操作，为什么要这样设置呢？因为创建新的子进程当进程切换时需要pop所以这里是为了模拟父进程的内核栈.</p>\n</li>\n</ul>\n<h4 id=\"问题-3\"><a href=\"#问题-3\" class=\"headerlink\" title=\"问题 3\"></a>问题 3</h4><p>为什么要在切换完 LDT 之后要重新设置 fs=0x17？而且为什么重设操作要出现在切换完 LDT 之后，出现在 LDT 之前又会怎么样？</p>\n<p>答：因为需要重新设置fs对应的隐藏寄存器的段基址和段限长，所以需要重设操作，出现在LDT之前则没有任何意义不会有任何改变。</p>\n<h2 id=\"TSS的切换\"><a href=\"#TSS的切换\" class=\"headerlink\" title=\"TSS的切换\"></a>TSS的切换</h2><h3 id=\"TSS-task-state-segment\"><a href=\"#TSS-task-state-segment\" class=\"headerlink\" title=\"TSS (task state segment)\"></a>TSS (task state segment)</h3><p>The <strong>task state segment (TTS)</strong> is a structure on x86-based computers which holds information about a task, it is used by the operating system kernel for task managenment. specifically, the following information is stored in the TSS:</p>\n<ul>\n<li>processor register state</li>\n<li>I/O port permissions</li>\n<li>Inner-lever stack pointers (内部堆栈指针)</li>\n<li>Previous TSS link</li>\n</ul>\n<p>All this information should be stored at specific locations within the TSS as specified in the IA-32 manuals.</p>\n<h3 id=\"TR-task-register\"><a href=\"#TR-task-register\" class=\"headerlink\" title=\"TR (task register).\"></a>TR (task register).</h3><p>The TR register is a 16-bit register which holds a segment selector for the TSS. It may be loaded through the LTR instruction. LTR is a privileged instruction and acts in a manner similar to other segment register loads. The task register has two parts: a portion visible and accessible by the programmer and an invisible one that is automatically loaded from the TSS descriptor.<br></p>\n<p>In the current Linux 0.11,the real completion of the  process switch is accomplished by the task state segment(Task State Segment,TSS for short).</p>\n<p>Specifically, when designing the “Intel architecture”(that is the x86 system structure),</p>\n<p>each task(process or thread) corresponds to an independent TSS. TSS is a  corresponds</p>\n<p>to an independent TSS. TSS is a structure in memory that contains almost all CPU registers Image. There is a Task Register(TR for short) pointing to the TSS structure corresponding to the current process. </p>\n<p>The so-called TSS switch is copies almost all the registers in the CPU(current) to the TSS </p>\n<p>structure pointed  by TR.</p>\n<p>At the same time a target TSS is found ,that is the TSS corresponding to the next process to be switched to, and the register image of TSS structure of next process  stored in CPU.</p>\n<p>In here  the execution site switching  is completed.</p>\n<p>as shown in the figure  blow:</p>\n<p><img src=\"/2020/02/16/process-switch-base-on-stack-switch/wm.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>Inter architecture provides the command ljmp to achieve the process switch .</p>\n<p>The specific working process is:</p>\n<ul>\n<li>First, use the segment selector in TR to find the current TSS structure memory location in GDT table.</li>\n<li>second,  the register image of current CPU  store to the TSS structure memory  of finding before.(store the current site !)</li>\n<li>Now, we need to find the target process site and copy the register image of the target   process to the CPU. This just means we need to find TSS of the next process in  GDT table and copy the context of TSS structure memory to CPU.</li>\n<li>when the register image of TSS structure of the target process store in CPU completely, that means achieve switch to target process site, now, the target process becomes the current process. </li>\n<li>Finally , TR should be changed to point to the location of the target TSS segment in the GDT table.<br></li>\n</ul>\n<p>all explain above  through one sentence execute  (ljmp segment selector : intra-segment offset).</p>\n<p>So switch_to (a instruction) base on TSS for process and thread switching is actually a ljmp instruction：</p>\n<pre><code class=\"lang-assembly\">#define switch_to(n) {\\\nstruct {long a,b;} __tmp; \\\n__asm__(&quot;cmpl %%ecx,current\\n\\t&quot; \\     \n    &quot;je 1f\\n\\t&quot; \\\n    &quot;movw %%dx,%1\\n\\t&quot; \\\n    &quot;xchgl %%ecx,current\\n\\t&quot; \\\n    &quot;ljmp *%0\\n\\t&quot; \\\n    &quot;cmpl %%ecx,last_task_used_math\\n\\t&quot; \\\n    &quot;jne 1f\\n\\t&quot; \\\n    &quot;clts\\n&quot; \\\n    &quot;1:&quot; \\\n    ::&quot;m&quot; (*&amp;__tmp.a),&quot;m&quot; (*&amp;__tmp.b), \\\n    &quot;d&quot; (_TSS(n)),&quot;c&quot; ((long) task[n])); \\\n}\n\n#define FIRST_TSS_ENTRY 4\n\n#define TSS(n) (((unsigned long) n) &lt;&lt; 4) + (FIRST_TSS_ENTRY &lt;&lt; 3))\n</code></pre>\n<p>Each process is divided into two part which correspond to TSS and LDT, respectively. </p>\n<p>TSS and LDT are both 64-bit(8 bytes).</p>\n<p>so  _TSS(n) = n <em> 16 + 4 </em> 8 (bytes).</p>\n<p><strong>ljmp instruction can be used in two ways, which are “ljmp $ segment selector, $ offset” and “ljmp <em> mem48” respectively. In here “ljmp </em>% 0” used the second way, “ljmp <em> mem48” mean jump to Logical address (48 bits) of the mem48 contain (mem48 also is an address), the hight 16 bits of 48 bits correspond to segment_selector, the low 32 bits of 48 bits correspond to offset. So ,the core of switch_to is ljmp 0 , n\\</em>16+4*8  </strong></p>\n<p><strong>!! it is worth out attention:</strong></p>\n<p>The ‘*‘ of the “ljmp <em>mem48” is different from ‘\\</em>‘ of C language . The ‘*‘ of the “ljmp *mem48”  is mean indirect jump.</p>\n<h2 id=\"本次实验的内容\"><a href=\"#本次实验的内容\" class=\"headerlink\" title=\"本次实验的内容\"></a>本次实验的内容</h2><p>Although ，the task switching can be completed with one instruction, the execution time of the instruction is very long . It take almost 200 time cycles to complete the task switch using the ljmp instruction. if we want to increase the switching speed ,we can use the heap_stack switch instead of ljmp instruction.</p>\n<p>Moreover. The use of heap_stack switching can also use the parallel optimization technology of instruction pipeline, while making design of the CPU simple.</p>\n<p>Therefore, both Windows and Linux use the heap_stack switching technology to handle process switching.</p>\n<p>Therefore rewriter the code of “switch_to” to  use the heap_stack switch instead of TSS is my task.</p>\n<p>To achieve a process switch base on kernel , we need do three things :</p>\n<ol>\n<li>Rewrite “switch_to”</li>\n<li>Connect the rewritten “switch_to” and schedule() functions together.</li>\n<li>Modify the current fork().</li>\n</ol>\n<h2 id=\"schedule-与-switch-to\"><a href=\"#schedule-与-switch-to\" class=\"headerlink\" title=\"schedule 与 switch_to\"></a>schedule 与 switch_to</h2><h3 id=\"modify-shcedule\"><a href=\"#modify-shcedule\" class=\"headerlink\" title=\"modify shcedule()\"></a>modify shcedule()</h3><p>The task of schedule( ) is finding the position “next” of the next process in the array.  The “next” is equal to “n” of the GDT table(TSS[n]=n*16+4*8).  if we get the “next” in the schedule function, we can use “switch_to (next)” function move to another process.</p>\n<p>Now, we use heap_stack switching instead of TSS switching ,and so we need informations of  current process PCB 、target process PCB、current process kernel stack and target process kernel stack.</p>\n<p> The kernel stack of the Linux 0.11 process and the PCB of process are stored on the same page of memory (a 4kB size page of memory).The PCB is located at the low address of this page of memory ,and the stack is located at the high address of this page of memory.</p>\n<p>In addition, since the PCB of the current process is pointed with a global variable “current”, we  need to tell new switch_to () function a pointer to the target process PCB and we need to tell new switch_to function LDT(next) instead of TSS (next). Just mean ,we don’t need TSS in each process now（we can delete code about TSS），but  also need LDT of  process.</p>\n<p>In summary ,the current schedule() function (in kernel/sched.c) needs to be slightly modified, that is the following code:</p>\n<pre><code class=\"lang-C\">if ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c) \n    c = (*p)-&gt;counter, next = i; \n\n//......\n\nswitch_to(next);\n</code></pre>\n<p>modify:</p>\n<pre><code class=\"lang-C\">if ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c) \n    c = (*p)-&gt;counter, next = i, pnext = *p;\n\n//.......\n\nswitch_to(pnext, _LDT(next));\n</code></pre>\n<h3 id=\"Rewrite-switch-to\"><a href=\"#Rewrite-switch-to\" class=\"headerlink\" title=\"Rewrite switch_to()\"></a>Rewrite switch_to()</h3><p>Rewrite switch_to() function is the most important step in this experiment.</p>\n<p>This function, in turn, completes the following functions:</p>\n<ul>\n<li>first, we need to handle the stack by the assembly language. just handle the ebp register.</li>\n<li>second, we need to compare the parameter of stack about the next process’s PCB with the current process.</li>\n<li>third, we need in turn to complete PCB switch, rewrite kernel stack pointer of TSS, switch kernel stack, switch LDT and switch PC pointer (CS:EIP).</li>\n</ul>\n<pre><code class=\"lang-assembly\">switch_to:\n    pushl %ebp\n    movl %esp,%ebp\n    pushl %ecx\n    pushl %ebx\n    pushl %eax\n    movl 8(%ebp),%ebx\n    cmpl %ebx,current\n    je 1f\n! 切换PCB\n    ! ...\n! TSS中的内核栈指针的重写\n    ! ...\n! 切换内核栈\n    ! ...\n! 切换LDT\n    ! ...\n    movl $0x17,%ecx\n    mov %cx,%fs\n! 和后面的 clts 配合来处理协处理器，由于和主题关系不大，此处不做论述\n    cmpl %eax,last_task_used_math \n    jne 1f\n    clts\n\n1:    popl %eax\n    popl %ebx\n    popl %ecx\n    popl %ebp\nret\n</code></pre>\n<p><strong>Switch PCB pointer</strong></p>\n<p>ebx register is next process’s PCB pointer.</p>\n<p>The function of xchgl instruction  is to exchange contents between  two register.</p>\n<pre><code class=\"lang-assembly\">movl %ebx,%eax\nxchgl %eax,current\n</code></pre>\n<p><strong>Rewrite pointer of kernel stack stored in  TSS</strong></p>\n<p>The current TSS is different from TSS before. Before TSS is a global array but current TSS is a global variable. We need to redefine TSS pointer through two sentences.</p>\n<pre><code>#define ESP0 =4\nstruct tss_struct *tss = (init_task.task.tss);\n</code></pre><p>current TSS pointer <code>tss</code> similar current process pointer <code>current</code>.</p>\n<p>This has already discussed in detail before. In the system interrupt ,we need to find and determine the location of the kernel stack. and push the five register SS : ESP, CS: EIP and EFLAGS in user mode onto kernel stack. This is the key bridge between the user mode (user stack) and kernel mode (kernel stack). The key of find kernel stack position is use the TR register point to current TSS.</p>\n<p>Although we don’t need to use TSS for switch process in now.  We still stay the intel interrupt system. So we still need it that is we define global variable <code>tss</code>. All processes share that variable.</p>\n<pre><code class=\"lang-assembly\">movl tss,%ecx\naddl $4096,%ebx\nmovl %ebx,ESP0(%ecx)\n</code></pre>\n<p>ESP0 = 4 ,the ecx + ESP0 equal to position of kernel stack pointer in TSS (esp0).</p>\n<pre><code class=\"lang-C\">struct tss_struct {\n    long    back_link;    /* 16 high bits zero */\n    long    esp0;\n    long    ss0;        /* 16 high bits zero */\n    long    esp1;\n    long    ss1;        /* 16 high bits zero */\n    long    esp2;\n    long    ss2;        /* 16 high bits zero */\n    long    cr3;\n    long    eip;\n    long    eflags;\n    long    eax,ecx,edx,ebx;\n    long    esp;\n    long    ebp;\n    long    esi;\n    long    edi;\n    long    es;        /* 16 high bits zero */\n    long    cs;        /* 16 high bits zero */\n    long    ss;        /* 16 high bits zero */\n    long    ds;        /* 16 high bits zero */\n    long    fs;        /* 16 high bits zero */\n    long    gs;        /* 16 high bits zero */\n    long    ldt;        /* 16 high bits zero */\n    long    trace_bitmap;    /* bits: trace 0, bitmap 16-31 */\n    struct i387_struct i387;\n};\n</code></pre>\n<p><strong>switch kernel stack :</strong></p>\n<p>It’s also simple to complete the kernel stack switch. we just need to store value of esp register of the current process  onto the current PCB , and take corresponding esp value of next PCB out and put it into esp register.</p>\n<p>since Linux -0.11  didn’t define the variable of kernel stack pointer in PCB(task_struct). so we need to add a variable <code>kernelstack</code> to Linux-0.11 PCB, we still need define another variable <code>KERNEL_STACK = 12</code>  for determine variable of  <code>kernelstack</code> position in PCB.</p>\n<p><strong>Why KERNEL_STACK equal to 12 ?</strong></p>\n<p>because the kernel code have many  assembly hardcodes about manipulating this structure, so,if we add the variable <code>kernelstack</code> in other position, we need to modify kernel code in many difference place. </p>\n<pre><code class=\"lang-C\">KERNEL_STACK = 12\nmovl %esp,KERNEL_STACK(%eax)    ! 保存上一个进程的栈顶指针\n! 再取一下 ebx，因为前面修改过 ebx 的值,此时eax的值等于上一个进程的PCB指针\nmovl 8(%ebp),%ebx    \nmovl KERNEL_STACK(%ebx),%esp    ！取下个进程的栈顶指针放入esp\n</code></pre>\n<p>task_struct:</p>\n<pre><code class=\"lang-C\">// 在 include/linux/sched.h 中\nstruct task_struct {\n    long state;\n    long counter;\n    long priority;\n    long kernelstack;\n//......\n</code></pre>\n<p>because we modify the PCB structure,  we also need to modify initialization code of 0 process PCB structure .Modify <code>#define INIT_TASK { 0,15,15, 0,{ { },},0,...</code>  to <code>#define INIT_TASK { 0,15,15,PAGE_SIZE+(long)&amp;init_task, 0,{ { },},0,...</code></p>\n<p><strong>switch LDT</strong></p>\n<pre><code class=\"lang-assembly\">movl 12(%ebp),%ecx\nlldt %cx\n!上面使改LDT代码\nmovl $0x17,%ecx\nmov %cx,%fs\n</code></pre>\n<p>Why we have to add two code <code>movl $0x17,%ecx</code> <code>mov %cx,%fs</code> behind that code of switch LDT.</p>\n<p>because we need to change the segment base address and segment length limit in the hidden register about fs.</p>\n<p>Examlpe with CS. The hidden register for increase CPU processing speed.</p>\n<p><img src=\"/2020/02/16/process-switch-base-on-stack-switch/wm1.png\" srcset=\"/img/loading.gif\" alt></p>\n<p><strong>switch PC （switch to next process）</strong></p>\n<pre><code class=\"lang-assembly\">1:    popl %eax\n    popl %ebx\n    popl %ecx\n    popl %ebp\nret\n</code></pre>\n<p><strong>kernel stack  now</strong></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190819230403925.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MTc2MTQ3OA==,size_16,color_FFFFFF,t_70\" srcset=\"/img/loading.gif\" alt></p>\n<p>Execute those codes to turn to the next process,if it isn’t come here through code <code>je 1f</code>. Because we have been changed the kernel stack before. we <code>pop  (eax ,ebx,ecx,ebp)</code> is register of next process.   ret instruction equal to <code>pop IP</code>.So we execute <code>ret</code> turn to schedule() function tail of next process. Now ! we completed the stack switch perfectly.</p>\n<h2 id=\"modify-fork\"><a href=\"#modify-fork\" class=\"headerlink\" title=\"modify fork()\"></a>modify fork()</h2><p><strong>Why we need to modify fork() function ?</strong></p>\n<p><strong>Because, we need to simulate the parent process’s kernel stack for the newly created child process. </strong></p>\n<p>Now, we need to modify the fork() function. it is to associate the process’s user stack, user program to its kernel stack with SS: ESP, CS: IP, which is pushed in the kernel stack.</p>\n<p>In addition, since fork() function-core is let the child process to use code, data, and stack of the parent process . the fork core has not changed, although we use the stack switching.</p>\n<p><img src=\"/2020/02/16/process-switch-base-on-stack-switch/wm2.png\" srcset=\"/img/loading.gif\" alt></p>\n<p>Don’t hard to imagine. modify fork which  mean  initialize child process’s kernel stack. In <code>copy_process ()</code>as the core code of <code>fork ()</code>, it used to apply a page of memory as process PCB. The kernel stack address position equal pointer p position add the one page of memory size.  so the code <code>krnstack = (*long)(PAGE_SIZE + (long)p)</code> can find the child process kernel stack position. next step is to initialize the content of krnstack pointer .</p>\n<pre><code class=\"lang-C\">/*modify in fork()*/\nlong *krnstack;\np = (struct task_struct *) get_free_page();\nkrnstack = (long)(PAGE_SIZE +(long)p);\n *(--krnstack) = ss &amp; 0xffff;\n *(--krnstack) = esp;\n *(--krnstack) = eflags;\n *(--krnstack) = cs &amp; 0xffff;\n *(--krnstack) = eip;\n *(--krnstack) = ds &amp; 0xffff;\n *(--krnstack) = es &amp; 0xffff;\n *(--krnstack) = fs &amp; 0xffff;\n *(--krnstack) = gs &amp; 0xffff;\n *(--krnstack) = esi;\n *(--krnstack) = edi;\n *(--krnstack) = edx;\n *(--krnstack) = (long)first_return_from_kernel;\n *(--krnstack) = ebp;\n *(--krnstack) = ecx;\n *(--krnstack) = ebx;\n *(--krnstack) = 0;\n p-&gt;kernelstack = krnstack;\n ......\n</code></pre>\n<p>Those code for simulate parent kernel stack for child process! </p>\n<p>Make a attention !</p>\n<pre><code class=\"lang-c\">*(--krnstack) = (long)first_return_from_kernel;\n*(--krnstack) = 0;\n</code></pre>\n<p>We need to code a first_return_from_kernel as a mark! If we return to address first_return_from_kernel. We need to execute those code following.</p>\n<pre><code class=\"lang-assembly\">/*modify in system_call.s*/\n.align 2\nfirst_return_from_kernel:\npopl %edx\npopl %edi\npopl %esi\npop %gs\npop %fs\npop %es\npop %ds\niret\n</code></pre>\n<p>instruction <code>iret</code> equal to </p>\n<pre><code class=\"lang-assembly\">pop eip\npop cs\npop eflags\npop esp\npop ss\n</code></pre>\n<p> instruction <code>*(--krnstack) = 0;</code>  Means eax =0 for distinguish parent process and child process.</p>\n<p><strong>In the end , don’t forget add the two code following to corresponding .c file </strong></p>\n<pre><code class=\"lang-C\">extern void first_return_kernel(void); // in the fork()\nextern long switch_to(struct task_struct *p , unsigned long _ldt); // in the sched.c\n</code></pre>\n<h2 id=\"Modify-step\"><a href=\"#Modify-step\" class=\"headerlink\" title=\"Modify step\"></a>Modify step</h2><p><strong>Modify in system_call.s</strong></p>\n<p>Write the switch_to、first_return_from_kernel、etc in the system_call.s**</p>\n<pre><code class=\"lang-assembly\"># Don&#39;t forget to change the hardcode.\n# Because I forget to change the hardcode , I stayed here so long time.\nstate    = 0        # these are offsets into the task-struct.\ncounter    = 4\npriority = 8\nKERNEL_STACK = 12\nsignal    = 16\nsigaction = 20        # MUST be 16 (=len of sigaction)\nblocked = (33*16+4)\n\n# Define as a global variable，can be used in other file with the keyword extern declaration.\n.globl first_return_from_kernel, switch_to \n.align 2\nswitch_to:\n    pushl %ebp\n    movl %esp, %ebp\n    pushl %ecx\n    pushl %ebx\n    pushl %eax \n    movl 8(%ebp), %ebx \n    cmpl %ebx, current \n    je 1f\n    movl %ebx, %eax\n    xchgl %eax, current # eax=old_current, so current=pnext\n    movl tss, %ecx        # ecx = tss of pnext, it also the new current\n    addl $4096, %ebx    # ebx=the top of current kernel stack(pnext)\n    movl %ebx, 4(%ecx)\n    movl %esp, KERNEL_STACK(%eax)\n    movl 8(%ebp), %ebx \n    movl KERNEL_STACK(%ebx), %esp\n    movl 12(%ebp), %ecx\n    lldt %cx\n    movl $0x17, %ecx\n    mov %cx, %fs\n    cmpl %eax, last_task_used_math    \n    jne 1f\n    clts\n1:  popl %eax\n    popl %ebx\n    popl %ecx\n    popl %ebp\n    ret\n.align 2\nfirst_return_from_kernel:\n    popl %edx\n    popl %edi\n    popl %esi\n    pop %gs\n    pop %fs\n    pop %es\n    pop %ds\n    iret\n</code></pre>\n<p><strong>Modify sched.h </strong></p>\n<pre><code class=\"lang-C\">struct task_struct {\n/* these are hardcoded - don&#39;t touch */\n    long state;    /* -1 unrunnable, 0 runnable, &gt;0 stopped */\n    long counter;\n    long priority;\n    long kernelstack;\n    long signal;\n    struct sigaction sigaction[32];\n    long blocked;    /* bitmap of masked signals */\n    ......\n}\n#define INIT_TASK \\\n/* state etc */    { 0,15,15,PAGE_SIZE+(long)&amp;init_task, \\\n/* signals */    0,{{},},0, \\\n.................................\n\n /*注释掉\n#define switch_to(n) {\\\nstruct {long a,b;} __tmp; \\\n__asm__(&quot;cmpl %%ecx,current\\n\\t&quot; \\\n    &quot;je 1f\\n\\t&quot; \\\n    &quot;movw %%dx,%1\\n\\t&quot; \\\n    &quot;xchgl %%ecx,current\\n\\t&quot; \\\n    &quot;ljmp *%0\\n\\t&quot; \\\n    &quot;cmpl %%ecx,last_task_used_math\\n\\t&quot; \\\n    &quot;jne 1f\\n\\t&quot; \\\n    &quot;clts\\n&quot; \\\n    &quot;1:&quot; \\\n    ::&quot;m&quot; (*&amp;__tmp.a),&quot;m&quot; (*&amp;__tmp.b), \\\n    &quot;d&quot; (_TSS(n)),&quot;c&quot; ((long) task[n])); \\\n}\n*/\n</code></pre>\n<p><strong>Modify sched.c</strong></p>\n<pre><code class=\"lang-C\">extern long switch_to(struct task_struct *p , unsigned long _ldt);\nstruct tss_struct * tss = &amp;(init_task.task.tss);\nvoid schedule(void)\n{\n    int i,next,c;\n    struct task_struct ** p;\n    struct task_struct *pnext = &amp;(init_task.task);\n\n/* check alarm, wake up any interruptible tasks that have got a signal */\n\n    for(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)\n        if (*p) {\n            if ((*p)-&gt;alarm &amp;&amp; (*p)-&gt;alarm &lt; jiffies) {\n                    (*p)-&gt;signal |= (1&lt;&lt;(SIGALRM-1));\n                    (*p)-&gt;alarm = 0;\n                }\n            if (((*p)-&gt;signal &amp; ~(_BLOCKABLE &amp; (*p)-&gt;blocked)) &amp;&amp;\n            (*p)-&gt;state==TASK_INTERRUPTIBLE)\n                (*p)-&gt;state=TASK_RUNNING;\n        }\n\n/* this is the scheduler proper: */\n\n    while (1) {\n        c = -1;\n        next = 0;\n        i = NR_TASKS;\n        p = &amp;task[NR_TASKS];\n        while (--i) {\n            if (!*--p)\n                continue;\n            if ((*p)-&gt;state == TASK_RUNNING &amp;&amp; (*p)-&gt;counter &gt; c){\n                c = (*p)-&gt;counter, next = i;\n                pnext = *p;\n            }\n        }\n        if (c) break;\n        for(p = &amp;LAST_TASK ; p &gt; &amp;FIRST_TASK ; --p)\n            if (*p)\n                (*p)-&gt;counter = ((*p)-&gt;counter &gt;&gt; 1) +\n                        (*p)-&gt;priority;\n    }\n    switch_to(pnext,_LDT(next));\n}\n</code></pre>\n<p><strong>Modify fork()</strong></p>\n<pre><code class=\"lang-C\">extern void first_return_kernel(void);  \n\nint copy_process(int nr,long ebp,long edi,long esi,long gs,long none,\n        long ebx,long ecx,long edx,\n        long fs,long es,long ds,\n        long eip,long cs,long eflags,long esp,long ss)\n{\n    struct task_struct *p;\n    int i;\n    struct file *f;\n\n    p = (struct task_struct *) get_free_page();\n    if (!p)\n        return -EAGAIN;\n    task[nr] = p;\n    *p = *current;    /* NOTE! this doesn&#39;t copy the supervisor stack */\n    p-&gt;state = TASK_UNINTERRUPTIBLE;\n    p-&gt;pid = last_pid;\n    p-&gt;father = current-&gt;pid;\n    p-&gt;counter = p-&gt;priority;\n    long * krnstack ;\n    krnstack = (long *) (PAGE_SIZE + (long) p);\n    *(--krnstack) = ss &amp; 0xffff;\n    *(--krnstack) = esp;\n    *(--krnstack) = eflags;\n    *(--krnstack) = cs &amp; 0xffff;\n    *(--krnstack) = eip;\n *(--krnstack) = ds &amp; 0xffff; \n   *(--krnstack) = es &amp; 0xffff; \n   *(--krnstack) = fs &amp; 0xffff; \n *(--krnstack) = gs &amp; 0xffff;\n  *(--krnstack) = esi; \n *(--krnstack) = edi; \n    *(--krnstack) = edx;\n    *(--krnstack) =(long) first_return_kernel;\n    *(--krnstack) = ebp;\n    *(--krnstack) = ecx;\n    *(--krnstack) = ebx;\n    *(--krnstack) = 0;\n    p-&gt;kernelstack = krnstack;\n    p-&gt;signal = 0;\n    p-&gt;alarm = 0;\n    p-&gt;leader = 0;        /* process leadership doesn&#39;t inherit */\n    p-&gt;utime = p-&gt;stime = 0;\n    p-&gt;cutime = p-&gt;cstime = 0;\n    p-&gt;start_time = jiffies;\n    p-&gt;tss.back_link = 0;\n    p-&gt;tss.esp0 = PAGE_SIZE + (long) p;\n    p-&gt;tss.ss0 = 0x10;\n    p-&gt;tss.eip = eip;\n    p-&gt;tss.eflags = eflags;\n    p-&gt;tss.eax = 0;\n    p-&gt;tss.ecx = ecx;\n    p-&gt;tss.edx = edx;\n    p-&gt;tss.ebx = ebx;\n    p-&gt;tss.esp = esp;\n    p-&gt;tss.ebp = ebp;\n    p-&gt;tss.esi = esi;\n    p-&gt;tss.edi = edi;\n    p-&gt;tss.es = es &amp; 0xffff;\n    p-&gt;tss.cs = cs &amp; 0xffff;\n    p-&gt;tss.ss = ss &amp; 0xffff;\n    p-&gt;tss.ds = ds &amp; 0xffff;\n    p-&gt;tss.fs = fs &amp; 0xffff;\n    p-&gt;tss.gs = gs &amp; 0xffff;\n    p-&gt;tss.ldt = _LDT(nr);\n    p-&gt;tss.trace_bitmap = 0x80000000;\n    if (last_task_used_math == current)\n        __asm__(&quot;clts ; fnsave %0&quot;::&quot;m&quot; (p-&gt;tss.i387));\n    if (copy_mem(nr,p)) {\n        task[nr] = NULL;\n        free_page((long) p);\n        return -EAGAIN;\n    }\n    for (i=0; i&lt;NR_OPEN;i++)\n        if ((f=p-&gt;filp[i]))\n            f-&gt;f_count++;\n    if (current-&gt;pwd)\n        current-&gt;pwd-&gt;i_count++;\n    if (current-&gt;root)\n        current-&gt;root-&gt;i_count++;\n    if (current-&gt;executable)\n        current-&gt;executable-&gt;i_count++;\n    set_tss_desc(gdt+(nr&lt;&lt;1)+FIRST_TSS_ENTRY,&amp;(p-&gt;tss));\n    set_ldt_desc(gdt+(nr&lt;&lt;1)+FIRST_LDT_ENTRY,&amp;(p-&gt;ldt));\n    p-&gt;state = TASK_RUNNING;    /* do this last, just in case */\n    return last_pid;\n}\n</code></pre>\n"},{"title":"二元组和图形描述逻辑结构","date":"2020-03-20T05:56:16.000Z","_content":"\n# 数据结构\n**数据结构分为：数据的逻辑结构和数据的存储结构**<br>\n逻辑结构:集合，线性结构，树状结构，图形结构.即线性表，栈，队列，树，图等逻辑结构.其中线性表，栈，队列为线性结构，树，图为非线性结构．<br>\n\n1.集合结构：数据结构中的元素之间除了“同属一个集合” 的相互关系外，别无其他关系<br>\n2.线性结构：数据结构中的元素存在一对一的相互关系 <br>\n3.树形结构：数据结构中的元素存在一对多的相互关系<br>\n4.图形结构：数据结构中的元素存在多对多的相互关系<br>\n\n**存储结构：分为顺序存储和链式存储**<br>\n*逻辑结构和存储结构之间没有关系，只是抽象出来的数学模型方便理解*\n\n##  描述逻辑结构的两种方法：<br>\n\n**1. 二元组 DS=(D,S)** <br>\n其中D是数据元素的集合，S是数据元素之间的关系集合，并且数据元素之间的关系是使用序偶来表示．<br>\n序偶：是由两个元素x和y按一定的顺序排列而成的二元组，记作<x,y> ,x是它的第一元素，y是它的第二元素．　<br>\n\n\n**2.用图形来表示**<br>\n\n就是画图．．．\n\n## 分别用两种表示方法来逻辑结构 \n<1>.<br>\n\n如果D =!null, S =null,表明DS是**集合结构**，元素相互之间没有关系．<br>\n如果D = {0,1,2,3,4,5}, S = {(0,1),(2,3),(4,5)},表明DS是**线性结构**，元素相互之间存在一对一的关系<br>\n\n如果D = {0,1,2,3,4,5}, S = {(0,1),(0,3),(1,2),(1,6)},表明DS是**树状结构**，元素相互之间存在一对多的关系<br>\n\n如果D = {0,1,2,3,4,5}, S = {(0,1),(2,3),(4,5),(3,2),(3,1),(5,4),(2,4),(4,2)},表明DS是**图结构**，元素相互之间存在多对多的关系<br>\n\n**其实只要懂得根据元素的对应关系S画图，就可以知道，相应的逻辑结构是什么了**\n\n<2>. <br>\n\n![逻辑结构图像表示](870358-20160102224630526-1483051229.jpg)\n","source":"_posts/二元组和图形描述逻辑结构.md","raw":"---\ntitle: 二元组和图形描述逻辑结构\ndate: 2020-03-20 13:56:16\ncategories:\n- 数据结构\ntags:\n- 数据结构\n---\n\n# 数据结构\n**数据结构分为：数据的逻辑结构和数据的存储结构**<br>\n逻辑结构:集合，线性结构，树状结构，图形结构.即线性表，栈，队列，树，图等逻辑结构.其中线性表，栈，队列为线性结构，树，图为非线性结构．<br>\n\n1.集合结构：数据结构中的元素之间除了“同属一个集合” 的相互关系外，别无其他关系<br>\n2.线性结构：数据结构中的元素存在一对一的相互关系 <br>\n3.树形结构：数据结构中的元素存在一对多的相互关系<br>\n4.图形结构：数据结构中的元素存在多对多的相互关系<br>\n\n**存储结构：分为顺序存储和链式存储**<br>\n*逻辑结构和存储结构之间没有关系，只是抽象出来的数学模型方便理解*\n\n##  描述逻辑结构的两种方法：<br>\n\n**1. 二元组 DS=(D,S)** <br>\n其中D是数据元素的集合，S是数据元素之间的关系集合，并且数据元素之间的关系是使用序偶来表示．<br>\n序偶：是由两个元素x和y按一定的顺序排列而成的二元组，记作<x,y> ,x是它的第一元素，y是它的第二元素．　<br>\n\n\n**2.用图形来表示**<br>\n\n就是画图．．．\n\n## 分别用两种表示方法来逻辑结构 \n<1>.<br>\n\n如果D =!null, S =null,表明DS是**集合结构**，元素相互之间没有关系．<br>\n如果D = {0,1,2,3,4,5}, S = {(0,1),(2,3),(4,5)},表明DS是**线性结构**，元素相互之间存在一对一的关系<br>\n\n如果D = {0,1,2,3,4,5}, S = {(0,1),(0,3),(1,2),(1,6)},表明DS是**树状结构**，元素相互之间存在一对多的关系<br>\n\n如果D = {0,1,2,3,4,5}, S = {(0,1),(2,3),(4,5),(3,2),(3,1),(5,4),(2,4),(4,2)},表明DS是**图结构**，元素相互之间存在多对多的关系<br>\n\n**其实只要懂得根据元素的对应关系S画图，就可以知道，相应的逻辑结构是什么了**\n\n<2>. <br>\n\n![逻辑结构图像表示](870358-20160102224630526-1483051229.jpg)\n","slug":"二元组和图形描述逻辑结构","published":1,"updated":"2020-03-22T06:37:49.285Z","_id":"ck81r6o2w0000tyfw1lml2k8q","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><p><strong>数据结构分为：数据的逻辑结构和数据的存储结构</strong><br><br>逻辑结构:集合，线性结构，树状结构，图形结构.即线性表，栈，队列，树，图等逻辑结构.其中线性表，栈，队列为线性结构，树，图为非线性结构．<br></p>\n<p>1.集合结构：数据结构中的元素之间除了“同属一个集合” 的相互关系外，别无其他关系<br><br>2.线性结构：数据结构中的元素存在一对一的相互关系 <br><br>3.树形结构：数据结构中的元素存在一对多的相互关系<br><br>4.图形结构：数据结构中的元素存在多对多的相互关系<br></p>\n<p><strong>存储结构：分为顺序存储和链式存储</strong><br><br><em>逻辑结构和存储结构之间没有关系，只是抽象出来的数学模型方便理解</em></p>\n<h2 id=\"描述逻辑结构的两种方法：\"><a href=\"#描述逻辑结构的两种方法：\" class=\"headerlink\" title=\"描述逻辑结构的两种方法：\"></a>描述逻辑结构的两种方法：<br></h2><p><strong>1. 二元组 DS=(D,S)</strong> <br><br>其中D是数据元素的集合，S是数据元素之间的关系集合，并且数据元素之间的关系是使用序偶来表示．<br><br>序偶：是由两个元素x和y按一定的顺序排列而成的二元组，记作<x,y> ,x是它的第一元素，y是它的第二元素．　<br></x,y></p>\n<p><strong>2.用图形来表示</strong><br></p>\n<p>就是画图．．．</p>\n<h2 id=\"分别用两种表示方法来逻辑结构\"><a href=\"#分别用两种表示方法来逻辑结构\" class=\"headerlink\" title=\"分别用两种表示方法来逻辑结构\"></a>分别用两种表示方法来逻辑结构</h2><p><1>.<br></1></p>\n<p>如果D =!null, S =null,表明DS是<strong>集合结构</strong>，元素相互之间没有关系．<br><br>如果D = {0,1,2,3,4,5}, S = {(0,1),(2,3),(4,5)},表明DS是<strong>线性结构</strong>，元素相互之间存在一对一的关系<br></p>\n<p>如果D = {0,1,2,3,4,5}, S = {(0,1),(0,3),(1,2),(1,6)},表明DS是<strong>树状结构</strong>，元素相互之间存在一对多的关系<br></p>\n<p>如果D = {0,1,2,3,4,5}, S = {(0,1),(2,3),(4,5),(3,2),(3,1),(5,4),(2,4),(4,2)},表明DS是<strong>图结构</strong>，元素相互之间存在多对多的关系<br></p>\n<p><strong>其实只要懂得根据元素的对应关系S画图，就可以知道，相应的逻辑结构是什么了</strong></p>\n<p><2>. <br></2></p>\n<p><img src=\"/2020/03/20/%E4%BA%8C%E5%85%83%E7%BB%84%E5%92%8C%E5%9B%BE%E5%BD%A2%E6%8F%8F%E8%BF%B0%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84/870358-20160102224630526-1483051229.jpg\" srcset=\"/img/loading.gif\" alt=\"逻辑结构图像表示\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><p><strong>数据结构分为：数据的逻辑结构和数据的存储结构</strong><br><br>逻辑结构:集合，线性结构，树状结构，图形结构.即线性表，栈，队列，树，图等逻辑结构.其中线性表，栈，队列为线性结构，树，图为非线性结构．<br></p>\n<p>1.集合结构：数据结构中的元素之间除了“同属一个集合” 的相互关系外，别无其他关系<br><br>2.线性结构：数据结构中的元素存在一对一的相互关系 <br><br>3.树形结构：数据结构中的元素存在一对多的相互关系<br><br>4.图形结构：数据结构中的元素存在多对多的相互关系<br></p>\n<p><strong>存储结构：分为顺序存储和链式存储</strong><br><br><em>逻辑结构和存储结构之间没有关系，只是抽象出来的数学模型方便理解</em></p>\n<h2 id=\"描述逻辑结构的两种方法：\"><a href=\"#描述逻辑结构的两种方法：\" class=\"headerlink\" title=\"描述逻辑结构的两种方法：\"></a>描述逻辑结构的两种方法：<br></h2><p><strong>1. 二元组 DS=(D,S)</strong> <br><br>其中D是数据元素的集合，S是数据元素之间的关系集合，并且数据元素之间的关系是使用序偶来表示．<br><br>序偶：是由两个元素x和y按一定的顺序排列而成的二元组，记作<x,y> ,x是它的第一元素，y是它的第二元素．　<br></x,y></p>\n<p><strong>2.用图形来表示</strong><br></p>\n<p>就是画图．．．</p>\n<h2 id=\"分别用两种表示方法来逻辑结构\"><a href=\"#分别用两种表示方法来逻辑结构\" class=\"headerlink\" title=\"分别用两种表示方法来逻辑结构\"></a>分别用两种表示方法来逻辑结构</h2><p><1>.<br></1></p>\n<p>如果D =!null, S =null,表明DS是<strong>集合结构</strong>，元素相互之间没有关系．<br><br>如果D = {0,1,2,3,4,5}, S = {(0,1),(2,3),(4,5)},表明DS是<strong>线性结构</strong>，元素相互之间存在一对一的关系<br></p>\n<p>如果D = {0,1,2,3,4,5}, S = {(0,1),(0,3),(1,2),(1,6)},表明DS是<strong>树状结构</strong>，元素相互之间存在一对多的关系<br></p>\n<p>如果D = {0,1,2,3,4,5}, S = {(0,1),(2,3),(4,5),(3,2),(3,1),(5,4),(2,4),(4,2)},表明DS是<strong>图结构</strong>，元素相互之间存在多对多的关系<br></p>\n<p><strong>其实只要懂得根据元素的对应关系S画图，就可以知道，相应的逻辑结构是什么了</strong></p>\n<p><2>. <br></2></p>\n<p><img src=\"/2020/03/20/%E4%BA%8C%E5%85%83%E7%BB%84%E5%92%8C%E5%9B%BE%E5%BD%A2%E6%8F%8F%E8%BF%B0%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84/870358-20160102224630526-1483051229.jpg\" srcset=\"/img/loading.gif\" alt=\"逻辑结构图像表示\"></p>\n"},{"title":"KMP算法","date":"2020-03-22T06:35:33.000Z","_content":"**感谢:<br>**\n[KMP算法 Next数组详解(【洛谷3375】KMP字符串匹配 )](https://blog.csdn.net/qq_30974369/article/details/74276186)<br>\n[从头到尾彻底理解 KMP](https://wiki.jikexueyuan.com/project/kmp-algorithm/define.html)<br>\n[字符串匹配的KMP算法](http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html)<br>\n\n\n\nKMP算法即是用来解决在一个字符串S(例如ABCDEFG)中快速查找字符串P(ABCD)的一个算法.<br>\n在介绍KMP算法之前我们先介绍暴力查找字符的算法<br>\n\n# 字符串的暴力查找法\n如下图用暴力查找法在字符串S(BB....DE)中寻找匹配项字符P(ABCDABD）．<br>\n\n\n*暴力查找法核心就是发现S[i]和P[j]不相等，S和P就开始回退，S回退到i=i-(j-1)处 ,j回退为０．具体看下图：<br>*\n\n\n**比较S[0]!=P[0]不相等则回退,i=i-(j-1)=0-0+1=1,j=0,相当于S向前进一步，而P回到j=0再开始比较**\n![BL1](KMP算法/BL1.png)\n**还是不相等，与上面情况相同**\n![BL2](KMP算法/BL2.png)\n**S[i]=p[i],i++,j++继续向下比较**\n![BL3](KMP算法/BL3.png)\n![BL4](KMP算法/BL4.png)\n**发现S[i]!=P[j]不相等开始回退**\n![BL5](KMP算法/BL5.png)\n**置i=i-(j-1)=9-(6-1)=4,j=0,继续比较,即开始比较S[4]=B和P[0]=A,**\n![BL6](KMP算法/BL6.png)\n\n可以发现暴力查找的缺点就在发现不相等，S和P都要回退，再重新比较，倘若S和P都特别长，假设S有10000个字符，P有1000个字符，S与P从第０个字符开始相等，而在第998个字符不等，这时，S就要从１号开始再和P从０开始重新比较，太费时．<br>\n\n有没有一种方法让i不改变而只改变j的方法来解决这个字符串的查找问题？没错就是KMP算法.<br>\n\n# KMP算法\n在介绍KMP算法之前，需要先介绍**部分匹配值表**<br>\n\n首先，要了解两个概念：\"前缀\"和\"后缀\"。 \"前缀\"指除了最后一个字符以外，一个字符串的全部头部组合；\"后缀\"指除了第一个字符以外，一个字符串的全部尾部组合。\n\n**部分匹配值**就是许多字符串＂前缀＂和＂后缀＂最长的共有元素长度，部分匹配值表就是各个子字符串的所以部分匹配值组成的表．<br>\n\n\n以字符串ABCDABD为例：<br>\n```\n-\"A\",的＂前缀＂和＂后缀＂都是空集　共有元素长度是0． \n-\"AB\",的＂前缀＂是｛A｝和＂后缀＂是｛B｝　共有元素长度是0 \n-\"ABC\",的＂前缀＂是｛A,AB｝和＂后缀＂是{C,BC}　共有元素长度是0. \n-\"ABCD\",的＂前缀＂是{A,AB,ABC}和＂后缀＂{D,CD,BCD}　共有元素长度是0 \n-\"ABCDA\",的＂前缀＂是｛A,AB,ABC,ABCD｝和＂后缀＂是{A,DA,CDA,BCDA}　共有元素是A长度是1 \n-\"ABCDAB\",的＂前缀＂是｛A,AB,ABC,ABCD,ABCDA｝和＂后缀＂是｛B,AB,DAB,CDAB,BCDAB｝　共有元素是AB长度是2. \n-\"ABCDABD\",的＂前缀＂是｛A,AB,ABC,ABCD,ABCDA,ABCDAB｝和＂后缀＂是｛D,BD,ABD,DABD,CDABD,BCDABD,｝　共有元素长度0 \n```\n|字符串中各个子串|前缀|后缀|最大共有元素长度|\n|:-----:|:-----:|:-----:|:-----:|\n|A|空集|空集|0|\n|AB|｛A｝|｛B｝|0|\n|ABC|｛A,AB｝|{C,BC}|0|\n|ABCD|{A,AB,ABC}|{D,CD,BCD}　|0|\n|ABCDA|｛A,AB,ABC,ABCD｝|{A,DA,CDA,BCDA}|1|\n|ABCDAB|｛A,AB,ABC,ABCD,ABCDA｝|｛B,AB,DAB,CDAB,BCDAB｝|2|\n|ABCDABD|｛A,AB,ABC,ABCD,ABCDA,ABCDAB｝|｛D,BD,ABD,DABD,CDABD,BCDABD,｝|0|\n\n<br>\n\n如下图KMP算法在遇到S[i]!=P[j]时，i不改变而只改变j，j会向右前进，移动的位数符合以下公式：<br>\n```\n移动位数（Z）　＝　已匹配位数(X)　－　匹配子字符串的部分匹配值(Y)　\n```\n\n\n![KMP1](KMP算法/KMP举例1.png)<br>\n\nP要向前移动的位数是6-2=4位，再进行比较．\n![KMP2](KMP算法/KMP举例2.png)\n\n\n**为什么移动的位数要等于4呢，如果小于4会怎样？<br>**\n答：因为移动的位数等于4，再次比较时P字符前Y个字符不会发生不匹配的现象，而如果移动位数小于4，则再次\n字符P,S再次比较时一定会发生不匹配的现象．<br>\n**为什么如果右移动小于Z就会发生不匹配的现象呢？**<br>\n答：如果向又移动３位则且要求再次比较不会发生不匹配的现象，就要求字符串P的前三位P0P1P2,与P3P4P5相等才不会发生不匹配的现象，但现在现实时P0P1和P4P5相等（部分匹配值为２），P0P1P2和P3P4P5不等，所以向右移动３一定会不匹配，同理向右移动２或者１都一样．<br>\n\n## KMP的代码实现\n\nnext[i]里面存放就是计算出来的部分匹配值表的变形<br>\n部分匹配值表：<br>\n|部分匹配值表|||||||\n|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|\n|0|1|2|3|4|5|6|\n|A|AB|ABC|ABCD|ABCDA|ABCDAB|ABCDABD|\n|0|0|0|0|1|2|0|\n\n|next[i]表|相当于|部分匹配值|右移１位|再把next[0]|赋值为-1||\n|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|\n|0|1|2|3|4|5|6|\n|A|AB|ABC|ABCD|ABCDA|ABCDAB|ABCDABD|\n|-1|0|0|0|0|1|2|\n\n**为什么要这么做呢？而且为什么要把next[0]赋值为-1呢？**<br>\n因为这样方便写代码．把next[0]赋成-1,我认为是用来做一个标记，如果next[0]=0当两字符串从第0个就不匹配时，向又移动的位数就是0-0=0,相当于不移动，所以把next[0]设置成-1,当j=-1时代表第０个不匹配，就不用公式计算移动位数，直接i++,j++<br>\n假设现在文本串 S 匹配到 i 位置，模块串 P 匹配到 j 位置<br>\n- 1.if (j == -1 || s[i] == p[j]) 则j++,i++<br>\n- 2.否则若s[i] != p[j]&& j!=-1,j=next[j]　(这里就相当于P向右边移动了j-next[j]位)<br>1\n\n\n\n\n``` c\n\nint KmpSearch(char* s, char* p)  \n{  \n    int i = 0;  \n    int j = 0;  \n    int sLen = strlen(s);  \n    int pLen = strlen(p);  \n    while (i < sLen && j < pLen)  \n    {  \n        //如果j = -1(第0个就不想等直接下一位)，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++      \n        if (j == -1 || s[i] == p[j])  \n        {  \n            i++;  \n            j++;  \n        }  \n        else  \n        {  \n            //如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j] (这条指令的效果相当于向右移动Z=j-next[j]位)     \n            //next[j]即为j所对应的next值        \n            j = next[j];  \n        }  \n    }  \n    if (j == pLen)  \n        return i - j;  \n    else  \n        return -1;  \n}  \n```\n执行上述代码需要的条件是已经计算出需要匹配字符P的next[i]数组．\n\n## next数组的计算\n\n**给出一个字符串P到底怎么计算出next[i]数组呢？**\n答：<br>\n\n**这就是给出的字符串，黑黑一坨**<br>\n![next1](KMP算法/next1.png)<br> \n**假设:字符串P的红色部分已经匹配，现在准备比较蓝色的位置**<br>\n![next2](KMP算法/next2.png)<br>\n**蓝色位置和绿色位置比较,(后缀的下一位和前缀的下一位比较)**\n![next3](KMP算法/next3.png)<br>\n**蓝色与绿色匹配不上,此时寻找红色前缀的最大公共前后缀，即两个灰色部分相等**<br>\n![next4](KMP算法/next4.png)<br>\n**由于两个红色部分是相同的所以红色后缀，也有两个灰色相同，（这四个灰色都是相同的）**<br>\n![next5](KMP算法/next5.png)<br>\n**最后用第１个灰色的下一位，也就是紫色，与第４个灰色的下一位，也就是蓝色相比较**<br>\n![next6](KMP算法/next6.png)<br>\n\n有点递归的感觉,具体代码如下：<br>\n```c\nvoid GetNext(char* p,int next[])\n{\n\tint pLen = strlen(p);\n\tnext[0] = -1;\n\tint k = -1;\n\tint j = 0;\n\twhile (j < pLen - 1)\n\t{\n\t\t//p[k]表示前缀，p[j]表示后缀\n//next[0]=-1,next[1]=0是固定的\n\t\tif (k == -1 || p[j] == p[k]) \n\t\t{\n\t\t\t++k;\n\t\t\t++j;\n\t\t\tnext[j] = k;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tk = next[k];\n\t\t}\n\t}\n}\n```\n尽管next数组已经可以很到的提高匹配的效率，但是如果遇到极端情况例如：<br>\n|0|1|2|3|4|5|6|7|8|9|10|11|12||\n|:-----:|:-----:|:-----:|:-----:|:-----:|-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|\n|A|A|A|A|A|A|A|A|B|B|B|B|B|.....|\n|A|A|A|A|A|A|A|A|A|\n|-1|0|1|2|3|4|5|6|7|这里是|next数组||\n这样子匹配时，在８这里发生不匹配发生移动，移动的位数是８－７＝１位，也就是下次比较时是P[7]和S[8]比较，但是这两者也不匹配，则又会移动，同样是同样是移动１位，根据上图可以看出，如果遇到这种情况，KMP算法就相当于遍历又变成了暴力搜索了．<br>\n\n**那是否有办法解决这个问题？**<br>\n答案是：改进next数组，得到的新数组就是nextval数组．<br>\n\n\n## nextval数组\nnextval数组值的求解方法：<br>\n**如果下标a的字符P[a]＝P[next[a]],则nextval[a]=nextval[next[a]]<br>如果不等则nextval[a]=next[a]**<br>\n所以得到的nextval数组：<br>\n|0|1|2|3|4|5|6|7|8|9|10|11|12||\n|:-----:|:-----:|:-----:|:-----:|:-----:|-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|\n|A|A|A|A|A|A|A|A|B|B|B|B|B|.....|\n|A|A|A|A|A|A|A|A|A|\n|-1|0|1|2|3|4|5|6|7|next数组|||\n|-1|-1|-1|-1|-1|-1|-1|-1|-1|nextval数组||\n可以看到如果用nextval数组代替next数组，当在８号位不匹配时，直接遇到标志值，直接向右边移动了８位，再次比较时就是P[0]和S[8]比较了<br>\n \n\n**nextval数组是怎么解决这个问题的呢?**<br>\n答:下标为a的位置不匹配，next[a]表示的是(0~a-1),a个字符的部分匹配值**X**(**注意：部分匹配值是从１开始算的**)，所以0~X-1的字符是其匹配的前缀，P[next[a]]是匹配前缀的下一个数，所以如果P[a]=P[next[a]]再次跳到P[next[a]]这里比较还会不匹配，所以nextval[a]=nextval[next[a]]（相当于一个递归向前寻找），如果不相等，再次跳到这里比较就有意义，所以nextval[a]=next[a]\n","source":"_posts/KMP算法.md","raw":"---\ntitle: KMP算法\ndate: 2020-03-22 14:35:33\ncategories:\n- 数据结构\ntags:\n- 数据结构\n---\n**感谢:<br>**\n[KMP算法 Next数组详解(【洛谷3375】KMP字符串匹配 )](https://blog.csdn.net/qq_30974369/article/details/74276186)<br>\n[从头到尾彻底理解 KMP](https://wiki.jikexueyuan.com/project/kmp-algorithm/define.html)<br>\n[字符串匹配的KMP算法](http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html)<br>\n\n\n\nKMP算法即是用来解决在一个字符串S(例如ABCDEFG)中快速查找字符串P(ABCD)的一个算法.<br>\n在介绍KMP算法之前我们先介绍暴力查找字符的算法<br>\n\n# 字符串的暴力查找法\n如下图用暴力查找法在字符串S(BB....DE)中寻找匹配项字符P(ABCDABD）．<br>\n\n\n*暴力查找法核心就是发现S[i]和P[j]不相等，S和P就开始回退，S回退到i=i-(j-1)处 ,j回退为０．具体看下图：<br>*\n\n\n**比较S[0]!=P[0]不相等则回退,i=i-(j-1)=0-0+1=1,j=0,相当于S向前进一步，而P回到j=0再开始比较**\n![BL1](KMP算法/BL1.png)\n**还是不相等，与上面情况相同**\n![BL2](KMP算法/BL2.png)\n**S[i]=p[i],i++,j++继续向下比较**\n![BL3](KMP算法/BL3.png)\n![BL4](KMP算法/BL4.png)\n**发现S[i]!=P[j]不相等开始回退**\n![BL5](KMP算法/BL5.png)\n**置i=i-(j-1)=9-(6-1)=4,j=0,继续比较,即开始比较S[4]=B和P[0]=A,**\n![BL6](KMP算法/BL6.png)\n\n可以发现暴力查找的缺点就在发现不相等，S和P都要回退，再重新比较，倘若S和P都特别长，假设S有10000个字符，P有1000个字符，S与P从第０个字符开始相等，而在第998个字符不等，这时，S就要从１号开始再和P从０开始重新比较，太费时．<br>\n\n有没有一种方法让i不改变而只改变j的方法来解决这个字符串的查找问题？没错就是KMP算法.<br>\n\n# KMP算法\n在介绍KMP算法之前，需要先介绍**部分匹配值表**<br>\n\n首先，要了解两个概念：\"前缀\"和\"后缀\"。 \"前缀\"指除了最后一个字符以外，一个字符串的全部头部组合；\"后缀\"指除了第一个字符以外，一个字符串的全部尾部组合。\n\n**部分匹配值**就是许多字符串＂前缀＂和＂后缀＂最长的共有元素长度，部分匹配值表就是各个子字符串的所以部分匹配值组成的表．<br>\n\n\n以字符串ABCDABD为例：<br>\n```\n-\"A\",的＂前缀＂和＂后缀＂都是空集　共有元素长度是0． \n-\"AB\",的＂前缀＂是｛A｝和＂后缀＂是｛B｝　共有元素长度是0 \n-\"ABC\",的＂前缀＂是｛A,AB｝和＂后缀＂是{C,BC}　共有元素长度是0. \n-\"ABCD\",的＂前缀＂是{A,AB,ABC}和＂后缀＂{D,CD,BCD}　共有元素长度是0 \n-\"ABCDA\",的＂前缀＂是｛A,AB,ABC,ABCD｝和＂后缀＂是{A,DA,CDA,BCDA}　共有元素是A长度是1 \n-\"ABCDAB\",的＂前缀＂是｛A,AB,ABC,ABCD,ABCDA｝和＂后缀＂是｛B,AB,DAB,CDAB,BCDAB｝　共有元素是AB长度是2. \n-\"ABCDABD\",的＂前缀＂是｛A,AB,ABC,ABCD,ABCDA,ABCDAB｝和＂后缀＂是｛D,BD,ABD,DABD,CDABD,BCDABD,｝　共有元素长度0 \n```\n|字符串中各个子串|前缀|后缀|最大共有元素长度|\n|:-----:|:-----:|:-----:|:-----:|\n|A|空集|空集|0|\n|AB|｛A｝|｛B｝|0|\n|ABC|｛A,AB｝|{C,BC}|0|\n|ABCD|{A,AB,ABC}|{D,CD,BCD}　|0|\n|ABCDA|｛A,AB,ABC,ABCD｝|{A,DA,CDA,BCDA}|1|\n|ABCDAB|｛A,AB,ABC,ABCD,ABCDA｝|｛B,AB,DAB,CDAB,BCDAB｝|2|\n|ABCDABD|｛A,AB,ABC,ABCD,ABCDA,ABCDAB｝|｛D,BD,ABD,DABD,CDABD,BCDABD,｝|0|\n\n<br>\n\n如下图KMP算法在遇到S[i]!=P[j]时，i不改变而只改变j，j会向右前进，移动的位数符合以下公式：<br>\n```\n移动位数（Z）　＝　已匹配位数(X)　－　匹配子字符串的部分匹配值(Y)　\n```\n\n\n![KMP1](KMP算法/KMP举例1.png)<br>\n\nP要向前移动的位数是6-2=4位，再进行比较．\n![KMP2](KMP算法/KMP举例2.png)\n\n\n**为什么移动的位数要等于4呢，如果小于4会怎样？<br>**\n答：因为移动的位数等于4，再次比较时P字符前Y个字符不会发生不匹配的现象，而如果移动位数小于4，则再次\n字符P,S再次比较时一定会发生不匹配的现象．<br>\n**为什么如果右移动小于Z就会发生不匹配的现象呢？**<br>\n答：如果向又移动３位则且要求再次比较不会发生不匹配的现象，就要求字符串P的前三位P0P1P2,与P3P4P5相等才不会发生不匹配的现象，但现在现实时P0P1和P4P5相等（部分匹配值为２），P0P1P2和P3P4P5不等，所以向右移动３一定会不匹配，同理向右移动２或者１都一样．<br>\n\n## KMP的代码实现\n\nnext[i]里面存放就是计算出来的部分匹配值表的变形<br>\n部分匹配值表：<br>\n|部分匹配值表|||||||\n|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|\n|0|1|2|3|4|5|6|\n|A|AB|ABC|ABCD|ABCDA|ABCDAB|ABCDABD|\n|0|0|0|0|1|2|0|\n\n|next[i]表|相当于|部分匹配值|右移１位|再把next[0]|赋值为-1||\n|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|\n|0|1|2|3|4|5|6|\n|A|AB|ABC|ABCD|ABCDA|ABCDAB|ABCDABD|\n|-1|0|0|0|0|1|2|\n\n**为什么要这么做呢？而且为什么要把next[0]赋值为-1呢？**<br>\n因为这样方便写代码．把next[0]赋成-1,我认为是用来做一个标记，如果next[0]=0当两字符串从第0个就不匹配时，向又移动的位数就是0-0=0,相当于不移动，所以把next[0]设置成-1,当j=-1时代表第０个不匹配，就不用公式计算移动位数，直接i++,j++<br>\n假设现在文本串 S 匹配到 i 位置，模块串 P 匹配到 j 位置<br>\n- 1.if (j == -1 || s[i] == p[j]) 则j++,i++<br>\n- 2.否则若s[i] != p[j]&& j!=-1,j=next[j]　(这里就相当于P向右边移动了j-next[j]位)<br>1\n\n\n\n\n``` c\n\nint KmpSearch(char* s, char* p)  \n{  \n    int i = 0;  \n    int j = 0;  \n    int sLen = strlen(s);  \n    int pLen = strlen(p);  \n    while (i < sLen && j < pLen)  \n    {  \n        //如果j = -1(第0个就不想等直接下一位)，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++      \n        if (j == -1 || s[i] == p[j])  \n        {  \n            i++;  \n            j++;  \n        }  \n        else  \n        {  \n            //如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j] (这条指令的效果相当于向右移动Z=j-next[j]位)     \n            //next[j]即为j所对应的next值        \n            j = next[j];  \n        }  \n    }  \n    if (j == pLen)  \n        return i - j;  \n    else  \n        return -1;  \n}  \n```\n执行上述代码需要的条件是已经计算出需要匹配字符P的next[i]数组．\n\n## next数组的计算\n\n**给出一个字符串P到底怎么计算出next[i]数组呢？**\n答：<br>\n\n**这就是给出的字符串，黑黑一坨**<br>\n![next1](KMP算法/next1.png)<br> \n**假设:字符串P的红色部分已经匹配，现在准备比较蓝色的位置**<br>\n![next2](KMP算法/next2.png)<br>\n**蓝色位置和绿色位置比较,(后缀的下一位和前缀的下一位比较)**\n![next3](KMP算法/next3.png)<br>\n**蓝色与绿色匹配不上,此时寻找红色前缀的最大公共前后缀，即两个灰色部分相等**<br>\n![next4](KMP算法/next4.png)<br>\n**由于两个红色部分是相同的所以红色后缀，也有两个灰色相同，（这四个灰色都是相同的）**<br>\n![next5](KMP算法/next5.png)<br>\n**最后用第１个灰色的下一位，也就是紫色，与第４个灰色的下一位，也就是蓝色相比较**<br>\n![next6](KMP算法/next6.png)<br>\n\n有点递归的感觉,具体代码如下：<br>\n```c\nvoid GetNext(char* p,int next[])\n{\n\tint pLen = strlen(p);\n\tnext[0] = -1;\n\tint k = -1;\n\tint j = 0;\n\twhile (j < pLen - 1)\n\t{\n\t\t//p[k]表示前缀，p[j]表示后缀\n//next[0]=-1,next[1]=0是固定的\n\t\tif (k == -1 || p[j] == p[k]) \n\t\t{\n\t\t\t++k;\n\t\t\t++j;\n\t\t\tnext[j] = k;\n\t\t}\n\t\telse \n\t\t{\n\t\t\tk = next[k];\n\t\t}\n\t}\n}\n```\n尽管next数组已经可以很到的提高匹配的效率，但是如果遇到极端情况例如：<br>\n|0|1|2|3|4|5|6|7|8|9|10|11|12||\n|:-----:|:-----:|:-----:|:-----:|:-----:|-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|\n|A|A|A|A|A|A|A|A|B|B|B|B|B|.....|\n|A|A|A|A|A|A|A|A|A|\n|-1|0|1|2|3|4|5|6|7|这里是|next数组||\n这样子匹配时，在８这里发生不匹配发生移动，移动的位数是８－７＝１位，也就是下次比较时是P[7]和S[8]比较，但是这两者也不匹配，则又会移动，同样是同样是移动１位，根据上图可以看出，如果遇到这种情况，KMP算法就相当于遍历又变成了暴力搜索了．<br>\n\n**那是否有办法解决这个问题？**<br>\n答案是：改进next数组，得到的新数组就是nextval数组．<br>\n\n\n## nextval数组\nnextval数组值的求解方法：<br>\n**如果下标a的字符P[a]＝P[next[a]],则nextval[a]=nextval[next[a]]<br>如果不等则nextval[a]=next[a]**<br>\n所以得到的nextval数组：<br>\n|0|1|2|3|4|5|6|7|8|9|10|11|12||\n|:-----:|:-----:|:-----:|:-----:|:-----:|-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|:-----:|\n|A|A|A|A|A|A|A|A|B|B|B|B|B|.....|\n|A|A|A|A|A|A|A|A|A|\n|-1|0|1|2|3|4|5|6|7|next数组|||\n|-1|-1|-1|-1|-1|-1|-1|-1|-1|nextval数组||\n可以看到如果用nextval数组代替next数组，当在８号位不匹配时，直接遇到标志值，直接向右边移动了８位，再次比较时就是P[0]和S[8]比较了<br>\n \n\n**nextval数组是怎么解决这个问题的呢?**<br>\n答:下标为a的位置不匹配，next[a]表示的是(0~a-1),a个字符的部分匹配值**X**(**注意：部分匹配值是从１开始算的**)，所以0~X-1的字符是其匹配的前缀，P[next[a]]是匹配前缀的下一个数，所以如果P[a]=P[next[a]]再次跳到P[next[a]]这里比较还会不匹配，所以nextval[a]=nextval[next[a]]（相当于一个递归向前寻找），如果不相等，再次跳到这里比较就有意义，所以nextval[a]=next[a]\n","slug":"KMP算法","published":1,"updated":"2020-03-23T09:28:14.421Z","_id":"ck82o69jx0000sffwg52tduhn","comments":1,"layout":"post","photos":[],"link":"","content":"<p><strong>感谢:<br></strong><br><a href=\"https://blog.csdn.net/qq_30974369/article/details/74276186\" target=\"_blank\" rel=\"noopener\">KMP算法 Next数组详解(【洛谷3375】KMP字符串匹配 )</a><br><br><a href=\"https://wiki.jikexueyuan.com/project/kmp-algorithm/define.html\" target=\"_blank\" rel=\"noopener\">从头到尾彻底理解 KMP</a><br><br><a href=\"http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html\" target=\"_blank\" rel=\"noopener\">字符串匹配的KMP算法</a><br></p>\n<p>KMP算法即是用来解决在一个字符串S(例如ABCDEFG)中快速查找字符串P(ABCD)的一个算法.<br><br>在介绍KMP算法之前我们先介绍暴力查找字符的算法<br></p>\n<h1 id=\"字符串的暴力查找法\"><a href=\"#字符串的暴力查找法\" class=\"headerlink\" title=\"字符串的暴力查找法\"></a>字符串的暴力查找法</h1><p>如下图用暴力查找法在字符串S(BB….DE)中寻找匹配项字符P(ABCDABD）．<br></p>\n<p><em>暴力查找法核心就是发现S[i]和P[j]不相等，S和P就开始回退，S回退到i=i-(j-1)处 ,j回退为０．具体看下图：<br></em></p>\n<p><strong>比较S[0]!=P[0]不相等则回退,i=i-(j-1)=0-0+1=1,j=0,相当于S向前进一步，而P回到j=0再开始比较</strong><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/BL1.png\" srcset=\"/img/loading.gif\" alt=\"BL1\"><br><strong>还是不相等，与上面情况相同</strong><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/BL2.png\" srcset=\"/img/loading.gif\" alt=\"BL2\"><br><strong>S[i]=p[i],i++,j++继续向下比较</strong><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/BL3.png\" srcset=\"/img/loading.gif\" alt=\"BL3\"><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/BL4.png\" srcset=\"/img/loading.gif\" alt=\"BL4\"><br><strong>发现S[i]!=P[j]不相等开始回退</strong><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/BL5.png\" srcset=\"/img/loading.gif\" alt=\"BL5\"><br><strong>置i=i-(j-1)=9-(6-1)=4,j=0,继续比较,即开始比较S[4]=B和P[0]=A,</strong><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/BL6.png\" srcset=\"/img/loading.gif\" alt=\"BL6\"></p>\n<p>可以发现暴力查找的缺点就在发现不相等，S和P都要回退，再重新比较，倘若S和P都特别长，假设S有10000个字符，P有1000个字符，S与P从第０个字符开始相等，而在第998个字符不等，这时，S就要从１号开始再和P从０开始重新比较，太费时．<br></p>\n<p>有没有一种方法让i不改变而只改变j的方法来解决这个字符串的查找问题？没错就是KMP算法.<br></p>\n<h1 id=\"KMP算法\"><a href=\"#KMP算法\" class=\"headerlink\" title=\"KMP算法\"></a>KMP算法</h1><p>在介绍KMP算法之前，需要先介绍<strong>部分匹配值表</strong><br></p>\n<p>首先，要了解两个概念：”前缀”和”后缀”。 “前缀”指除了最后一个字符以外，一个字符串的全部头部组合；”后缀”指除了第一个字符以外，一个字符串的全部尾部组合。</p>\n<p><strong>部分匹配值</strong>就是许多字符串＂前缀＂和＂后缀＂最长的共有元素长度，部分匹配值表就是各个子字符串的所以部分匹配值组成的表．<br></p>\n<p>以字符串ABCDABD为例：<br></p>\n<pre><code>-&quot;A&quot;,的＂前缀＂和＂后缀＂都是空集　共有元素长度是0． \n-&quot;AB&quot;,的＂前缀＂是｛A｝和＂后缀＂是｛B｝　共有元素长度是0 \n-&quot;ABC&quot;,的＂前缀＂是｛A,AB｝和＂后缀＂是{C,BC}　共有元素长度是0. \n-&quot;ABCD&quot;,的＂前缀＂是{A,AB,ABC}和＂后缀＂{D,CD,BCD}　共有元素长度是0 \n-&quot;ABCDA&quot;,的＂前缀＂是｛A,AB,ABC,ABCD｝和＂后缀＂是{A,DA,CDA,BCDA}　共有元素是A长度是1 \n-&quot;ABCDAB&quot;,的＂前缀＂是｛A,AB,ABC,ABCD,ABCDA｝和＂后缀＂是｛B,AB,DAB,CDAB,BCDAB｝　共有元素是AB长度是2. \n-&quot;ABCDABD&quot;,的＂前缀＂是｛A,AB,ABC,ABCD,ABCDA,ABCDAB｝和＂后缀＂是｛D,BD,ABD,DABD,CDABD,BCDABD,｝　共有元素长度0\n</code></pre><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符串中各个子串</th>\n<th style=\"text-align:center\">前缀</th>\n<th style=\"text-align:center\">后缀</th>\n<th style=\"text-align:center\">最大共有元素长度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">空集</td>\n<td style=\"text-align:center\">空集</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AB</td>\n<td style=\"text-align:center\">｛A｝</td>\n<td style=\"text-align:center\">｛B｝</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ABC</td>\n<td style=\"text-align:center\">｛A,AB｝</td>\n<td style=\"text-align:center\">{C,BC}</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ABCD</td>\n<td style=\"text-align:center\">{A,AB,ABC}</td>\n<td style=\"text-align:center\">{D,CD,BCD}　</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ABCDA</td>\n<td style=\"text-align:center\">｛A,AB,ABC,ABCD｝</td>\n<td style=\"text-align:center\">{A,DA,CDA,BCDA}</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ABCDAB</td>\n<td style=\"text-align:center\">｛A,AB,ABC,ABCD,ABCDA｝</td>\n<td style=\"text-align:center\">｛B,AB,DAB,CDAB,BCDAB｝</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ABCDABD</td>\n<td style=\"text-align:center\">｛A,AB,ABC,ABCD,ABCDA,ABCDAB｝</td>\n<td style=\"text-align:center\">｛D,BD,ABD,DABD,CDABD,BCDABD,｝</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><br></p>\n<p>如下图KMP算法在遇到S[i]!=P[j]时，i不改变而只改变j，j会向右前进，移动的位数符合以下公式：<br></p>\n<pre><code>移动位数（Z）　＝　已匹配位数(X)　－　匹配子字符串的部分匹配值(Y)\n</code></pre><p><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/KMP举例1.png\" srcset=\"/img/loading.gif\" alt=\"KMP1\"><br></p>\n<p>P要向前移动的位数是6-2=4位，再进行比较．<br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/KMP举例2.png\" srcset=\"/img/loading.gif\" alt=\"KMP2\"></p>\n<p><strong>为什么移动的位数要等于4呢，如果小于4会怎样？<br></strong><br>答：因为移动的位数等于4，再次比较时P字符前Y个字符不会发生不匹配的现象，而如果移动位数小于4，则再次<br>字符P,S再次比较时一定会发生不匹配的现象．<br><br><strong>为什么如果右移动小于Z就会发生不匹配的现象呢？</strong><br><br>答：如果向又移动３位则且要求再次比较不会发生不匹配的现象，就要求字符串P的前三位P0P1P2,与P3P4P5相等才不会发生不匹配的现象，但现在现实时P0P1和P4P5相等（部分匹配值为２），P0P1P2和P3P4P5不等，所以向右移动３一定会不匹配，同理向右移动２或者１都一样．<br></p>\n<h2 id=\"KMP的代码实现\"><a href=\"#KMP的代码实现\" class=\"headerlink\" title=\"KMP的代码实现\"></a>KMP的代码实现</h2><p>next[i]里面存放就是计算出来的部分匹配值表的变形<br><br>部分匹配值表：<br><br>|部分匹配值表|||||||<br>|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|<br>|0|1|2|3|4|5|6|<br>|A|AB|ABC|ABCD|ABCDA|ABCDAB|ABCDABD|<br>|0|0|0|0|1|2|0|</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">next[i]表</th>\n<th style=\"text-align:center\">相当于</th>\n<th style=\"text-align:center\">部分匹配值</th>\n<th style=\"text-align:center\">右移１位</th>\n<th style=\"text-align:center\">再把next[0]</th>\n<th style=\"text-align:center\">赋值为-1</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">AB</td>\n<td style=\"text-align:center\">ABC</td>\n<td style=\"text-align:center\">ABCD</td>\n<td style=\"text-align:center\">ABCDA</td>\n<td style=\"text-align:center\">ABCDAB</td>\n<td style=\"text-align:center\">ABCDABD</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>为什么要这么做呢？而且为什么要把next[0]赋值为-1呢？</strong><br><br>因为这样方便写代码．把next[0]赋成-1,我认为是用来做一个标记，如果next[0]=0当两字符串从第0个就不匹配时，向又移动的位数就是0-0=0,相当于不移动，所以把next[0]设置成-1,当j=-1时代表第０个不匹配，就不用公式计算移动位数，直接i++,j++<br><br>假设现在文本串 S 匹配到 i 位置，模块串 P 匹配到 j 位置<br></p>\n<ul>\n<li>1.if (j == -1 || s[i] == p[j]) 则j++,i++<br></li>\n<li>2.否则若s[i] != p[j]&amp;&amp; j!=-1,j=next[j]　(这里就相当于P向右边移动了j-next[j]位)<br>1</li>\n</ul>\n<pre><code class=\"lang-c\">\nint KmpSearch(char* s, char* p)  \n{  \n    int i = 0;  \n    int j = 0;  \n    int sLen = strlen(s);  \n    int pLen = strlen(p);  \n    while (i &lt; sLen &amp;&amp; j &lt; pLen)  \n    {  \n        //如果j = -1(第0个就不想等直接下一位)，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++      \n        if (j == -1 || s[i] == p[j])  \n        {  \n            i++;  \n            j++;  \n        }  \n        else  \n        {  \n            //如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j] (这条指令的效果相当于向右移动Z=j-next[j]位)     \n            //next[j]即为j所对应的next值        \n            j = next[j];  \n        }  \n    }  \n    if (j == pLen)  \n        return i - j;  \n    else  \n        return -1;  \n}\n</code></pre>\n<p>执行上述代码需要的条件是已经计算出需要匹配字符P的next[i]数组．</p>\n<h2 id=\"next数组的计算\"><a href=\"#next数组的计算\" class=\"headerlink\" title=\"next数组的计算\"></a>next数组的计算</h2><p><strong>给出一个字符串P到底怎么计算出next[i]数组呢？</strong><br>答：<br></p>\n<p><strong>这就是给出的字符串，黑黑一坨</strong><br><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/next1.png\" srcset=\"/img/loading.gif\" alt=\"next1\"><br><br><strong>假设:字符串P的红色部分已经匹配，现在准备比较蓝色的位置</strong><br><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/next2.png\" srcset=\"/img/loading.gif\" alt=\"next2\"><br><br><strong>蓝色位置和绿色位置比较,(后缀的下一位和前缀的下一位比较)</strong><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/next3.png\" srcset=\"/img/loading.gif\" alt=\"next3\"><br><br><strong>蓝色与绿色匹配不上,此时寻找红色前缀的最大公共前后缀，即两个灰色部分相等</strong><br><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/next4.png\" srcset=\"/img/loading.gif\" alt=\"next4\"><br><br><strong>由于两个红色部分是相同的所以红色后缀，也有两个灰色相同，（这四个灰色都是相同的）</strong><br><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/next5.png\" srcset=\"/img/loading.gif\" alt=\"next5\"><br><br><strong>最后用第１个灰色的下一位，也就是紫色，与第４个灰色的下一位，也就是蓝色相比较</strong><br><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/next6.png\" srcset=\"/img/loading.gif\" alt=\"next6\"><br></p>\n<p>有点递归的感觉,具体代码如下：<br></p>\n<pre><code class=\"lang-c\">void GetNext(char* p,int next[])\n{\n    int pLen = strlen(p);\n    next[0] = -1;\n    int k = -1;\n    int j = 0;\n    while (j &lt; pLen - 1)\n    {\n        //p[k]表示前缀，p[j]表示后缀\n//next[0]=-1,next[1]=0是固定的\n        if (k == -1 || p[j] == p[k]) \n        {\n            ++k;\n            ++j;\n            next[j] = k;\n        }\n        else \n        {\n            k = next[k];\n        }\n    }\n}\n</code></pre>\n<p>尽管next数组已经可以很到的提高匹配的效率，但是如果遇到极端情况例如：<br><br>|0|1|2|3|4|5|6|7|8|9|10|11|12||<br>|:——-:|:——-:|:——-:|:——-:|:——-:|——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|<br>|A|A|A|A|A|A|A|A|B|B|B|B|B|…..|<br>|A|A|A|A|A|A|A|A|A|<br>|-1|0|1|2|3|4|5|6|7|这里是|next数组||<br>这样子匹配时，在８这里发生不匹配发生移动，移动的位数是８－７＝１位，也就是下次比较时是P[7]和S[8]比较，但是这两者也不匹配，则又会移动，同样是同样是移动１位，根据上图可以看出，如果遇到这种情况，KMP算法就相当于遍历又变成了暴力搜索了．<br></p>\n<p><strong>那是否有办法解决这个问题？</strong><br><br>答案是：改进next数组，得到的新数组就是nextval数组．<br></p>\n<h2 id=\"nextval数组\"><a href=\"#nextval数组\" class=\"headerlink\" title=\"nextval数组\"></a>nextval数组</h2><p>nextval数组值的求解方法：<br><br><strong>如果下标a的字符P[a]＝P[next[a]],则nextval[a]=nextval[next[a]]<br>如果不等则nextval[a]=next[a]</strong><br><br>所以得到的nextval数组：<br><br>|0|1|2|3|4|5|6|7|8|9|10|11|12||<br>|:——-:|:——-:|:——-:|:——-:|:——-:|——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|<br>|A|A|A|A|A|A|A|A|B|B|B|B|B|…..|<br>|A|A|A|A|A|A|A|A|A|<br>|-1|0|1|2|3|4|5|6|7|next数组|||<br>|-1|-1|-1|-1|-1|-1|-1|-1|-1|nextval数组||<br>可以看到如果用nextval数组代替next数组，当在８号位不匹配时，直接遇到标志值，直接向右边移动了８位，再次比较时就是P[0]和S[8]比较了<br></p>\n<p><strong>nextval数组是怎么解决这个问题的呢?</strong><br><br>答:下标为a的位置不匹配，next[a]表示的是(0~a-1),a个字符的部分匹配值<strong>X</strong>(<strong>注意：部分匹配值是从１开始算的</strong>)，所以0~X-1的字符是其匹配的前缀，P[next[a]]是匹配前缀的下一个数，所以如果P[a]=P[next[a]]再次跳到P[next[a]]这里比较还会不匹配，所以nextval[a]=nextval[next[a]]（相当于一个递归向前寻找），如果不相等，再次跳到这里比较就有意义，所以nextval[a]=next[a]</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>感谢:<br></strong><br><a href=\"https://blog.csdn.net/qq_30974369/article/details/74276186\" target=\"_blank\" rel=\"noopener\">KMP算法 Next数组详解(【洛谷3375】KMP字符串匹配 )</a><br><br><a href=\"https://wiki.jikexueyuan.com/project/kmp-algorithm/define.html\" target=\"_blank\" rel=\"noopener\">从头到尾彻底理解 KMP</a><br><br><a href=\"http://www.ruanyifeng.com/blog/2013/05/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm.html\" target=\"_blank\" rel=\"noopener\">字符串匹配的KMP算法</a><br></p>\n<p>KMP算法即是用来解决在一个字符串S(例如ABCDEFG)中快速查找字符串P(ABCD)的一个算法.<br><br>在介绍KMP算法之前我们先介绍暴力查找字符的算法<br></p>\n<h1 id=\"字符串的暴力查找法\"><a href=\"#字符串的暴力查找法\" class=\"headerlink\" title=\"字符串的暴力查找法\"></a>字符串的暴力查找法</h1><p>如下图用暴力查找法在字符串S(BB….DE)中寻找匹配项字符P(ABCDABD）．<br></p>\n<p><em>暴力查找法核心就是发现S[i]和P[j]不相等，S和P就开始回退，S回退到i=i-(j-1)处 ,j回退为０．具体看下图：<br></em></p>\n<p><strong>比较S[0]!=P[0]不相等则回退,i=i-(j-1)=0-0+1=1,j=0,相当于S向前进一步，而P回到j=0再开始比较</strong><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/BL1.png\" srcset=\"/img/loading.gif\" alt=\"BL1\"><br><strong>还是不相等，与上面情况相同</strong><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/BL2.png\" srcset=\"/img/loading.gif\" alt=\"BL2\"><br><strong>S[i]=p[i],i++,j++继续向下比较</strong><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/BL3.png\" srcset=\"/img/loading.gif\" alt=\"BL3\"><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/BL4.png\" srcset=\"/img/loading.gif\" alt=\"BL4\"><br><strong>发现S[i]!=P[j]不相等开始回退</strong><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/BL5.png\" srcset=\"/img/loading.gif\" alt=\"BL5\"><br><strong>置i=i-(j-1)=9-(6-1)=4,j=0,继续比较,即开始比较S[4]=B和P[0]=A,</strong><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/BL6.png\" srcset=\"/img/loading.gif\" alt=\"BL6\"></p>\n<p>可以发现暴力查找的缺点就在发现不相等，S和P都要回退，再重新比较，倘若S和P都特别长，假设S有10000个字符，P有1000个字符，S与P从第０个字符开始相等，而在第998个字符不等，这时，S就要从１号开始再和P从０开始重新比较，太费时．<br></p>\n<p>有没有一种方法让i不改变而只改变j的方法来解决这个字符串的查找问题？没错就是KMP算法.<br></p>\n<h1 id=\"KMP算法\"><a href=\"#KMP算法\" class=\"headerlink\" title=\"KMP算法\"></a>KMP算法</h1><p>在介绍KMP算法之前，需要先介绍<strong>部分匹配值表</strong><br></p>\n<p>首先，要了解两个概念：”前缀”和”后缀”。 “前缀”指除了最后一个字符以外，一个字符串的全部头部组合；”后缀”指除了第一个字符以外，一个字符串的全部尾部组合。</p>\n<p><strong>部分匹配值</strong>就是许多字符串＂前缀＂和＂后缀＂最长的共有元素长度，部分匹配值表就是各个子字符串的所以部分匹配值组成的表．<br></p>\n<p>以字符串ABCDABD为例：<br></p>\n<pre><code>-&quot;A&quot;,的＂前缀＂和＂后缀＂都是空集　共有元素长度是0． \n-&quot;AB&quot;,的＂前缀＂是｛A｝和＂后缀＂是｛B｝　共有元素长度是0 \n-&quot;ABC&quot;,的＂前缀＂是｛A,AB｝和＂后缀＂是{C,BC}　共有元素长度是0. \n-&quot;ABCD&quot;,的＂前缀＂是{A,AB,ABC}和＂后缀＂{D,CD,BCD}　共有元素长度是0 \n-&quot;ABCDA&quot;,的＂前缀＂是｛A,AB,ABC,ABCD｝和＂后缀＂是{A,DA,CDA,BCDA}　共有元素是A长度是1 \n-&quot;ABCDAB&quot;,的＂前缀＂是｛A,AB,ABC,ABCD,ABCDA｝和＂后缀＂是｛B,AB,DAB,CDAB,BCDAB｝　共有元素是AB长度是2. \n-&quot;ABCDABD&quot;,的＂前缀＂是｛A,AB,ABC,ABCD,ABCDA,ABCDAB｝和＂后缀＂是｛D,BD,ABD,DABD,CDABD,BCDABD,｝　共有元素长度0\n</code></pre><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">字符串中各个子串</th>\n<th style=\"text-align:center\">前缀</th>\n<th style=\"text-align:center\">后缀</th>\n<th style=\"text-align:center\">最大共有元素长度</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">空集</td>\n<td style=\"text-align:center\">空集</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">AB</td>\n<td style=\"text-align:center\">｛A｝</td>\n<td style=\"text-align:center\">｛B｝</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ABC</td>\n<td style=\"text-align:center\">｛A,AB｝</td>\n<td style=\"text-align:center\">{C,BC}</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ABCD</td>\n<td style=\"text-align:center\">{A,AB,ABC}</td>\n<td style=\"text-align:center\">{D,CD,BCD}　</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ABCDA</td>\n<td style=\"text-align:center\">｛A,AB,ABC,ABCD｝</td>\n<td style=\"text-align:center\">{A,DA,CDA,BCDA}</td>\n<td style=\"text-align:center\">1</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ABCDAB</td>\n<td style=\"text-align:center\">｛A,AB,ABC,ABCD,ABCDA｝</td>\n<td style=\"text-align:center\">｛B,AB,DAB,CDAB,BCDAB｝</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ABCDABD</td>\n<td style=\"text-align:center\">｛A,AB,ABC,ABCD,ABCDA,ABCDAB｝</td>\n<td style=\"text-align:center\">｛D,BD,ABD,DABD,CDABD,BCDABD,｝</td>\n<td style=\"text-align:center\">0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><br></p>\n<p>如下图KMP算法在遇到S[i]!=P[j]时，i不改变而只改变j，j会向右前进，移动的位数符合以下公式：<br></p>\n<pre><code>移动位数（Z）　＝　已匹配位数(X)　－　匹配子字符串的部分匹配值(Y)\n</code></pre><p><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/KMP举例1.png\" srcset=\"/img/loading.gif\" alt=\"KMP1\"><br></p>\n<p>P要向前移动的位数是6-2=4位，再进行比较．<br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/KMP举例2.png\" srcset=\"/img/loading.gif\" alt=\"KMP2\"></p>\n<p><strong>为什么移动的位数要等于4呢，如果小于4会怎样？<br></strong><br>答：因为移动的位数等于4，再次比较时P字符前Y个字符不会发生不匹配的现象，而如果移动位数小于4，则再次<br>字符P,S再次比较时一定会发生不匹配的现象．<br><br><strong>为什么如果右移动小于Z就会发生不匹配的现象呢？</strong><br><br>答：如果向又移动３位则且要求再次比较不会发生不匹配的现象，就要求字符串P的前三位P0P1P2,与P3P4P5相等才不会发生不匹配的现象，但现在现实时P0P1和P4P5相等（部分匹配值为２），P0P1P2和P3P4P5不等，所以向右移动３一定会不匹配，同理向右移动２或者１都一样．<br></p>\n<h2 id=\"KMP的代码实现\"><a href=\"#KMP的代码实现\" class=\"headerlink\" title=\"KMP的代码实现\"></a>KMP的代码实现</h2><p>next[i]里面存放就是计算出来的部分匹配值表的变形<br><br>部分匹配值表：<br><br>|部分匹配值表|||||||<br>|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|<br>|0|1|2|3|4|5|6|<br>|A|AB|ABC|ABCD|ABCDA|ABCDAB|ABCDABD|<br>|0|0|0|0|1|2|0|</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">next[i]表</th>\n<th style=\"text-align:center\">相当于</th>\n<th style=\"text-align:center\">部分匹配值</th>\n<th style=\"text-align:center\">右移１位</th>\n<th style=\"text-align:center\">再把next[0]</th>\n<th style=\"text-align:center\">赋值为-1</th>\n<th style=\"text-align:center\"></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">3</td>\n<td style=\"text-align:center\">4</td>\n<td style=\"text-align:center\">5</td>\n<td style=\"text-align:center\">6</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">A</td>\n<td style=\"text-align:center\">AB</td>\n<td style=\"text-align:center\">ABC</td>\n<td style=\"text-align:center\">ABCD</td>\n<td style=\"text-align:center\">ABCDA</td>\n<td style=\"text-align:center\">ABCDAB</td>\n<td style=\"text-align:center\">ABCDABD</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-1</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">0</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><strong>为什么要这么做呢？而且为什么要把next[0]赋值为-1呢？</strong><br><br>因为这样方便写代码．把next[0]赋成-1,我认为是用来做一个标记，如果next[0]=0当两字符串从第0个就不匹配时，向又移动的位数就是0-0=0,相当于不移动，所以把next[0]设置成-1,当j=-1时代表第０个不匹配，就不用公式计算移动位数，直接i++,j++<br><br>假设现在文本串 S 匹配到 i 位置，模块串 P 匹配到 j 位置<br></p>\n<ul>\n<li>1.if (j == -1 || s[i] == p[j]) 则j++,i++<br></li>\n<li>2.否则若s[i] != p[j]&amp;&amp; j!=-1,j=next[j]　(这里就相当于P向右边移动了j-next[j]位)<br>1</li>\n</ul>\n<pre><code class=\"lang-c\">\nint KmpSearch(char* s, char* p)  \n{  \n    int i = 0;  \n    int j = 0;  \n    int sLen = strlen(s);  \n    int pLen = strlen(p);  \n    while (i &lt; sLen &amp;&amp; j &lt; pLen)  \n    {  \n        //如果j = -1(第0个就不想等直接下一位)，或者当前字符匹配成功（即S[i] == P[j]），都令i++，j++      \n        if (j == -1 || s[i] == p[j])  \n        {  \n            i++;  \n            j++;  \n        }  \n        else  \n        {  \n            //如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j] (这条指令的效果相当于向右移动Z=j-next[j]位)     \n            //next[j]即为j所对应的next值        \n            j = next[j];  \n        }  \n    }  \n    if (j == pLen)  \n        return i - j;  \n    else  \n        return -1;  \n}\n</code></pre>\n<p>执行上述代码需要的条件是已经计算出需要匹配字符P的next[i]数组．</p>\n<h2 id=\"next数组的计算\"><a href=\"#next数组的计算\" class=\"headerlink\" title=\"next数组的计算\"></a>next数组的计算</h2><p><strong>给出一个字符串P到底怎么计算出next[i]数组呢？</strong><br>答：<br></p>\n<p><strong>这就是给出的字符串，黑黑一坨</strong><br><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/next1.png\" srcset=\"/img/loading.gif\" alt=\"next1\"><br><br><strong>假设:字符串P的红色部分已经匹配，现在准备比较蓝色的位置</strong><br><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/next2.png\" srcset=\"/img/loading.gif\" alt=\"next2\"><br><br><strong>蓝色位置和绿色位置比较,(后缀的下一位和前缀的下一位比较)</strong><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/next3.png\" srcset=\"/img/loading.gif\" alt=\"next3\"><br><br><strong>蓝色与绿色匹配不上,此时寻找红色前缀的最大公共前后缀，即两个灰色部分相等</strong><br><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/next4.png\" srcset=\"/img/loading.gif\" alt=\"next4\"><br><br><strong>由于两个红色部分是相同的所以红色后缀，也有两个灰色相同，（这四个灰色都是相同的）</strong><br><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/next5.png\" srcset=\"/img/loading.gif\" alt=\"next5\"><br><br><strong>最后用第１个灰色的下一位，也就是紫色，与第４个灰色的下一位，也就是蓝色相比较</strong><br><br><img src=\"/2020/03/22/KMP%E7%AE%97%E6%B3%95/next6.png\" srcset=\"/img/loading.gif\" alt=\"next6\"><br></p>\n<p>有点递归的感觉,具体代码如下：<br></p>\n<pre><code class=\"lang-c\">void GetNext(char* p,int next[])\n{\n    int pLen = strlen(p);\n    next[0] = -1;\n    int k = -1;\n    int j = 0;\n    while (j &lt; pLen - 1)\n    {\n        //p[k]表示前缀，p[j]表示后缀\n//next[0]=-1,next[1]=0是固定的\n        if (k == -1 || p[j] == p[k]) \n        {\n            ++k;\n            ++j;\n            next[j] = k;\n        }\n        else \n        {\n            k = next[k];\n        }\n    }\n}\n</code></pre>\n<p>尽管next数组已经可以很到的提高匹配的效率，但是如果遇到极端情况例如：<br><br>|0|1|2|3|4|5|6|7|8|9|10|11|12||<br>|:——-:|:——-:|:——-:|:——-:|:——-:|——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|<br>|A|A|A|A|A|A|A|A|B|B|B|B|B|…..|<br>|A|A|A|A|A|A|A|A|A|<br>|-1|0|1|2|3|4|5|6|7|这里是|next数组||<br>这样子匹配时，在８这里发生不匹配发生移动，移动的位数是８－７＝１位，也就是下次比较时是P[7]和S[8]比较，但是这两者也不匹配，则又会移动，同样是同样是移动１位，根据上图可以看出，如果遇到这种情况，KMP算法就相当于遍历又变成了暴力搜索了．<br></p>\n<p><strong>那是否有办法解决这个问题？</strong><br><br>答案是：改进next数组，得到的新数组就是nextval数组．<br></p>\n<h2 id=\"nextval数组\"><a href=\"#nextval数组\" class=\"headerlink\" title=\"nextval数组\"></a>nextval数组</h2><p>nextval数组值的求解方法：<br><br><strong>如果下标a的字符P[a]＝P[next[a]],则nextval[a]=nextval[next[a]]<br>如果不等则nextval[a]=next[a]</strong><br><br>所以得到的nextval数组：<br><br>|0|1|2|3|4|5|6|7|8|9|10|11|12||<br>|:——-:|:——-:|:——-:|:——-:|:——-:|——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|:——-:|<br>|A|A|A|A|A|A|A|A|B|B|B|B|B|…..|<br>|A|A|A|A|A|A|A|A|A|<br>|-1|0|1|2|3|4|5|6|7|next数组|||<br>|-1|-1|-1|-1|-1|-1|-1|-1|-1|nextval数组||<br>可以看到如果用nextval数组代替next数组，当在８号位不匹配时，直接遇到标志值，直接向右边移动了８位，再次比较时就是P[0]和S[8]比较了<br></p>\n<p><strong>nextval数组是怎么解决这个问题的呢?</strong><br><br>答:下标为a的位置不匹配，next[a]表示的是(0~a-1),a个字符的部分匹配值<strong>X</strong>(<strong>注意：部分匹配值是从１开始算的</strong>)，所以0~X-1的字符是其匹配的前缀，P[next[a]]是匹配前缀的下一个数，所以如果P[a]=P[next[a]]再次跳到P[next[a]]这里比较还会不匹配，所以nextval[a]=nextval[next[a]]（相当于一个递归向前寻找），如果不相等，再次跳到这里比较就有意义，所以nextval[a]=next[a]</p>\n"},{"title":"VIM指令学习","date":"2020-03-22T08:37:18.000Z","_content":"\n# vim 选中的行列递增\n\n**例如想要替换下行中10行BL1,依次递增为BL1.BL2....BL10,可以用这种方法**\n```\nBL1BL1  \nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\n```\n先用可视块选中这10行，然后ESC退到命令模式再按：输入命令<br>\n```\n:'<,'>s/BL\\zs\\d*\\ze/\\=line(\".\")-line(\"'<\")+1/g\n```\n这些指令的意思如下：\n```\n'<,'>        我们所选中的区域 (:help '<，:help '> )\ns            在选中的区域中进行替换 (:help :s )\n\\zs          指明匹配由此开始 (:help /\\zs )\n\\d*          查找任意位数的数字 (:help /\\d )\n\\ze          指明匹配到此为止 (:help /\\ze )\n\\=           指明后面是一个表达式 (:help :s\\= )\nline(\".\")    当前光标所在行的行号 (:help line() )\nline(\"'<\")   我们所选区域中第一行的行号 (:help line() )\n/g\t     代表一行内所有的BL都使用，如果没有\\g就只会对第一个BL使用命令 \n```\n最后得到的结果是：（有\\g）\n```\nBL1BL1\nBL2BL2\nBL3BL3\nBL4BL4\nBL5BL5\nBL6BL6\nBL7BL7\nBL8BL8\nBL9BL9\nBL10BL10\n```\n没有/g的情况是：<br>\n```\nBL1BL1\nBL2BL1\nBL3BL1\nBL4BL1\nBL5BL1\nBL6BL1\nBL7BL1\nBL8BL1\nBL9BL1\nBL10BL1\n```\n","source":"_posts/VIM指令学习.md","raw":"---\ntitle: VIM指令学习\ndate: 2020-03-22 16:37:18\ncategories:\n- vim \ntags:\n- vim \n---\n\n# vim 选中的行列递增\n\n**例如想要替换下行中10行BL1,依次递增为BL1.BL2....BL10,可以用这种方法**\n```\nBL1BL1  \nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\n```\n先用可视块选中这10行，然后ESC退到命令模式再按：输入命令<br>\n```\n:'<,'>s/BL\\zs\\d*\\ze/\\=line(\".\")-line(\"'<\")+1/g\n```\n这些指令的意思如下：\n```\n'<,'>        我们所选中的区域 (:help '<，:help '> )\ns            在选中的区域中进行替换 (:help :s )\n\\zs          指明匹配由此开始 (:help /\\zs )\n\\d*          查找任意位数的数字 (:help /\\d )\n\\ze          指明匹配到此为止 (:help /\\ze )\n\\=           指明后面是一个表达式 (:help :s\\= )\nline(\".\")    当前光标所在行的行号 (:help line() )\nline(\"'<\")   我们所选区域中第一行的行号 (:help line() )\n/g\t     代表一行内所有的BL都使用，如果没有\\g就只会对第一个BL使用命令 \n```\n最后得到的结果是：（有\\g）\n```\nBL1BL1\nBL2BL2\nBL3BL3\nBL4BL4\nBL5BL5\nBL6BL6\nBL7BL7\nBL8BL8\nBL9BL9\nBL10BL10\n```\n没有/g的情况是：<br>\n```\nBL1BL1\nBL2BL1\nBL3BL1\nBL4BL1\nBL5BL1\nBL6BL1\nBL7BL1\nBL8BL1\nBL9BL1\nBL10BL1\n```\n","slug":"VIM指令学习","published":1,"updated":"2020-03-22T08:59:31.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck82tkk93000096fw1z4xccmu","content":"<h1 id=\"vim-选中的行列递增\"><a href=\"#vim-选中的行列递增\" class=\"headerlink\" title=\"vim 选中的行列递增\"></a>vim 选中的行列递增</h1><p><strong>例如想要替换下行中10行BL1,依次递增为BL1.BL2….BL10,可以用这种方法</strong></p>\n<pre><code>BL1BL1  \nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\n</code></pre><p>先用可视块选中这10行，然后ESC退到命令模式再按：输入命令<br></p>\n<pre><code>:&#39;&lt;,&#39;&gt;s/BL\\zs\\d*\\ze/\\=line(&quot;.&quot;)-line(&quot;&#39;&lt;&quot;)+1/g\n</code></pre><p>这些指令的意思如下：</p>\n<pre><code>&#39;&lt;,&#39;&gt;        我们所选中的区域 (:help &#39;&lt;，:help &#39;&gt; )\ns            在选中的区域中进行替换 (:help :s )\n\\zs          指明匹配由此开始 (:help /\\zs )\n\\d*          查找任意位数的数字 (:help /\\d )\n\\ze          指明匹配到此为止 (:help /\\ze )\n\\=           指明后面是一个表达式 (:help :s\\= )\nline(&quot;.&quot;)    当前光标所在行的行号 (:help line() )\nline(&quot;&#39;&lt;&quot;)   我们所选区域中第一行的行号 (:help line() )\n/g         代表一行内所有的BL都使用，如果没有\\g就只会对第一个BL使用命令\n</code></pre><p>最后得到的结果是：（有\\g）</p>\n<pre><code>BL1BL1\nBL2BL2\nBL3BL3\nBL4BL4\nBL5BL5\nBL6BL6\nBL7BL7\nBL8BL8\nBL9BL9\nBL10BL10\n</code></pre><p>没有/g的情况是：<br></p>\n<pre><code>BL1BL1\nBL2BL1\nBL3BL1\nBL4BL1\nBL5BL1\nBL6BL1\nBL7BL1\nBL8BL1\nBL9BL1\nBL10BL1\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"vim-选中的行列递增\"><a href=\"#vim-选中的行列递增\" class=\"headerlink\" title=\"vim 选中的行列递增\"></a>vim 选中的行列递增</h1><p><strong>例如想要替换下行中10行BL1,依次递增为BL1.BL2….BL10,可以用这种方法</strong></p>\n<pre><code>BL1BL1  \nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\nBL1BL1\n</code></pre><p>先用可视块选中这10行，然后ESC退到命令模式再按：输入命令<br></p>\n<pre><code>:&#39;&lt;,&#39;&gt;s/BL\\zs\\d*\\ze/\\=line(&quot;.&quot;)-line(&quot;&#39;&lt;&quot;)+1/g\n</code></pre><p>这些指令的意思如下：</p>\n<pre><code>&#39;&lt;,&#39;&gt;        我们所选中的区域 (:help &#39;&lt;，:help &#39;&gt; )\ns            在选中的区域中进行替换 (:help :s )\n\\zs          指明匹配由此开始 (:help /\\zs )\n\\d*          查找任意位数的数字 (:help /\\d )\n\\ze          指明匹配到此为止 (:help /\\ze )\n\\=           指明后面是一个表达式 (:help :s\\= )\nline(&quot;.&quot;)    当前光标所在行的行号 (:help line() )\nline(&quot;&#39;&lt;&quot;)   我们所选区域中第一行的行号 (:help line() )\n/g         代表一行内所有的BL都使用，如果没有\\g就只会对第一个BL使用命令\n</code></pre><p>最后得到的结果是：（有\\g）</p>\n<pre><code>BL1BL1\nBL2BL2\nBL3BL3\nBL4BL4\nBL5BL5\nBL6BL6\nBL7BL7\nBL8BL8\nBL9BL9\nBL10BL10\n</code></pre><p>没有/g的情况是：<br></p>\n<pre><code>BL1BL1\nBL2BL1\nBL3BL1\nBL4BL1\nBL5BL1\nBL6BL1\nBL7BL1\nBL8BL1\nBL9BL1\nBL10BL1\n</code></pre>"}],"PostAsset":[{"_id":"source/_posts/The-Network-Core/2020-02-28 19-54-24 的屏幕截图.png","slug":"2020-02-28 19-54-24 的屏幕截图.png","post":"ck7knymj50002tlfw2qkshr1j","modified":0,"renderable":0},{"_id":"source/_posts/Chapter1-Review-Questions/2020-03-09_21:03_select.png","slug":"2020-03-09_21:03_select.png","post":"ck7knymj00001tlfwbvbngk9t","modified":0,"renderable":0},{"_id":"source/_posts/The-Network-Core/2020-02-28 19-47-00 的屏幕截图.png","slug":"2020-02-28 19-47-00 的屏幕截图.png","post":"ck7knymj50002tlfw2qkshr1j","modified":0,"renderable":0},{"_id":"source/_posts/The Network Edge/2020-02-27 14-34-38 的屏幕截图.png","slug":"2020-02-27 14-34-38 的屏幕截图.png","post":"ck7knymkv000dtlfw04fm6sm8","modified":0,"renderable":0},{"_id":"source/_posts/The Network Edge/2020-02-27 20-56-20 的屏幕截图.png","slug":"2020-02-27 20-56-20 的屏幕截图.png","post":"ck7knymkv000dtlfw04fm6sm8","modified":0,"renderable":0},{"_id":"source/_posts/The Network Edge/2020-02-27 21-43-25 的屏幕截图.png","slug":"2020-02-27 21-43-25 的屏幕截图.png","post":"ck7knymkv000dtlfw04fm6sm8","modified":0,"renderable":0},{"_id":"source/_posts/The Network Edge/2020-02-27 23-49-06 的屏幕截图.png","slug":"2020-02-27 23-49-06 的屏幕截图.png","post":"ck7knymkv000dtlfw04fm6sm8","modified":0,"renderable":0},{"_id":"source/_posts/The Network Edge/2020-02-28 00-21-20 的屏幕截图.png","slug":"2020-02-28 00-21-20 的屏幕截图.png","post":"ck7knymkv000dtlfw04fm6sm8","modified":0,"renderable":0},{"_id":"source/_posts/process-switch-base-on-stack-switch/wm.png","slug":"wm.png","post":"ck7knymm8000itlfw1ykud7c0","modified":0,"renderable":0},{"_id":"source/_posts/process-switch-base-on-stack-switch/wm1.png","slug":"wm1.png","post":"ck7knymm8000itlfw1ykud7c0","modified":0,"renderable":0},{"_id":"source/_posts/process-switch-base-on-stack-switch/wm2.png","slug":"wm2.png","post":"ck7knymm8000itlfw1ykud7c0","modified":0,"renderable":0},{"_id":"source/_posts/Chapter1-Review-Questions/2020-03-10_15:03_select.png","slug":"2020-03-10_15:03_select.png","post":"ck7knymj00001tlfwbvbngk9t","modified":0,"renderable":0},{"_id":"source/_posts/Chapter1-Review-Questions/2020-03-11_14:03:1583906551_select.png","slug":"2020-03-11_14:03:1583906551_select.png","post":"ck7knymj00001tlfwbvbngk9t","modified":0,"renderable":0},{"_id":"source/_posts/Chapter1-Review-Questions/2020-03-11_09:03_select.png","slug":"2020-03-11_09:03_select.png","post":"ck7knymj00001tlfwbvbngk9t","modified":0,"renderable":0},{"_id":"source/_posts/Chapter1-Review-Questions/2020-03-11_20:03:1583929611_select.png","slug":"2020-03-11_20:03:1583929611_select.png","post":"ck7knymj00001tlfwbvbngk9t","modified":0,"renderable":0},{"_id":"source/_posts/二元组和图形描述逻辑结构/870358-20160102224630526-1483051229.jpg","slug":"870358-20160102224630526-1483051229.jpg","post":"ck81r6o2w0000tyfw1lml2k8q","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/BL1.png","slug":"BL1.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/BL2.png","slug":"BL2.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/BL3.png","slug":"BL3.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/BL4.png","slug":"BL4.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/BL5.png","slug":"BL5.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/BL6.png","slug":"BL6.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/KMP举例1.png","slug":"KMP举例1.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/KMP举例2.png","slug":"KMP举例2.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/next1.png","slug":"next1.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/next2.png","slug":"next2.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/next3.png","slug":"next3.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/next4.png","slug":"next4.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/next5.png","slug":"next5.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/next6.png","slug":"next6.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/证明1.png","slug":"证明1.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/证明2.png","slug":"证明2.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/证明3.png","slug":"证明3.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0},{"_id":"source/_posts/KMP算法/证明１.png","slug":"证明１.png","post":"ck82o69jx0000sffwg52tduhn","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ck81r6o2w0000tyfw1lml2k8q","category_id":"ck81r6o340001tyfw85yda67n","_id":"ck81r6o3a0004tyfwapj45pva"},{"post_id":"ck82o69jx0000sffwg52tduhn","category_id":"ck81r6o340001tyfw85yda67n","_id":"ck82sf1ge0001rnfw0lco3hp0"},{"post_id":"ck82tkk93000096fw1z4xccmu","category_id":"ck82tkk99000196fw5zxzc7fb","_id":"ck82tkk9e000496fw2i9vg0ry"}],"PostTag":[{"post_id":"ck7knymj00001tlfwbvbngk9t","tag_id":"ck7knymj70003tlfwc0se1kmn","_id":"ck7knymjp0007tlfwe2no7xdw"},{"post_id":"ck7knymj50002tlfw2qkshr1j","tag_id":"ck7knymj70003tlfwc0se1kmn","_id":"ck7knymjr0009tlfwa6cp1c1j"},{"post_id":"ck7knymjc0004tlfw1lwr04yu","tag_id":"ck7knymjq0008tlfwgzac3ta7","_id":"ck7knymjs000btlfw193h8e2o"},{"post_id":"ck7knymje0005tlfwea510yok","tag_id":"ck7knymjq0008tlfwgzac3ta7","_id":"ck7knymjt000ctlfw78tvethr"},{"post_id":"ck7knymkv000dtlfw04fm6sm8","tag_id":"ck7knymj70003tlfwc0se1kmn","_id":"ck7knyml3000gtlfw9mzxdvnh"},{"post_id":"ck7knymkz000ftlfw1huv2tb7","tag_id":"ck7knymjq0008tlfwgzac3ta7","_id":"ck7knyml5000htlfw5j7aeca0"},{"post_id":"ck7knymm8000itlfw1ykud7c0","tag_id":"ck7knymm9000jtlfw39p20gph","_id":"ck7knymmf000ktlfwepee1w4i"},{"post_id":"ck81r6o2w0000tyfw1lml2k8q","tag_id":"ck81r6o380002tyfwa49lf4fq","_id":"ck81r6o390003tyfwfg06hj97"},{"post_id":"ck82o69jx0000sffwg52tduhn","tag_id":"ck81r6o380002tyfwa49lf4fq","_id":"ck82sf1gd0000rnfw5mg07yw6"},{"post_id":"ck82tkk93000096fw1z4xccmu","tag_id":"ck82tkk9d000296fwgouk4qtu","_id":"ck82tkk9d000396fw17cv043a"}],"Tag":[{"name":"-Computer Network A Top-Down Approach","_id":"ck7knymj70003tlfwc0se1kmn"},{"name":"-英语学习","_id":"ck7knymjq0008tlfwgzac3ta7"},{"name":"-操作系统","_id":"ck7knymm9000jtlfw39p20gph"},{"name":"数据结构","_id":"ck81r6o380002tyfwa49lf4fq"},{"name":"vim","_id":"ck82tkk9d000296fwgouk4qtu"}]}}